!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(LUAC_T)	Makefile	/^$(LUAC_T): $(LUAC_O) $(LUA_A)$/;"	t
$(LUA_A)	Makefile	/^$(LUA_A): $(BASE_O)$/;"	t
$(LUA_T)	Makefile	/^$(LUA_T): $(LUA_O) $(LUA_A)$/;"	t
ALL	Makefile	/^ALL= all$/;"	m
ALLONES	lbitlib.c	/^#define ALLONES	/;"	d	file:
ALL_A	Makefile	/^ALL_A= $(LUA_A)$/;"	m
ALL_O	Makefile	/^ALL_O= $(BASE_O) $(LUA_O) $(LUAC_O)$/;"	m
ALL_T	Makefile	/^ALL_T= $(LUA_A) $(LUA_T) $(LUAC_T) libdlua$/;"	m
ALPHABIT	lctype.h	/^#define ALPHABIT	/;"	d
AR	Makefile	/^AR= ar rcu$/;"	m
AUXMARK	loadlib.c	/^#define AUXMARK /;"	d	file:
App_C_Flags	Makefile	/^App_C_Flags := $(SGX_COMMON_CFLAGS) -pie -fPIE -fPIC  -Wno-attributes -ldl$/;"	m
AuxsetnodeT	ltable.c	/^} AuxsetnodeT;$/;"	t	typeref:struct:__anonf24b53aa0108	file:
BASE_O	Makefile	/^BASE_O= $(CORE_O) $(LIB_O) $(MYOBJS)$/;"	m
BASIC_STACK_SIZE	lstate.h	/^#define BASIC_STACK_SIZE /;"	d
BITRK	lopcodes.h	/^#define BITRK	/;"	d
BIT_ISCOLLECTABLE	lobject.h	/^#define BIT_ISCOLLECTABLE	/;"	d
BLACKBIT	lgc.h	/^#define BLACKBIT	/;"	d
BinOpr	lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BlockCnt	lparser.c	/^typedef struct BlockCnt {$/;"	s	file:
BlockCnt	lparser.c	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
CAP_POSITION	lstrlib.c	/^#define CAP_POSITION	/;"	d	file:
CAP_UNFINISHED	lstrlib.c	/^#define CAP_UNFINISHED	/;"	d	file:
CC	Makefile	/^CC= gcc -Ofast -std=c++11 -pie -fPIE -D_GLIBCXX_USE_CXX11_ABI=0 -pthread -fpermissive $(App_C_Fl/;"	m
CClosure	lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CFLAGS	Makefile	/^CFLAGS= -Ofast -Wall -Wextra -DLUA_COMPAT_5_2 $(SYSCFLAGS) $(MYCFLAGS)$/;"	m
CIST_FIN	lstate.h	/^#define CIST_FIN	/;"	d
CIST_FRESH	lstate.h	/^#define CIST_FRESH	/;"	d
CIST_HOOKED	lstate.h	/^#define CIST_HOOKED	/;"	d
CIST_HOOKYIELD	lstate.h	/^#define CIST_HOOKYIELD	/;"	d
CIST_LEQ	lstate.h	/^#define CIST_LEQ	/;"	d
CIST_LUA	lstate.h	/^#define CIST_LUA	/;"	d
CIST_OAH	lstate.h	/^#define CIST_OAH	/;"	d
CIST_TAIL	lstate.h	/^#define CIST_TAIL	/;"	d
CIST_YPCALL	lstate.h	/^#define CIST_YPCALL	/;"	d
CLIBS	loadlib.c	/^static const int CLIBS = 0;$/;"	v	typeref:typename:const int	file:
CORE_O	Makefile	/^CORE_O=	lapi.o lcode.o lctype.o ldebug.o ldo.o ldump.o lfunc.o lgc.o llex.o \\$/;"	m
CREATE_ABC	lopcodes.h	/^#define CREATE_ABC(/;"	d
CREATE_ABx	lopcodes.h	/^#define CREATE_ABx(/;"	d
CREATE_Ax	lopcodes.h	/^#define CREATE_Ax(/;"	d
CallInfo	lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallS	lapi.c	/^struct CallS {  \/* data to 'f_call' *\/$/;"	s	file:
Closure	lobject.h	/^typedef union Closure {$/;"	u
Closure	lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
ClosureHeader	lobject.h	/^#define ClosureHeader /;"	d
CommonHeader	lobject.h	/^#define CommonHeader	/;"	d
ConsControl	lparser.c	/^struct ConsControl {$/;"	s	file:
DIGITBIT	lctype.h	/^#define DIGITBIT	/;"	d
DLMSG	loadlib.c	/^#define DLMSG	/;"	d	file:
DumpBlock	ldump.c	/^static void DumpBlock (const void *b, size_t size, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpByte	ldump.c	/^static void DumpByte (int y, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpCode	ldump.c	/^static void DumpCode (const Proto *f, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpConstants	ldump.c	/^static void DumpConstants (const Proto *f, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpDebug	ldump.c	/^static void DumpDebug (const Proto *f, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpFunction	ldump.c	/^static void DumpFunction (const Proto *f, TString *psource, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpHeader	ldump.c	/^static void DumpHeader (DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpInt	ldump.c	/^static void DumpInt (int x, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpInteger	ldump.c	/^static void DumpInteger (lua_Integer x, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpLiteral	ldump.c	/^#define DumpLiteral(/;"	d	file:
DumpNumber	ldump.c	/^static void DumpNumber (lua_Number x, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpProtos	ldump.c	/^static void DumpProtos (const Proto *f, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpState	ldump.c	/^} DumpState;$/;"	t	typeref:struct:__anon6f17f8b80108	file:
DumpString	ldump.c	/^static void DumpString (const TString *s, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpUpvalues	ldump.c	/^static void DumpUpvalues (const Proto *f, DumpState *D) {$/;"	f	typeref:typename:void	file:
DumpVar	ldump.c	/^#define DumpVar(/;"	d	file:
DumpVector	ldump.c	/^#define DumpVector(/;"	d	file:
Dyndata	lparser.h	/^typedef struct Dyndata {$/;"	s
Dyndata	lparser.h	/^} Dyndata;$/;"	t	typeref:struct:Dyndata
EOFMARK	lua.c	/^#define EOFMARK	/;"	d	file:
EOZ	lzio.h	/^#define EOZ	/;"	d
ERRFUNC	loadlib.c	/^#define ERRFUNC	/;"	d	file:
ERRLIB	loadlib.c	/^#define ERRLIB	/;"	d	file:
ERRORSTACKSIZE	ldo.c	/^#define ERRORSTACKSIZE	/;"	d	file:
EXTRA_STACK	lstate.h	/^#define EXTRA_STACK /;"	d
FINALIZEDBIT	lgc.h	/^#define FINALIZEDBIT	/;"	d
FIRST_RESERVED	llex.h	/^#define FIRST_RESERVED	/;"	d
FLAGS	lstrlib.c	/^#define FLAGS	/;"	d	file:
FUNCTION	luac.c	/^#define FUNCTION /;"	d	file:
Ftypes	lstrlib.c	/^typedef union Ftypes {$/;"	u	file:
Ftypes	lstrlib.c	/^} Ftypes;$/;"	t	typeref:union:Ftypes	file:
FuncState	lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
G	lstate.h	/^#define G(/;"	d
GCFINALIZECOST	lgc.c	/^#define GCFINALIZECOST	/;"	d	file:
GCObject	lobject.h	/^struct GCObject {$/;"	s
GCObject	lobject.h	/^typedef struct GCObject GCObject;$/;"	t	typeref:struct:GCObject
GCSTEPSIZE	lgc.h	/^#define GCSTEPSIZE	/;"	d
GCSWEEPCOST	lgc.c	/^#define GCSWEEPCOST	/;"	d	file:
GCSWEEPMAX	lgc.c	/^#define GCSWEEPMAX	/;"	d	file:
GCSatomic	lgc.h	/^#define GCSatomic	/;"	d
GCScallfin	lgc.h	/^#define GCScallfin	/;"	d
GCSinsideatomic	lgc.c	/^#define GCSinsideatomic	/;"	d	file:
GCSpause	lgc.h	/^#define GCSpause	/;"	d
GCSpropagate	lgc.h	/^#define GCSpropagate	/;"	d
GCSswpallgc	lgc.h	/^#define GCSswpallgc	/;"	d
GCSswpend	lgc.h	/^#define GCSswpend	/;"	d
GCSswpfinobj	lgc.h	/^#define GCSswpfinobj	/;"	d
GCSswptobefnz	lgc.h	/^#define GCSswptobefnz	/;"	d
GCTM	lgc.c	/^static void GCTM (lua_State *L, int propagateerrors) {$/;"	f	typeref:typename:void	file:
GCUnion	lstate.h	/^union GCUnion {$/;"	u
GCdebt	lstate.h	/^  l_mem GCdebt;  \/* bytes allocated not yet compensated by the collector *\/$/;"	m	struct:global_State	typeref:typename:l_mem
GCestimate	lstate.h	/^  lu_mem GCestimate;  \/* an estimate of the non-garbage memory in use *\/$/;"	m	struct:global_State	typeref:typename:lu_mem
GCmemtrav	lstate.h	/^  lu_mem GCmemtrav;  \/* memory traversed by the GC *\/$/;"	m	struct:global_State	typeref:typename:lu_mem
GETARG_A	lopcodes.h	/^#define GETARG_A(/;"	d
GETARG_Ax	lopcodes.h	/^#define GETARG_Ax(/;"	d
GETARG_B	lopcodes.h	/^#define GETARG_B(/;"	d
GETARG_Bx	lopcodes.h	/^#define GETARG_Bx(/;"	d
GETARG_C	lopcodes.h	/^#define GETARG_C(/;"	d
GETARG_sBx	lopcodes.h	/^#define GETARG_sBx(/;"	d
GET_OPCODE	lopcodes.h	/^#define GET_OPCODE(/;"	d
GMatchState	lstrlib.c	/^typedef struct GMatchState {$/;"	s	file:
GMatchState	lstrlib.c	/^} GMatchState;$/;"	t	typeref:struct:GMatchState	file:
HOOKKEY	ldblib.c	/^static const int HOOKKEY = 0;$/;"	v	typeref:typename:const int	file:
Header	lstrlib.c	/^typedef struct Header {$/;"	s	file:
Header	lstrlib.c	/^} Header;$/;"	t	typeref:struct:Header	file:
INDEXK	lopcodes.h	/^#define INDEXK(/;"	d
IOPREF_LEN	liolib.c	/^#define IOPREF_LEN	/;"	d	file:
IO_INPUT	liolib.c	/^#define IO_INPUT	/;"	d	file:
IO_OUTPUT	liolib.c	/^#define IO_OUTPUT	/;"	d	file:
IO_PREFIX	liolib.c	/^#define IO_PREFIX	/;"	d	file:
IS	luac.c	/^#define IS(/;"	d	file:
ISK	lopcodes.h	/^#define ISK(/;"	d
IdxT	ltablib.c	/^typedef unsigned int IdxT;$/;"	t	typeref:typename:unsigned int	file:
Instruction	llimits.h	/^typedef unsigned int Instruction;$/;"	t	typeref:typename:unsigned int
Instruction	llimits.h	/^typedef unsigned long Instruction;$/;"	t	typeref:typename:unsigned long
KGC_EMERGENCY	lstate.h	/^#define KGC_EMERGENCY	/;"	d
KGC_NORMAL	lstate.h	/^#define KGC_NORMAL	/;"	d
KOption	lstrlib.c	/^typedef enum KOption {$/;"	g	file:
KOption	lstrlib.c	/^} KOption;$/;"	t	typeref:enum:KOption	file:
Kchar	lstrlib.c	/^  Kchar,	\/* fixed-length strings *\/$/;"	e	enum:KOption	file:
Kfloat	lstrlib.c	/^  Kfloat,	\/* floating-point numbers *\/$/;"	e	enum:KOption	file:
Kint	lstrlib.c	/^  Kint,		\/* signed integers *\/$/;"	e	enum:KOption	file:
Knop	lstrlib.c	/^  Knop		\/* no-op (configuration or spaces) *\/$/;"	e	enum:KOption	file:
Kpaddalign	lstrlib.c	/^  Kpaddalign,	\/* padding for alignment *\/$/;"	e	enum:KOption	file:
Kpadding	lstrlib.c	/^  Kpadding,	\/* padding *\/$/;"	e	enum:KOption	file:
Kstring	lstrlib.c	/^  Kstring,	\/* strings with prefixed length *\/$/;"	e	enum:KOption	file:
Kuint	lstrlib.c	/^  Kuint,	\/* unsigned integers *\/$/;"	e	enum:KOption	file:
Kzstr	lstrlib.c	/^  Kzstr,	\/* zero-terminated strings *\/$/;"	e	enum:KOption	file:
L	lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer	typeref:typename:lua_State *
L	ldump.c	/^  lua_State *L;$/;"	m	struct:__anon6f17f8b80108	typeref:typename:lua_State *	file:
L	llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:lua_State *
L	lstrlib.c	/^  lua_State *L;$/;"	m	struct:Header	typeref:typename:lua_State *	file:
L	lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState	typeref:typename:lua_State *	file:
L	lua.c	/^lua_State *L;$/;"	v	typeref:typename:lua_State *
L	lundump.c	/^  lua_State *L;$/;"	m	struct:__anon15ff56bb0108	typeref:typename:lua_State *	file:
L	lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio	typeref:typename:lua_State *
LClosure	lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LDFLAGS	Makefile	/^LDFLAGS= $(SYSLDFLAGS) $(MYLDFLAGS) -Ofast -lm    -Wl,--no-undefined  -Wl,--whole-archive -Wl,--/;"	m
LEVELS1	lauxlib.c	/^#define LEVELS1	/;"	d	file:
LEVELS2	lauxlib.c	/^#define LEVELS2	/;"	d	file:
LEintfloat	lvm.c	/^static int LEintfloat (lua_Integer i, lua_Number f) {$/;"	f	typeref:typename:int	file:
LEnum	lvm.c	/^static int LEnum (const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int	file:
LFIELDS_PER_FLUSH	lopcodes.h	/^#define LFIELDS_PER_FLUSH	/;"	d
LG	lstate.c	/^typedef struct LG {$/;"	s	file:
LG	lstate.c	/^} LG;$/;"	t	typeref:struct:LG	file:
LHS_assign	lparser.c	/^struct LHS_assign {$/;"	s	file:
LIBS	Makefile	/^LIBS= -lm $(SYSLIBS) $(MYLIBS)$/;"	m
LIB_FAIL	loadlib.c	/^#define LIB_FAIL	/;"	d	file:
LIB_O	Makefile	/^LIB_O=	lauxlib.o lbaselib.o lbitlib.o lcorolib.o ldblib.o liolib.o \\$/;"	m
LL	lobject.c	/^#define LL(/;"	d	file:
LStream	liolib.c	/^typedef luaL_Stream LStream;$/;"	t	typeref:typename:luaL_Stream	file:
LTintfloat	lvm.c	/^static int LTintfloat (lua_Integer i, lua_Number f) {$/;"	f	typeref:typename:int	file:
LTnum	lvm.c	/^static int LTnum (const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int	file:
LUAC_DATA	lundump.h	/^#define LUAC_DATA	/;"	d
LUAC_FORMAT	lundump.h	/^#define LUAC_FORMAT	/;"	d
LUAC_INT	lundump.h	/^#define LUAC_INT	/;"	d
LUAC_NUM	lundump.h	/^#define LUAC_NUM	/;"	d
LUAC_O	Makefile	/^LUAC_O=	luac.o$/;"	m
LUAC_T	Makefile	/^LUAC_T=	luac$/;"	m
LUAC_VERSION	lundump.h	/^#define LUAC_VERSION	/;"	d
LUAI_BITSINT	luaconf.h	/^#define LUAI_BITSINT	/;"	d
LUAI_DDEC	luaconf.h	/^#define LUAI_DDEC	/;"	d
LUAI_DDEF	luaconf.h	/^#define LUAI_DDEF	/;"	d
LUAI_FUNC	luaconf.h	/^#define LUAI_FUNC	/;"	d
LUAI_GCMUL	lstate.c	/^#define LUAI_GCMUL	/;"	d	file:
LUAI_GCPAUSE	lstate.c	/^#define LUAI_GCPAUSE	/;"	d	file:
LUAI_HASHLIMIT	lstring.c	/^#define LUAI_HASHLIMIT	/;"	d	file:
LUAI_MAXCCALLS	llimits.h	/^#define LUAI_MAXCCALLS	/;"	d
LUAI_MAXSHORTLEN	llimits.h	/^#define LUAI_MAXSHORTLEN	/;"	d
LUAI_MAXSTACK	luaconf.h	/^#define LUAI_MAXSTACK	/;"	d
LUAI_THROW	ldo.c	/^#define LUAI_THROW(/;"	d	file:
LUAI_TRY	ldo.c	/^#define LUAI_TRY(/;"	d	file:
LUAI_UACINT	luaconf.h	/^#define LUAI_UACINT	/;"	d
LUAI_UACNUMBER	luaconf.h	/^#define LUAI_UACNUMBER	/;"	d
LUALIB_API	luaconf.h	/^#define LUALIB_API	/;"	d
LUAL_BUFFERSIZE	luaconf.h	/^#define LUAL_BUFFERSIZE	/;"	d
LUAL_BUFFERSIZE	luaconf.h	/^#define LUAL_BUFFERSIZE /;"	d
LUAL_NUMSIZES	lauxlib.h	/^#define LUAL_NUMSIZES	/;"	d
LUAL_PACKPADBYTE	lstrlib.c	/^#define LUAL_PACKPADBYTE	/;"	d	file:
LUAMOD_API	luaconf.h	/^#define LUAMOD_API	/;"	d
LUA_A	Makefile	/^LUA_A=	liblua.a$/;"	m
LUA_API	luaconf.h	/^#define LUA_API	/;"	d
LUA_API	luaconf.h	/^#define LUA_API /;"	d
LUA_AUTHORS	lua.h	/^#define LUA_AUTHORS	/;"	d
LUA_BITLIBNAME	lualib.h	/^#define LUA_BITLIBNAME	/;"	d
LUA_C89_NUMBERS	luaconf.h	/^#define LUA_C89_NUMBERS$/;"	d
LUA_CDIR	luaconf.h	/^#define LUA_CDIR	/;"	d
LUA_COLIBNAME	lualib.h	/^#define LUA_COLIBNAME	/;"	d
LUA_COMPAT_APIINTCASTS	luaconf.h	/^#define LUA_COMPAT_APIINTCASTS$/;"	d
LUA_COMPAT_BITLIB	luaconf.h	/^#define LUA_COMPAT_BITLIB$/;"	d
LUA_COMPAT_IPAIRS	luaconf.h	/^#define LUA_COMPAT_IPAIRS$/;"	d
LUA_COMPAT_LOADERS	luaconf.h	/^#define LUA_COMPAT_LOADERS$/;"	d
LUA_COMPAT_LOADSTRING	luaconf.h	/^#define LUA_COMPAT_LOADSTRING$/;"	d
LUA_COMPAT_LOG10	luaconf.h	/^#define LUA_COMPAT_LOG10$/;"	d
LUA_COMPAT_MATHLIB	luaconf.h	/^#define LUA_COMPAT_MATHLIB$/;"	d
LUA_COMPAT_MAXN	luaconf.h	/^#define LUA_COMPAT_MAXN$/;"	d
LUA_COMPAT_MODULE	luaconf.h	/^#define LUA_COMPAT_MODULE$/;"	d
LUA_COMPAT_UNPACK	luaconf.h	/^#define LUA_COMPAT_UNPACK$/;"	d
LUA_COPYRIGHT	lua.h	/^#define LUA_COPYRIGHT	/;"	d
LUA_CORE	lapi.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lcode.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lctype.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	ldebug.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	ldo.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	ldump.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lfunc.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lgc.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	llex.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lmem.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lobject.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lopcodes.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lparser.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lstate.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lstring.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	ltable.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	ltm.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	luac.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lundump.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lvm.c	/^#define LUA_CORE$/;"	d	file:
LUA_CORE	lzio.c	/^#define LUA_CORE$/;"	d	file:
LUA_CPATH_DEFAULT	luaconf.h	/^#define LUA_CPATH_DEFAULT /;"	d
LUA_CPATH_VAR	loadlib.c	/^#define LUA_CPATH_VAR /;"	d	file:
LUA_CSUBSEP	loadlib.c	/^#define LUA_CSUBSEP	/;"	d	file:
LUA_DBLIBNAME	lualib.h	/^#define LUA_DBLIBNAME	/;"	d
LUA_DIRSEP	luaconf.h	/^#define LUA_DIRSEP	/;"	d
LUA_DL_DLL	luaconf.h	/^#define LUA_DL_DLL	/;"	d
LUA_ENV	llex.h	/^#define LUA_ENV	/;"	d
LUA_ERRERR	lua.h	/^#define LUA_ERRERR	/;"	d
LUA_ERRFILE	lauxlib.h	/^#define LUA_ERRFILE /;"	d
LUA_ERRGCMM	lua.h	/^#define LUA_ERRGCMM	/;"	d
LUA_ERRMEM	lua.h	/^#define LUA_ERRMEM	/;"	d
LUA_ERRRUN	lua.h	/^#define LUA_ERRRUN	/;"	d
LUA_ERRSYNTAX	lua.h	/^#define LUA_ERRSYNTAX	/;"	d
LUA_EXEC_DIR	luaconf.h	/^#define LUA_EXEC_DIR /;"	d
LUA_EXTRASPACE	luaconf.h	/^#define LUA_EXTRASPACE	/;"	d
LUA_FILEHANDLE	lauxlib.h	/^#define LUA_FILEHANDLE /;"	d
LUA_FLOAT_DOUBLE	luaconf.h	/^#define LUA_FLOAT_DOUBLE	/;"	d
LUA_FLOAT_FLOAT	luaconf.h	/^#define LUA_FLOAT_FLOAT	/;"	d
LUA_FLOAT_LONGDOUBLE	luaconf.h	/^#define LUA_FLOAT_LONGDOUBLE	/;"	d
LUA_FLOAT_TYPE	luaconf.h	/^#define LUA_FLOAT_TYPE	/;"	d
LUA_FLOORN2I	lvm.h	/^#define LUA_FLOORN2I	/;"	d
LUA_GCCOLLECT	lua.h	/^#define LUA_GCCOLLECT	/;"	d
LUA_GCCOUNT	lua.h	/^#define LUA_GCCOUNT	/;"	d
LUA_GCCOUNTB	lua.h	/^#define LUA_GCCOUNTB	/;"	d
LUA_GCISRUNNING	lua.h	/^#define LUA_GCISRUNNING	/;"	d
LUA_GCRESTART	lua.h	/^#define LUA_GCRESTART	/;"	d
LUA_GCSETPAUSE	lua.h	/^#define LUA_GCSETPAUSE	/;"	d
LUA_GCSETSTEPMUL	lua.h	/^#define LUA_GCSETSTEPMUL	/;"	d
LUA_GCSTEP	lua.h	/^#define LUA_GCSTEP	/;"	d
LUA_GCSTOP	lua.h	/^#define LUA_GCSTOP	/;"	d
LUA_HOOKCALL	lua.h	/^#define LUA_HOOKCALL	/;"	d
LUA_HOOKCOUNT	lua.h	/^#define LUA_HOOKCOUNT	/;"	d
LUA_HOOKLINE	lua.h	/^#define LUA_HOOKLINE	/;"	d
LUA_HOOKRET	lua.h	/^#define LUA_HOOKRET	/;"	d
LUA_HOOKTAILCALL	lua.h	/^#define LUA_HOOKTAILCALL /;"	d
LUA_IDSIZE	luaconf.h	/^#define LUA_IDSIZE	/;"	d
LUA_IGMARK	loadlib.c	/^#define LUA_IGMARK	/;"	d	file:
LUA_INITVARVERSION	lua.c	/^#define LUA_INITVARVERSION	/;"	d	file:
LUA_INIT_VAR	lua.c	/^#define LUA_INIT_VAR	/;"	d	file:
LUA_INTEGER	luaconf.h	/^#define LUA_INTEGER	/;"	d
LUA_INTEGER_FMT	luaconf.h	/^#define LUA_INTEGER_FMT	/;"	d
LUA_INTEGER_FRMLEN	luaconf.h	/^#define LUA_INTEGER_FRMLEN	/;"	d
LUA_INT_INT	luaconf.h	/^#define LUA_INT_INT	/;"	d
LUA_INT_LONG	luaconf.h	/^#define LUA_INT_LONG	/;"	d
LUA_INT_LONGLONG	luaconf.h	/^#define LUA_INT_LONGLONG	/;"	d
LUA_INT_TYPE	luaconf.h	/^#define LUA_INT_TYPE	/;"	d
LUA_IOLIBNAME	lualib.h	/^#define LUA_IOLIBNAME	/;"	d
LUA_KCONTEXT	luaconf.h	/^#define LUA_KCONTEXT	/;"	d
LUA_LDIR	luaconf.h	/^#define LUA_LDIR	/;"	d
LUA_LIB	lauxlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lbaselib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lbitlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lcorolib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	ldblib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	linit.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	liolib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lmathlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	loadlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	loslib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lstrlib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	ltablib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LIB	lutf8lib.c	/^#define LUA_LIB$/;"	d	file:
LUA_LLE_FLAGS	loadlib.c	/^#define LUA_LLE_FLAGS	/;"	d	file:
LUA_LOADED_TABLE	lauxlib.h	/^#define LUA_LOADED_TABLE	/;"	d
LUA_LOADLIBNAME	lualib.h	/^#define LUA_LOADLIBNAME	/;"	d
LUA_LSUBSEP	loadlib.c	/^#define LUA_LSUBSEP	/;"	d	file:
LUA_MASKCALL	lua.h	/^#define LUA_MASKCALL	/;"	d
LUA_MASKCOUNT	lua.h	/^#define LUA_MASKCOUNT	/;"	d
LUA_MASKLINE	lua.h	/^#define LUA_MASKLINE	/;"	d
LUA_MASKRET	lua.h	/^#define LUA_MASKRET	/;"	d
LUA_MATHLIBNAME	lualib.h	/^#define LUA_MATHLIBNAME	/;"	d
LUA_MAXCAPTURES	lstrlib.c	/^#define LUA_MAXCAPTURES	/;"	d	file:
LUA_MAXINPUT	lua.c	/^#define LUA_MAXINPUT	/;"	d	file:
LUA_MAXINTEGER	luaconf.h	/^#define LUA_MAXINTEGER	/;"	d
LUA_MINBUFFER	llimits.h	/^#define LUA_MINBUFFER	/;"	d
LUA_MININTEGER	luaconf.h	/^#define LUA_MININTEGER	/;"	d
LUA_MINSTACK	lua.h	/^#define LUA_MINSTACK	/;"	d
LUA_MULTRET	lua.h	/^#define LUA_MULTRET	/;"	d
LUA_NBITS	lbitlib.c	/^#define LUA_NBITS	/;"	d	file:
LUA_NOREF	lauxlib.h	/^#define LUA_NOREF /;"	d
LUA_NUMBER	luaconf.h	/^#define LUA_NUMBER	/;"	d
LUA_NUMBER_FMT	luaconf.h	/^#define LUA_NUMBER_FMT	/;"	d
LUA_NUMBER_FRMLEN	luaconf.h	/^#define LUA_NUMBER_FRMLEN	/;"	d
LUA_NUMTAGS	lua.h	/^#define LUA_NUMTAGS	/;"	d
LUA_O	Makefile	/^LUA_O=	lua.o$/;"	m
LUA_OFSEP	loadlib.c	/^#define LUA_OFSEP	/;"	d	file:
LUA_OK	lua.h	/^#define LUA_OK	/;"	d
LUA_OPADD	lua.h	/^#define LUA_OPADD	/;"	d
LUA_OPBAND	lua.h	/^#define LUA_OPBAND	/;"	d
LUA_OPBNOT	lua.h	/^#define LUA_OPBNOT	/;"	d
LUA_OPBOR	lua.h	/^#define LUA_OPBOR	/;"	d
LUA_OPBXOR	lua.h	/^#define LUA_OPBXOR	/;"	d
LUA_OPDIV	lua.h	/^#define LUA_OPDIV	/;"	d
LUA_OPEQ	lua.h	/^#define LUA_OPEQ	/;"	d
LUA_OPIDIV	lua.h	/^#define LUA_OPIDIV	/;"	d
LUA_OPLE	lua.h	/^#define LUA_OPLE	/;"	d
LUA_OPLT	lua.h	/^#define LUA_OPLT	/;"	d
LUA_OPMOD	lua.h	/^#define LUA_OPMOD	/;"	d
LUA_OPMUL	lua.h	/^#define LUA_OPMUL	/;"	d
LUA_OPPOW	lua.h	/^#define LUA_OPPOW	/;"	d
LUA_OPSHL	lua.h	/^#define LUA_OPSHL	/;"	d
LUA_OPSHR	lua.h	/^#define LUA_OPSHR	/;"	d
LUA_OPSUB	lua.h	/^#define LUA_OPSUB	/;"	d
LUA_OPUNM	lua.h	/^#define LUA_OPUNM	/;"	d
LUA_OSLIBNAME	lualib.h	/^#define LUA_OSLIBNAME	/;"	d
LUA_PATH_DEFAULT	luaconf.h	/^#define LUA_PATH_DEFAULT /;"	d
LUA_PATH_MARK	luaconf.h	/^#define LUA_PATH_MARK /;"	d
LUA_PATH_SEP	luaconf.h	/^#define LUA_PATH_SEP /;"	d
LUA_PATH_VAR	loadlib.c	/^#define LUA_PATH_VAR /;"	d	file:
LUA_POF	loadlib.c	/^#define LUA_POF	/;"	d	file:
LUA_PRELOAD_TABLE	lauxlib.h	/^#define LUA_PRELOAD_TABLE	/;"	d
LUA_PROGNAME	lua.c	/^#define LUA_PROGNAME	/;"	d	file:
LUA_PROMPT	lua.c	/^#define LUA_PROMPT	/;"	d	file:
LUA_PROMPT2	lua.c	/^#define LUA_PROMPT2	/;"	d	file:
LUA_QL	luaconf.h	/^#define LUA_QL(/;"	d
LUA_QS	luaconf.h	/^#define LUA_QS	/;"	d
LUA_REFNIL	lauxlib.h	/^#define LUA_REFNIL /;"	d
LUA_REGISTRYINDEX	lua.h	/^#define LUA_REGISTRYINDEX	/;"	d
LUA_RELEASE	lua.h	/^#define LUA_RELEASE	/;"	d
LUA_RIDX_GLOBALS	lua.h	/^#define LUA_RIDX_GLOBALS	/;"	d
LUA_RIDX_LAST	lua.h	/^#define LUA_RIDX_LAST	/;"	d
LUA_RIDX_MAINTHREAD	lua.h	/^#define LUA_RIDX_MAINTHREAD	/;"	d
LUA_ROOT	luaconf.h	/^#define LUA_ROOT	/;"	d
LUA_SHRDIR	luaconf.h	/^#define LUA_SHRDIR	/;"	d
LUA_SIGNATURE	lua.h	/^#define LUA_SIGNATURE	/;"	d
LUA_STRFTIMEOPTIONS	loslib.c	/^#define LUA_STRFTIMEOPTIONS	/;"	d	file:
LUA_STRLIBNAME	lualib.h	/^#define LUA_STRLIBNAME	/;"	d
LUA_T	Makefile	/^LUA_T=	lua$/;"	m
LUA_TABLIBNAME	lualib.h	/^#define LUA_TABLIBNAME	/;"	d
LUA_TBOOLEAN	lua.h	/^#define LUA_TBOOLEAN	/;"	d
LUA_TCCL	lobject.h	/^#define LUA_TCCL	/;"	d
LUA_TDEADKEY	lobject.h	/^#define LUA_TDEADKEY	/;"	d
LUA_TFUNCTION	lua.h	/^#define LUA_TFUNCTION	/;"	d
LUA_TLCF	lobject.h	/^#define LUA_TLCF	/;"	d
LUA_TLCL	lobject.h	/^#define LUA_TLCL	/;"	d
LUA_TLIGHTUSERDATA	lua.h	/^#define LUA_TLIGHTUSERDATA	/;"	d
LUA_TLNGSTR	lobject.h	/^#define LUA_TLNGSTR	/;"	d
LUA_TMPNAMBUFSIZE	loslib.c	/^#define LUA_TMPNAMBUFSIZE	/;"	d	file:
LUA_TMPNAMTEMPLATE	loslib.c	/^#define LUA_TMPNAMTEMPLATE	/;"	d	file:
LUA_TNIL	lua.h	/^#define LUA_TNIL	/;"	d
LUA_TNONE	lua.h	/^#define LUA_TNONE	/;"	d
LUA_TNUMBER	lua.h	/^#define LUA_TNUMBER	/;"	d
LUA_TNUMFLT	lobject.h	/^#define LUA_TNUMFLT	/;"	d
LUA_TNUMINT	lobject.h	/^#define LUA_TNUMINT	/;"	d
LUA_TOTALTAGS	lobject.h	/^#define LUA_TOTALTAGS	/;"	d
LUA_TPROTO	lobject.h	/^#define LUA_TPROTO	/;"	d
LUA_TSHRSTR	lobject.h	/^#define LUA_TSHRSTR	/;"	d
LUA_TSTRING	lua.h	/^#define LUA_TSTRING	/;"	d
LUA_TTABLE	lua.h	/^#define LUA_TTABLE	/;"	d
LUA_TTHREAD	lua.h	/^#define LUA_TTHREAD	/;"	d
LUA_TUSERDATA	lua.h	/^#define LUA_TUSERDATA	/;"	d
LUA_UNSIGNED	luaconf.h	/^#define LUA_UNSIGNED	/;"	d
LUA_USE_C89	luaconf.h	/^#define LUA_USE_C89	/;"	d
LUA_USE_CTYPE	lctype.h	/^#define LUA_USE_CTYPE	/;"	d
LUA_USE_DLOPEN	luaconf.h	/^#define LUA_USE_DLOPEN	/;"	d
LUA_USE_POSIX	luaconf.h	/^#define LUA_USE_POSIX$/;"	d
LUA_USE_READLINE	luaconf.h	/^#define LUA_USE_READLINE	/;"	d
LUA_USE_WINDOWS	luaconf.h	/^#define LUA_USE_WINDOWS /;"	d
LUA_UTF8LIBNAME	lualib.h	/^#define LUA_UTF8LIBNAME	/;"	d
LUA_VDIR	luaconf.h	/^#define LUA_VDIR	/;"	d
LUA_VERSION	lua.h	/^#define LUA_VERSION	/;"	d
LUA_VERSION_MAJOR	lua.h	/^#define LUA_VERSION_MAJOR	/;"	d
LUA_VERSION_MINOR	lua.h	/^#define LUA_VERSION_MINOR	/;"	d
LUA_VERSION_NUM	lua.h	/^#define LUA_VERSION_NUM	/;"	d
LUA_VERSION_RELEASE	lua.h	/^#define LUA_VERSION_RELEASE	/;"	d
LUA_VERSUFFIX	lualib.h	/^#define LUA_VERSUFFIX /;"	d
LUA_YIELD	lua.h	/^#define LUA_YIELD	/;"	d
LX	lstate.c	/^typedef struct LX {$/;"	s	file:
LX	lstate.c	/^} LX;$/;"	t	typeref:struct:LX	file:
L_ESC	lstrlib.c	/^#define L_ESC	/;"	d	file:
L_MAXDATEFIELD	loslib.c	/^#define L_MAXDATEFIELD	/;"	d	file:
L_MAXLENNUM	liolib.c	/^#define L_MAXLENNUM /;"	d	file:
L_MAXLENNUM	lobject.c	/^#define L_MAXLENNUM	/;"	d	file:
L_MODEEXT	liolib.c	/^#define L_MODEEXT	/;"	d	file:
L_NBFD	lstrlib.c	/^#define L_NBFD	/;"	d	file:
L_RANDMAX	lmathlib.c	/^#define L_RANDMAX	/;"	d	file:
L_STRFTIMEC89	loslib.c	/^#define L_STRFTIMEC89	/;"	d	file:
L_STRFTIMEC99	loslib.c	/^#define L_STRFTIMEC99 /;"	d	file:
L_STRFTIMEWIN	loslib.c	/^#define L_STRFTIMEWIN /;"	d	file:
L_Umaxalign	llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t	typeref:typename:LUAI_USER_ALIGNMENT_T
L_Umaxalign	llimits.h	/^} L_Umaxalign;$/;"	t	typeref:union:__anon5af4d619010a
Labeldesc	lparser.h	/^typedef struct Labeldesc {$/;"	s
Labeldesc	lparser.h	/^} Labeldesc;$/;"	t	typeref:struct:Labeldesc
Labellist	lparser.h	/^typedef struct Labellist {$/;"	s
Labellist	lparser.h	/^} Labellist;$/;"	t	typeref:struct:Labellist
LexState	llex.h	/^typedef struct LexState {$/;"	s
LexState	llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LoadBlock	lundump.c	/^static void LoadBlock (LoadState *S, void *b, size_t size) {$/;"	f	typeref:typename:void	file:
LoadByte	lundump.c	/^static lu_byte LoadByte (LoadState *S) {$/;"	f	typeref:typename:lu_byte	file:
LoadCode	lundump.c	/^static void LoadCode (LoadState *S, Proto *f) {$/;"	f	typeref:typename:void	file:
LoadConstants	lundump.c	/^static void LoadConstants (LoadState *S, Proto *f) {$/;"	f	typeref:typename:void	file:
LoadDebug	lundump.c	/^static void LoadDebug (LoadState *S, Proto *f) {$/;"	f	typeref:typename:void	file:
LoadF	lauxlib.c	/^typedef struct LoadF {$/;"	s	file:
LoadF	lauxlib.c	/^} LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadFunction	lundump.c	/^static void LoadFunction (LoadState *S, Proto *f, TString *psource) {$/;"	f	typeref:typename:void	file:
LoadInt	lundump.c	/^static int LoadInt (LoadState *S) {$/;"	f	typeref:typename:int	file:
LoadInteger	lundump.c	/^static lua_Integer LoadInteger (LoadState *S) {$/;"	f	typeref:typename:lua_Integer	file:
LoadNumber	lundump.c	/^static lua_Number LoadNumber (LoadState *S) {$/;"	f	typeref:typename:lua_Number	file:
LoadProtos	lundump.c	/^static void LoadProtos (LoadState *S, Proto *f) {$/;"	f	typeref:typename:void	file:
LoadS	lauxlib.c	/^typedef struct LoadS {$/;"	s	file:
LoadS	lauxlib.c	/^} LoadS;$/;"	t	typeref:struct:LoadS	file:
LoadState	lundump.c	/^} LoadState;$/;"	t	typeref:struct:__anon15ff56bb0108	file:
LoadString	lundump.c	/^static TString *LoadString (LoadState *S) {$/;"	f	typeref:typename:TString *	file:
LoadUpvalues	lundump.c	/^static void LoadUpvalues (LoadState *S, Proto *f) {$/;"	f	typeref:typename:void	file:
LoadVar	lundump.c	/^#define LoadVar(/;"	d	file:
LoadVector	lundump.c	/^#define LoadVector(/;"	d	file:
LocVar	lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
MASK	lctype.h	/^#define MASK(/;"	d
MASK0	lopcodes.h	/^#define MASK0(/;"	d
MASK1	lopcodes.h	/^#define MASK1(/;"	d
MAXABITS	ltable.c	/^#define MAXABITS	/;"	d	file:
MAXALIGN	lstrlib.c	/^#define MAXALIGN	/;"	d	file:
MAXARGLINE	liolib.c	/^#define MAXARGLINE	/;"	d	file:
MAXARG_A	lopcodes.h	/^#define MAXARG_A /;"	d
MAXARG_Ax	lopcodes.h	/^#define MAXARG_Ax	/;"	d
MAXARG_B	lopcodes.h	/^#define MAXARG_B /;"	d
MAXARG_Bx	lopcodes.h	/^#define MAXARG_Bx /;"	d
MAXARG_C	lopcodes.h	/^#define MAXARG_C /;"	d
MAXARG_sBx	lopcodes.h	/^#define MAXARG_sBx /;"	d
MAXASIZE	ltable.c	/^#define MAXASIZE	/;"	d	file:
MAXBY10	lobject.c	/^#define MAXBY10	/;"	d	file:
MAXCCALLS	lstrlib.c	/^#define MAXCCALLS	/;"	d	file:
MAXHBITS	ltable.c	/^#define MAXHBITS	/;"	d	file:
MAXINDEXRK	lopcodes.h	/^#define MAXINDEXRK	/;"	d
MAXINTSIZE	lstrlib.c	/^#define MAXINTSIZE	/;"	d	file:
MAXLASTD	lobject.c	/^#define MAXLASTD	/;"	d	file:
MAXNUMBER2STR	lobject.c	/^#define MAXNUMBER2STR	/;"	d	file:
MAXREGS	lcode.c	/^#define MAXREGS	/;"	d	file:
MAXSIGDIG	lobject.c	/^#define MAXSIGDIG	/;"	d	file:
MAXSIZE	lstrlib.c	/^#define MAXSIZE /;"	d	file:
MAXTAGLOOP	lvm.c	/^#define MAXTAGLOOP	/;"	d	file:
MAXUNICODE	lutf8lib.c	/^#define MAXUNICODE	/;"	d	file:
MAXUPVAL	lfunc.h	/^#define MAXUPVAL	/;"	d
MAXVARS	lparser.c	/^#define MAXVARS	/;"	d	file:
MAX_FORMAT	lstrlib.c	/^#define MAX_FORMAT	/;"	d	file:
MAX_INT	llimits.h	/^#define MAX_INT	/;"	d
MAX_ITEM	lstrlib.c	/^#define MAX_ITEM /;"	d	file:
MAX_LMEM	llimits.h	/^#define MAX_LMEM	/;"	d
MAX_LUMEM	llimits.h	/^#define MAX_LUMEM	/;"	d
MAX_SIZE	llimits.h	/^#define MAX_SIZE	/;"	d
MAX_SIZET	llimits.h	/^#define MAX_SIZET	/;"	d
MAX_SIZET	lstrlib.c	/^#define MAX_SIZET	/;"	d	file:
MC	lstrlib.c	/^#define MC	/;"	d	file:
MEMERRMSG	lstring.c	/^#define MEMERRMSG /;"	d	file:
MINSIZEARRAY	lmem.c	/^#define MINSIZEARRAY	/;"	d	file:
MINSTRTABSIZE	llimits.h	/^#define MINSTRTABSIZE	/;"	d
MYCFLAGS	Makefile	/^MYCFLAGS=$/;"	m
MYINT	lundump.h	/^#define MYINT(/;"	d
MYK	luac.c	/^#define MYK(/;"	d	file:
MYLDFLAGS	Makefile	/^MYLDFLAGS=$/;"	m
MYLIBS	Makefile	/^MYLIBS=$/;"	m
MYOBJS	Makefile	/^MYOBJS=$/;"	m
MatchState	lstrlib.c	/^typedef struct MatchState {$/;"	s	file:
MatchState	lstrlib.c	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
Mbuffer	lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
NB	lstrlib.c	/^#define NB	/;"	d	file:
NBITS	lvm.c	/^#define NBITS	/;"	d	file:
NBM	lvm.c	/^#define NBM	/;"	d	file:
NILCONSTANT	lobject.h	/^#define NILCONSTANT	/;"	d
NONVALIDVALUE	lapi.c	/^#define NONVALIDVALUE	/;"	d	file:
NO_JUMP	lcode.h	/^#define NO_JUMP /;"	d
NO_REG	lopcodes.h	/^#define NO_REG	/;"	d
NUM_OPCODES	lopcodes.h	/^#define NUM_OPCODES	/;"	d
NUM_RESERVED	llex.h	/^#define NUM_RESERVED	/;"	d
Node	lobject.h	/^typedef struct Node {$/;"	s
Node	lobject.h	/^} Node;$/;"	t	typeref:struct:Node
OPR_ADD	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_BAND	lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BNOT	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_BOR	lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BXOR	lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_CONCAT	lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	lcode.h	/^  OPR_DIV,$/;"	e	enum:BinOpr
OPR_EQ	lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_GE	lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_IDIV	lcode.h	/^  OPR_IDIV,$/;"	e	enum:BinOpr
OPR_LE	lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_LEN	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_MINUS	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_NOBINOPR	lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SHL	lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SHR	lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SUB	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OP_ADD	lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_BAND	lopcodes.h	/^OP_BAND,\/*	A B C	R(A) := RK(B) & RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_BNOT	lopcodes.h	/^OP_BNOT,\/*	A B	R(A) := ~R(B)					*\/$/;"	e	enum:__anon97e23bb40103
OP_BOR	lopcodes.h	/^OP_BOR,\/*	A B C	R(A) := RK(B) | RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_BXOR	lopcodes.h	/^OP_BXOR,\/*	A B C	R(A) := RK(B) ~ RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_CALL	lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon97e23bb40103
OP_CLOSURE	lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx])			*\/$/;"	e	enum:__anon97e23bb40103
OP_CONCAT	lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon97e23bb40103
OP_DIV	lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_EQ	lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon97e23bb40103
OP_EXTRAARG	lopcodes.h	/^OP_EXTRAARG\/*	Ax	extra (larger) argument for previous opcode	*\/$/;"	e	enum:__anon97e23bb40103
OP_FORLOOP	lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon97e23bb40103
OP_FORPREP	lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon97e23bb40103
OP_GETTABLE	lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon97e23bb40103
OP_GETTABUP	lopcodes.h	/^OP_GETTABUP,\/*	A B C	R(A) := UpValue[B][RK(C)]			*\/$/;"	e	enum:__anon97e23bb40103
OP_GETUPVAL	lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon97e23bb40103
OP_IDIV	lopcodes.h	/^OP_IDIV,\/*	A B C	R(A) := RK(B) \/\/ RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_JMP	lopcodes.h	/^OP_JMP,\/*	A sBx	pc+=sBx; if (A) close all upvalues >= R(A - 1)	*\/$/;"	e	enum:__anon97e23bb40103
OP_LE	lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon97e23bb40103
OP_LEN	lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon97e23bb40103
OP_LOADBOOL	lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon97e23bb40103
OP_LOADK	lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon97e23bb40103
OP_LOADKX	lopcodes.h	/^OP_LOADKX,\/*	A 	R(A) := Kst(extra arg)				*\/$/;"	e	enum:__anon97e23bb40103
OP_LOADNIL	lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A), R(A+1), ..., R(A+B) := nil		*\/$/;"	e	enum:__anon97e23bb40103
OP_LT	lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon97e23bb40103
OP_MOD	lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_MOVE	lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon97e23bb40103
OP_MUL	lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_NEWTABLE	lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_NOT	lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon97e23bb40103
OP_POW	lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_RETURN	lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon97e23bb40103
OP_SELF	lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon97e23bb40103
OP_SETLIST	lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon97e23bb40103
OP_SETTABLE	lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_SETTABUP	lopcodes.h	/^OP_SETTABUP,\/*	A B C	UpValue[A][RK(B)] := RK(C)			*\/$/;"	e	enum:__anon97e23bb40103
OP_SETUPVAL	lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon97e23bb40103
OP_SHL	lopcodes.h	/^OP_SHL,\/*	A B C	R(A) := RK(B) << RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_SHR	lopcodes.h	/^OP_SHR,\/*	A B C	R(A) := RK(B) >> RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_SUB	lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon97e23bb40103
OP_TAILCALL	lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon97e23bb40103
OP_TEST	lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/$/;"	e	enum:__anon97e23bb40103
OP_TESTSET	lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/$/;"	e	enum:__anon97e23bb40103
OP_TFORCALL	lopcodes.h	/^OP_TFORCALL,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));	*\/$/;"	e	enum:__anon97e23bb40103
OP_TFORLOOP	lopcodes.h	/^OP_TFORLOOP,\/*	A sBx	if R(A+1) ~= nil then { R(A)=R(A+1); pc += sBx }*\/$/;"	e	enum:__anon97e23bb40103
OP_UNM	lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon97e23bb40103
OP_VARARG	lopcodes.h	/^OP_VARARG,\/*	A B	R(A), R(A+1), ..., R(A+B-2) = vararg		*\/$/;"	e	enum:__anon97e23bb40103
OUTPUT	luac.c	/^#define OUTPUT	/;"	d	file:
OpArgK	lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgMask	lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgN	lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgR	lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgU	lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpCode	lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon97e23bb40103
OpMode	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	g
Output	luac.c	/^static char Output[]={ OUTPUT };	\/* default output file name *\/$/;"	v	typeref:typename:char[]	file:
PAUSEADJ	lgc.c	/^#define PAUSEADJ	/;"	d	file:
PI	lmathlib.c	/^#define PI	/;"	d	file:
PLAT	Makefile	/^PLAT= none$/;"	m
PLATS	Makefile	/^PLATS= aix bsd c89 freebsd generic linux macosx mingw posix solaris$/;"	m
POS	lobject.c	/^#define POS	/;"	d	file:
POS_A	lopcodes.h	/^#define POS_A	/;"	d
POS_Ax	lopcodes.h	/^#define POS_Ax	/;"	d
POS_B	lopcodes.h	/^#define POS_B	/;"	d
POS_Bx	lopcodes.h	/^#define POS_Bx	/;"	d
POS_C	lopcodes.h	/^#define POS_C	/;"	d
POS_OP	lopcodes.h	/^#define POS_OP	/;"	d
PRE	lobject.c	/^#define PRE	/;"	d	file:
PRINTBIT	lctype.h	/^#define PRINTBIT	/;"	d
PROGNAME	luac.c	/^#define PROGNAME	/;"	d	file:
Pfunc	ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t	typeref:typename:void (*)(lua_State * L,void * ud)
PrintCode	luac.c	/^static void PrintCode(const Proto* f)$/;"	f	typeref:typename:void	file:
PrintConstant	luac.c	/^static void PrintConstant(const Proto* f, int i)$/;"	f	typeref:typename:void	file:
PrintDebug	luac.c	/^static void PrintDebug(const Proto* f)$/;"	f	typeref:typename:void	file:
PrintFunction	luac.c	/^static void PrintFunction(const Proto* f, int full)$/;"	f	typeref:typename:void	file:
PrintHeader	luac.c	/^static void PrintHeader(const Proto* f)$/;"	f	typeref:typename:void	file:
PrintString	luac.c	/^static void PrintString(const TString* ts)$/;"	f	typeref:typename:void	file:
Protect	lvm.c	/^#define Protect(/;"	d	file:
Proto	lobject.h	/^typedef struct Proto {$/;"	s
Proto	lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
RA	lvm.c	/^#define RA(/;"	d	file:
RANLIB	Makefile	/^RANLIB= ranlib$/;"	m
RANLIMIT	ltablib.c	/^#define RANLIMIT	/;"	d	file:
RB	lvm.c	/^#define RB(/;"	d	file:
RC	lvm.c	/^#define RC(/;"	d	file:
RESERVED	llex.h	/^enum RESERVED {$/;"	g
RESERVEDSLOT	lbaselib.c	/^#define RESERVEDSLOT	/;"	d	file:
RETS	lobject.c	/^#define RETS	/;"	d	file:
RKASK	lopcodes.h	/^#define RKASK(/;"	d
RKB	lvm.c	/^#define RKB(/;"	d	file:
RKC	lvm.c	/^#define RKC(/;"	d	file:
RM	Makefile	/^RM= rm -f$/;"	m
RN	liolib.c	/^} RN;$/;"	t	typeref:struct:__anonc4e633510108	file:
S	luac.c	/^#define S(/;"	d	file:
SETARG_A	lopcodes.h	/^#define SETARG_A(/;"	d
SETARG_Ax	lopcodes.h	/^#define SETARG_Ax(/;"	d
SETARG_B	lopcodes.h	/^#define SETARG_B(/;"	d
SETARG_Bx	lopcodes.h	/^#define SETARG_Bx(/;"	d
SETARG_C	lopcodes.h	/^#define SETARG_C(/;"	d
SETARG_sBx	lopcodes.h	/^#define SETARG_sBx(/;"	d
SET_OPCODE	lopcodes.h	/^#define SET_OPCODE(/;"	d
SGX_COMMON_CXXFLAGS	Makefile	/^SGX_COMMON_CXXFLAGS := $(SGX_COMMON_FLAGS) -Wnon-virtual-dtor -std=c++11 $/;"	m
SIZELENMOD	lstrlib.c	/^#define SIZELENMOD	/;"	d	file:
SIZETIMEFMT	loslib.c	/^#define SIZETIMEFMT	/;"	d	file:
SIZE_A	lopcodes.h	/^#define SIZE_A	/;"	d
SIZE_Ax	lopcodes.h	/^#define SIZE_Ax	/;"	d
SIZE_B	lopcodes.h	/^#define SIZE_B	/;"	d
SIZE_Bx	lopcodes.h	/^#define SIZE_Bx	/;"	d
SIZE_C	lopcodes.h	/^#define SIZE_C	/;"	d
SIZE_OP	lopcodes.h	/^#define SIZE_OP	/;"	d
SPACEBIT	lctype.h	/^#define SPACEBIT	/;"	d
SPACECHARS	lbaselib.c	/^#define SPACECHARS	/;"	d	file:
SPECIALS	lstrlib.c	/^#define SPECIALS	/;"	d	file:
SParser	ldo.c	/^struct SParser {  \/* data to 'f_parser' *\/$/;"	s	file:
SS	luac.c	/^#define SS(/;"	d	file:
STEPMULADJ	lgc.c	/^#define STEPMULADJ	/;"	d	file:
STRCACHE_M	llimits.h	/^#define STRCACHE_M	/;"	d
STRCACHE_N	llimits.h	/^#define STRCACHE_N	/;"	d
SYSCFLAGS	Makefile	/^SYSCFLAGS=$/;"	m
SYSLDFLAGS	Makefile	/^SYSLDFLAGS=$/;"	m
SYSLIBS	Makefile	/^SYSLIBS=$/;"	m
SZINT	lstrlib.c	/^#define SZINT	/;"	d	file:
SemInfo	llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon0ba7e630010a
StkId	lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t	typeref:typename:TValue *
TAB_L	ltablib.c	/^#define TAB_L	/;"	d	file:
TAB_R	ltablib.c	/^#define TAB_R	/;"	d	file:
TAB_RW	ltablib.c	/^#define TAB_RW	/;"	d	file:
TAB_W	ltablib.c	/^#define TAB_W	/;"	d	file:
TK_AND	llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_DBCOLON	llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_DO	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_ELSE	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_EQ	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_FALSE	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FLT	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_FOR	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_GOTO	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IDIV	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_IF	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_INT	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_LE	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_LOCAL	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_NE	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_NIL	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_OR	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_SHL	llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_SHR	llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_STRING	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_THEN	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TKey	lobject.h	/^typedef union TKey {$/;"	u
TKey	lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TMS	ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon0fe2c8880103
TM_ADD	ltm.h	/^  TM_ADD,$/;"	e	enum:__anon0fe2c8880103
TM_BAND	ltm.h	/^  TM_BAND,$/;"	e	enum:__anon0fe2c8880103
TM_BNOT	ltm.h	/^  TM_BNOT,$/;"	e	enum:__anon0fe2c8880103
TM_BOR	ltm.h	/^  TM_BOR,$/;"	e	enum:__anon0fe2c8880103
TM_BXOR	ltm.h	/^  TM_BXOR,$/;"	e	enum:__anon0fe2c8880103
TM_CALL	ltm.h	/^  TM_CALL,$/;"	e	enum:__anon0fe2c8880103
TM_CONCAT	ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon0fe2c8880103
TM_DIV	ltm.h	/^  TM_DIV,$/;"	e	enum:__anon0fe2c8880103
TM_EQ	ltm.h	/^  TM_EQ,  \/* last tag method with fast access *\/$/;"	e	enum:__anon0fe2c8880103
TM_GC	ltm.h	/^  TM_GC,$/;"	e	enum:__anon0fe2c8880103
TM_IDIV	ltm.h	/^  TM_IDIV,$/;"	e	enum:__anon0fe2c8880103
TM_INDEX	ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon0fe2c8880103
TM_LE	ltm.h	/^  TM_LE,$/;"	e	enum:__anon0fe2c8880103
TM_LEN	ltm.h	/^  TM_LEN,$/;"	e	enum:__anon0fe2c8880103
TM_LT	ltm.h	/^  TM_LT,$/;"	e	enum:__anon0fe2c8880103
TM_MOD	ltm.h	/^  TM_MOD,$/;"	e	enum:__anon0fe2c8880103
TM_MODE	ltm.h	/^  TM_MODE,$/;"	e	enum:__anon0fe2c8880103
TM_MUL	ltm.h	/^  TM_MUL,$/;"	e	enum:__anon0fe2c8880103
TM_N	ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon0fe2c8880103
TM_NEWINDEX	ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon0fe2c8880103
TM_POW	ltm.h	/^  TM_POW,$/;"	e	enum:__anon0fe2c8880103
TM_SHL	ltm.h	/^  TM_SHL,$/;"	e	enum:__anon0fe2c8880103
TM_SHR	ltm.h	/^  TM_SHR,$/;"	e	enum:__anon0fe2c8880103
TM_SUB	ltm.h	/^  TM_SUB,$/;"	e	enum:__anon0fe2c8880103
TM_UNM	ltm.h	/^  TM_UNM,$/;"	e	enum:__anon0fe2c8880103
TString	lobject.h	/^typedef struct TString {$/;"	s
TString	lobject.h	/^} TString;$/;"	t	typeref:struct:TString
TValue	lobject.h	/^} TValue;$/;"	t	typeref:struct:lua_TValue
TValuefields	lobject.h	/^#define TValuefields	/;"	d
Table	lobject.h	/^typedef struct Table {$/;"	s
Table	lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Token	llex.h	/^typedef struct Token {$/;"	s
Token	llex.h	/^} Token;$/;"	t	typeref:struct:Token
UBox	lauxlib.c	/^typedef struct UBox {$/;"	s	file:
UBox	lauxlib.c	/^} UBox;$/;"	t	typeref:struct:UBox	file:
UNARY_PRIORITY	lparser.c	/^#define UNARY_PRIORITY	/;"	d	file:
UNUSED	llimits.h	/^#define UNUSED(/;"	d
UPVALNAME	luac.c	/^#define UPVALNAME(/;"	d	file:
UTF8BUFFSZ	lobject.h	/^#define UTF8BUFFSZ	/;"	d
UTF8PATT	lutf8lib.c	/^#define UTF8PATT	/;"	d	file:
UTString	lobject.h	/^typedef union UTString {$/;"	u
UTString	lobject.h	/^} UTString;$/;"	t	typeref:union:UTString
UUdata	lobject.h	/^typedef union UUdata {$/;"	u
UUdata	lobject.h	/^} UUdata;$/;"	t	typeref:union:UUdata
Udata	lobject.h	/^typedef struct Udata {$/;"	s
Udata	lobject.h	/^} Udata;$/;"	t	typeref:struct:Udata
UnOpr	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UpVal	lfunc.h	/^struct UpVal {$/;"	s
UpVal	lobject.h	/^typedef struct UpVal UpVal;$/;"	t	typeref:struct:UpVal
Upvaldesc	lobject.h	/^typedef struct Upvaldesc {$/;"	s
Upvaldesc	lobject.h	/^} Upvaldesc;$/;"	t	typeref:struct:Upvaldesc
VCALL	lparser.h	/^  VCALL,  \/* expression is a function call; info = instruction pc *\/$/;"	e	enum:__anonb080c5d40103
VFALSE	lparser.h	/^  VFALSE,  \/* constant false *\/$/;"	e	enum:__anonb080c5d40103
VINDEXED	lparser.h	/^  VINDEXED,  \/* indexed variable;$/;"	e	enum:__anonb080c5d40103
VJMP	lparser.h	/^  VJMP,  \/* expression is a test\/comparison;$/;"	e	enum:__anonb080c5d40103
VK	lparser.h	/^  VK,  \/* constant in 'k'; info = index of constant in 'k' *\/$/;"	e	enum:__anonb080c5d40103
VKFLT	lparser.h	/^  VKFLT,  \/* floating constant; nval = numerical float value *\/$/;"	e	enum:__anonb080c5d40103
VKINT	lparser.h	/^  VKINT,  \/* integer constant; nval = numerical integer value *\/$/;"	e	enum:__anonb080c5d40103
VLOCAL	lparser.h	/^  VLOCAL,  \/* local variable; info = local register *\/$/;"	e	enum:__anonb080c5d40103
VNIL	lparser.h	/^  VNIL,  \/* constant nil *\/$/;"	e	enum:__anonb080c5d40103
VNONRELOC	lparser.h	/^  VNONRELOC,  \/* expression has its value in a fixed register;$/;"	e	enum:__anonb080c5d40103
VOID	luac.c	/^#define VOID(/;"	d	file:
VRELOCABLE	lparser.h	/^  VRELOCABLE,  \/* expression can put result in any register;$/;"	e	enum:__anonb080c5d40103
VTRUE	lparser.h	/^  VTRUE,  \/* constant true *\/$/;"	e	enum:__anonb080c5d40103
VUPVAL	lparser.h	/^  VUPVAL,  \/* upvalue variable; info = index of upvalue in 'upvalues' *\/$/;"	e	enum:__anonb080c5d40103
VVARARG	lparser.h	/^  VVARARG  \/* vararg expression; info = instruction pc *\/$/;"	e	enum:__anonb080c5d40103
VVOID	lparser.h	/^  VVOID,  \/* when 'expdesc' describes the last expression a list,$/;"	e	enum:__anonb080c5d40103
Value	lobject.h	/^typedef union Value {$/;"	u
Value	lobject.h	/^} Value;$/;"	t	typeref:union:Value
Vardesc	lparser.h	/^typedef struct Vardesc {$/;"	s
Vardesc	lparser.h	/^} Vardesc;$/;"	t	typeref:struct:Vardesc
WHITE0BIT	lgc.h	/^#define WHITE0BIT	/;"	d
WHITE1BIT	lgc.h	/^#define WHITE1BIT	/;"	d
WHITEBITS	lgc.h	/^#define WHITEBITS	/;"	d
XDIGITBIT	lctype.h	/^#define XDIGITBIT	/;"	d
Z	lundump.c	/^  ZIO *Z;$/;"	m	struct:__anon15ff56bb0108	typeref:typename:ZIO *	file:
ZIO	lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
Zio	lzio.h	/^struct Zio {$/;"	s
_CRT_SECURE_NO_WARNINGS	lprefix.h	/^#define _CRT_SECURE_NO_WARNINGS /;"	d
_FILE_OFFSET_BITS	lprefix.h	/^#define _FILE_OFFSET_BITS /;"	d
_LARGEFILE_SOURCE	lprefix.h	/^#define _LARGEFILE_SOURCE /;"	d
_XOPEN_SOURCE	lprefix.h	/^#define _XOPEN_SOURCE /;"	d
__anon0ba7e630010a	llex.h	/^typedef union {$/;"	u
__anon0fe2c8880103	ltm.h	/^typedef enum {$/;"	g
__anon15ff56bb0108	lundump.c	/^typedef struct {$/;"	s	file:
__anon2b5c08b20108	lstrlib.c	/^  struct {$/;"	s	struct:MatchState	file:
__anon2b5c08b2020a	lstrlib.c	/^static const union {$/;"	u	file:
__anon2b5c08b2030a	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	u	struct:cD	file:
__anon5af4d619010a	llimits.h	/^typedef union {$/;"	u
__anon6f17f8b80108	ldump.c	/^typedef struct {$/;"	s	file:
__anon73c29f13010a	lfunc.h	/^  union {$/;"	u	struct:UpVal
__anon73c29f130208	lfunc.h	/^    struct {  \/* (when open) *\/$/;"	s	union:UpVal::__anon73c29f13010a
__anon97e23bb40103	lopcodes.h	/^typedef enum {$/;"	g
__anonb080c5cf0108	lparser.c	/^static const struct {$/;"	s	file:
__anonb080c5d40103	lparser.h	/^typedef enum {$/;"	g
__anonb080c5d4020a	lparser.h	/^  union {$/;"	u	struct:expdesc
__anonb080c5d40308	lparser.h	/^    struct {  \/* for indexed variables (VINDEXED) *\/$/;"	s	union:expdesc::__anonb080c5d4020a
__anonb080c5d40408	lparser.h	/^  struct {  \/* list of active local variables *\/$/;"	s	struct:Dyndata
__anonc4e633510108	liolib.c	/^typedef struct {$/;"	s	file:
__anond1956568010a	lstate.h	/^  union {$/;"	u	struct:CallInfo
__anond19565680208	lstate.h	/^    struct {  \/* only for Lua functions *\/$/;"	s	union:CallInfo::__anond1956568010a
__anond19565680308	lstate.h	/^    struct {  \/* only for C functions *\/$/;"	s	union:CallInfo::__anond1956568010a
__anonf24b53aa0108	ltable.c	/^typedef struct {$/;"	s	file:
__anonfd91815e010a	lobject.h	/^  union {$/;"	u	struct:TString
__anonfd91815e0208	lobject.h	/^  struct {$/;"	s	union:TKey
a	Makefile	/^a:	$(ALL_A)$/;"	t
actvar	lparser.h	/^  } actvar;$/;"	m	struct:Dyndata	typeref:struct:Dyndata::__anonb080c5d40408
add_s	lstrlib.c	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	typeref:typename:void	file:
add_value	lstrlib.c	/^static void add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	typeref:typename:void	file:
addbuff	lstate.c	/^#define addbuff(/;"	d	file:
adddigit	lstrlib.c	/^static lua_Number adddigit (char *buff, int n, lua_Number x) {$/;"	f	typeref:typename:lua_Number	file:
addfield	ltablib.c	/^static void addfield (lua_State *L, luaL_Buffer *b, lua_Integer i) {$/;"	f	typeref:typename:void	file:
addk	lcode.c	/^static int addk (FuncState *fs, TValue *key, TValue *v) {$/;"	f	typeref:typename:int	file:
addlenmod	lstrlib.c	/^static void addlenmod (char *form, const char *lenmod) {$/;"	f	typeref:typename:void	file:
addliteral	lstrlib.c	/^static void addliteral (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f	typeref:typename:void	file:
addprototype	lparser.c	/^static Proto *addprototype (LexState *ls) {$/;"	f	typeref:typename:Proto *	file:
addquoted	lstrlib.c	/^static void addquoted (luaL_Buffer *b, const char *s, size_t len) {$/;"	f	typeref:typename:void	file:
addreturn	lua.c	/^static int addreturn (lua_State *L) {$/;"	f	typeref:typename:int	file:
addstr	lobject.c	/^#define addstr(/;"	d	file:
addtoclib	loadlib.c	/^static void addtoclib (lua_State *L, const char *path, void *plib) {$/;"	f	typeref:typename:void	file:
adjust_assign	lparser.c	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f	typeref:typename:void	file:
adjust_varargs	ldo.c	/^static StkId adjust_varargs (lua_State *L, Proto *p, int actual) {$/;"	f	typeref:typename:StkId	file:
adjustlocalvars	lparser.c	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f	typeref:typename:void	file:
adjustresults	lapi.h	/^#define adjustresults(/;"	d
aix	Makefile	/^aix:$/;"	t
all	Makefile	/^all:	$(ALL_T)$/;"	t
allgc	lstate.h	/^  GCObject *allgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
allocsizenode	ltable.h	/^#define allocsizenode(/;"	d
allowhook	lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State	typeref:typename:lu_byte
allweak	lstate.h	/^  GCObject *allweak;  \/* list of all-weak tables *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
andaux	lbitlib.c	/^static lua_Unsigned andaux (lua_State *L) {$/;"	f	typeref:typename:lua_Unsigned	file:
api_check	llimits.h	/^#define api_check(/;"	d
api_checknelems	lapi.h	/^#define api_checknelems(/;"	d
api_checkstackindex	lapi.c	/^#define api_checkstackindex(/;"	d	file:
api_checkvalidindex	lapi.c	/^#define api_checkvalidindex(/;"	d	file:
api_incr_top	lapi.h	/^#define api_incr_top(/;"	d
arr	lparser.h	/^    Vardesc *arr;$/;"	m	struct:Dyndata::__anonb080c5d40408	typeref:typename:Vardesc *
arr	lparser.h	/^  Labeldesc *arr;  \/* array *\/$/;"	m	struct:Labellist	typeref:typename:Labeldesc *
array	lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table	typeref:typename:TValue *
arrayindex	ltable.c	/^static unsigned int arrayindex (const TValue *key) {$/;"	f	typeref:typename:unsigned int	file:
assignment	lparser.c	/^static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f	typeref:typename:void	file:
atomic	lgc.c	/^static l_mem atomic (lua_State *L) {$/;"	f	typeref:typename:l_mem	file:
aux_close	liolib.c	/^static int aux_close (lua_State *L) {$/;"	f	typeref:typename:int	file:
aux_getn	ltablib.c	/^#define aux_getn(/;"	d	file:
aux_lines	liolib.c	/^static void aux_lines (lua_State *L, int toclose) {$/;"	f	typeref:typename:void	file:
aux_upvalue	lapi.c	/^static const char *aux_upvalue (StkId fi, int n, TValue **val,$/;"	f	typeref:typename:const char *	file:
auxgetinfo	ldebug.c	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f	typeref:typename:int	file:
auxgetstr	lapi.c	/^static int auxgetstr (lua_State *L, const TValue *t, const char *k) {$/;"	f	typeref:typename:int	file:
auxresume	lcorolib.c	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f	typeref:typename:int	file:
auxsetnode	ltable.c	/^static void auxsetnode (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
auxsetstr	lapi.c	/^static void auxsetstr (lua_State *L, const TValue *t, const char *k) {$/;"	f	typeref:typename:void	file:
auxsort	ltablib.c	/^static void auxsort (lua_State *L, IdxT lo, IdxT up,$/;"	f	typeref:typename:void	file:
auxupvalue	ldblib.c	/^static int auxupvalue (lua_State *L, int get) {$/;"	f	typeref:typename:int	file:
b	lauxlib.h	/^  char *b;  \/* buffer address *\/$/;"	m	struct:luaL_Buffer	typeref:typename:char *
b	ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	typeref:typename:luai_jmpbuf	file:
b	lobject.h	/^  int b;           \/* booleans *\/$/;"	m	union:Value	typeref:typename:int
b_and	lbitlib.c	/^static int b_and (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_arshift	lbitlib.c	/^static int b_arshift (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_extract	lbitlib.c	/^static int b_extract (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_lrot	lbitlib.c	/^static int b_lrot (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_lshift	lbitlib.c	/^static int b_lshift (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_not	lbitlib.c	/^static int b_not (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_or	lbitlib.c	/^static int b_or (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_replace	lbitlib.c	/^static int b_replace (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_rot	lbitlib.c	/^static int b_rot (lua_State *L, lua_Integer d) {$/;"	f	typeref:typename:int	file:
b_rrot	lbitlib.c	/^static int b_rrot (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_rshift	lbitlib.c	/^static int b_rshift (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_shift	lbitlib.c	/^static int b_shift (lua_State *L, lua_Unsigned r, lua_Integer i) {$/;"	f	typeref:typename:int	file:
b_str2int	lbaselib.c	/^static const char *b_str2int (const char *s, int base, lua_Integer *pn) {$/;"	f	typeref:typename:const char *	file:
b_test	lbitlib.c	/^static int b_test (lua_State *L) {$/;"	f	typeref:typename:int	file:
b_xor	lbitlib.c	/^static int b_xor (lua_State *L) {$/;"	f	typeref:typename:int	file:
base	lstate.h	/^      StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo::__anond1956568010a::__anond19565680208	typeref:typename:StkId
base_ci	lstate.h	/^  CallInfo base_ci;  \/* CallInfo for first level (C calling Lua) *\/$/;"	m	struct:lua_State	typeref:typename:CallInfo
base_funcs	lbaselib.c	/^static const luaL_Reg base_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
basehookcount	lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State	typeref:typename:int
bit2mask	lgc.h	/^#define bit2mask(/;"	d
bitlib	lbitlib.c	/^static const luaL_Reg bitlib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
bitmask	lgc.h	/^#define bitmask(/;"	d
bl	lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:BlockCnt *
black2gray	lgc.c	/^#define black2gray(/;"	d	file:
block	lparser.c	/^static void block (LexState *ls) {$/;"	f	typeref:typename:void	file:
block_follow	lparser.c	/^static int block_follow (LexState *ls, int withuntil) {$/;"	f	typeref:typename:int	file:
body	lparser.c	/^static void body (LexState *ls, expdesc *e, int ismethod, int line) {$/;"	f	typeref:typename:void	file:
boolK	lcode.c	/^static int boolK (FuncState *fs, int b) {$/;"	f	typeref:typename:int	file:
bootstrap_lua	lua.c	/^bootstrap_lua()$/;"	f	typeref:typename:void
box	lauxlib.c	/^  void *box;$/;"	m	struct:UBox	typeref:typename:void *	file:
boxgc	lauxlib.c	/^static int boxgc (lua_State *L) {$/;"	f	typeref:typename:int	file:
breaklabel	lparser.c	/^static void breaklabel (LexState *ls) {$/;"	f	typeref:typename:void	file:
bsd	Makefile	/^bsd:$/;"	t
bsize	lauxlib.c	/^  size_t bsize;$/;"	m	struct:UBox	typeref:typename:size_t	file:
buff	lauxlib.c	/^  char buff[BUFSIZ];  \/* area for reading file *\/$/;"	m	struct:LoadF	typeref:typename:char[]	file:
buff	ldo.c	/^  Mbuffer buff;  \/* dynamic structure used by the scanner *\/$/;"	m	struct:SParser	typeref:typename:Mbuffer	file:
buff	liolib.c	/^  char buff[L_MAXLENNUM + 1];  \/* +1 for ending '\\0' *\/$/;"	m	struct:__anonc4e633510108	typeref:typename:char[]	file:
buff	llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState	typeref:typename:Mbuffer *
buff	lstrlib.c	/^  char buff[5 * sizeof(lua_Number)];  \/* enough for any float type *\/$/;"	m	union:Ftypes	typeref:typename:char[]	file:
buffer	lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer	typeref:typename:char *
buffonstack	lauxlib.c	/^#define buffonstack(/;"	d	file:
buffsize	lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer	typeref:typename:size_t
bvalue	lobject.h	/^#define bvalue(/;"	d
byteoffset	lutf8lib.c	/^static int byteoffset (lua_State *L) {$/;"	f	typeref:typename:int	file:
c	liolib.c	/^  int c;  \/* current character (look ahead) *\/$/;"	m	struct:__anonc4e633510108	typeref:typename:int	file:
c	lobject.h	/^  CClosure c;$/;"	m	union:Closure	typeref:typename:CClosure
c	lstate.h	/^    } c;$/;"	m	union:CallInfo::__anond1956568010a	typeref:struct:CallInfo::__anond1956568010a::__anond19565680308
c	lstrlib.c	/^  char c;$/;"	m	struct:cD	typeref:typename:char	file:
c89	Makefile	/^c89:$/;"	t
cD	lstrlib.c	/^struct cD {$/;"	s	file:
cache	lobject.h	/^  struct LClosure *cache;  \/* last-created closure with this prototype *\/$/;"	m	struct:Proto	typeref:struct:LClosure *
callallpendingfinalizers	lgc.c	/^static void callallpendingfinalizers (lua_State *L) {$/;"	f	typeref:typename:void	file:
callhook	ldo.c	/^static void callhook (lua_State *L, CallInfo *ci) {$/;"	f	typeref:typename:void	file:
callstatus	lstate.h	/^  unsigned short callstatus;$/;"	m	struct:CallInfo	typeref:typename:unsigned short
cannot	luac.c	/^static void cannot(const char* what)$/;"	f	typeref:typename:void	file:
capture	lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon2b5c08b20108[]	file:
capture_to_close	lstrlib.c	/^static int capture_to_close (MatchState *ms) {$/;"	f	typeref:typename:int	file:
cast	llimits.h	/^#define cast(/;"	d
cast_byte	llimits.h	/^#define cast_byte(/;"	d
cast_func	loadlib.c	/^#define cast_func(/;"	d	file:
cast_int	llimits.h	/^#define cast_int(/;"	d
cast_num	llimits.h	/^#define cast_num(/;"	d
cast_u	lstate.h	/^#define cast_u(/;"	d
cast_uchar	llimits.h	/^#define cast_uchar(/;"	d
cast_void	llimits.h	/^#define cast_void(/;"	d
changewhite	lgc.h	/^#define changewhite(/;"	d
check	lparser.c	/^static void check (LexState *ls, int c) {$/;"	f	typeref:typename:void	file:
checkGC	lvm.c	/^#define checkGC(/;"	d	file:
checkHeader	lundump.c	/^static void checkHeader (LoadState *S) {$/;"	f	typeref:typename:void	file:
checkSizes	lgc.c	/^static void checkSizes (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
check_capture	lstrlib.c	/^static int check_capture (MatchState *ms, int l) {$/;"	f	typeref:typename:int	file:
check_condition	lparser.c	/^#define check_condition(/;"	d	file:
check_conflict	lparser.c	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f	typeref:typename:void	file:
check_exp	llimits.h	/^#define check_exp(/;"	d
check_match	lparser.c	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f	typeref:typename:void	file:
check_next1	llex.c	/^static int check_next1 (LexState *ls, int c) {$/;"	f	typeref:typename:int	file:
check_next2	llex.c	/^static int check_next2 (LexState *ls, const char *set) {$/;"	f	typeref:typename:int	file:
checkclib	loadlib.c	/^static void *checkclib (lua_State *L, const char *path) {$/;"	f	typeref:typename:void *	file:
checkconsistency	lgc.c	/^#define checkconsistency(/;"	d	file:
checkdeadkey	lgc.c	/^#define checkdeadkey(/;"	d	file:
checkdp	lstrlib.c	/^static void checkdp (char *buff, int nb) {$/;"	f	typeref:typename:void	file:
checkfield	ltablib.c	/^static int checkfield (lua_State *L, const char *key, int n) {$/;"	f	typeref:typename:int	file:
checklimit	lparser.c	/^static void checklimit (FuncState *fs, int v, int l, const char *what) {$/;"	f	typeref:typename:void	file:
checkliteral	lundump.c	/^static void checkliteral (LoadState *S, const char *s, const char *msg) {$/;"	f	typeref:typename:void	file:
checkliveness	lobject.h	/^#define checkliveness(/;"	d
checkload	loadlib.c	/^static int checkload (lua_State *L, int stat, const char *filename) {$/;"	f	typeref:typename:int	file:
checkmode	ldo.c	/^static void checkmode (lua_State *L, const char *mode, const char *x) {$/;"	f	typeref:typename:void	file:
checkname	lparser.c	/^static void checkname (LexState *ls, expdesc *e) {$/;"	f	typeref:typename:void	file:
checknext	lparser.c	/^static void checknext (LexState *ls, int c) {$/;"	f	typeref:typename:void	file:
checkoption	loslib.c	/^static const char *checkoption (lua_State *L, const char *conv,$/;"	f	typeref:typename:const char *	file:
checkrepeated	lparser.c	/^static void checkrepeated (FuncState *fs, Labellist *ll, TString *label) {$/;"	f	typeref:typename:void	file:
checkresults	lapi.c	/^#define checkresults(/;"	d	file:
checksize	lundump.c	/^#define checksize(/;"	d	file:
checkstack	ldblib.c	/^static void checkstack (lua_State *L, lua_State *L1, int n) {$/;"	f	typeref:typename:void	file:
checkstackp	ldo.c	/^#define checkstackp(/;"	d	file:
checktab	ltablib.c	/^static void checktab (lua_State *L, int arg, int what) {$/;"	f	typeref:typename:void	file:
checktag	lobject.h	/^#define checktag(/;"	d
checktype	lobject.h	/^#define checktype(/;"	d
checkunsigned	lbitlib.c	/^#define checkunsigned(/;"	d	file:
checkupval	ldblib.c	/^static int checkupval (lua_State *L, int argf, int argnup) {$/;"	f	typeref:typename:int	file:
chgfltvalue	lobject.h	/^#define chgfltvalue(/;"	d
chgivalue	lobject.h	/^#define chgivalue(/;"	d
choosePivot	ltablib.c	/^static IdxT choosePivot (IdxT lo, IdxT up, unsigned int rnd) {$/;"	f	typeref:typename:IdxT	file:
ci	lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State	typeref:typename:CallInfo *
ci_func	ldebug.c	/^#define ci_func(/;"	d	file:
cl	lstate.h	/^  union Closure cl;$/;"	m	union:GCUnion	typeref:union:Closure
clCvalue	lobject.h	/^#define clCvalue(/;"	d
clLvalue	lobject.h	/^#define clLvalue(/;"	d
classend	lstrlib.c	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f	typeref:typename:const char *	file:
clean	Makefile	/^clean:$/;"	t
clearkeys	lgc.c	/^static void clearkeys (global_State *g, GCObject *l, GCObject *f) {$/;"	f	typeref:typename:void	file:
clearvalues	lgc.c	/^static void clearvalues (global_State *g, GCObject *l, GCObject *f) {$/;"	f	typeref:typename:void	file:
close_func	lparser.c	/^static void close_func (LexState *ls) {$/;"	f	typeref:typename:void	file:
close_state	lstate.c	/^static void close_state (lua_State *L) {$/;"	f	typeref:typename:void	file:
closef	lauxlib.h	/^  lua_CFunction closef;  \/* to close stream (NULL for closed streams) *\/$/;"	m	struct:luaL_Stream	typeref:typename:lua_CFunction
closegoto	lparser.c	/^static void closegoto (LexState *ls, int g, Labeldesc *label) {$/;"	f	typeref:typename:void	file:
closelistfield	lparser.c	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
clvalue	lobject.h	/^#define clvalue(/;"	d
co_funcs	lcorolib.c	/^static const luaL_Reg co_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
code	lobject.h	/^  Instruction *code;  \/* opcodes *\/$/;"	m	struct:Proto	typeref:typename:Instruction *
code_loadbool	lcode.c	/^static int code_loadbool (FuncState *fs, int A, int b, int jump) {$/;"	f	typeref:typename:int	file:
codebinexpval	lcode.c	/^static void codebinexpval (FuncState *fs, OpCode op,$/;"	f	typeref:typename:void	file:
codeclosure	lparser.c	/^static void codeclosure (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
codecomp	lcode.c	/^static void codecomp (FuncState *fs, BinOpr opr, expdesc *e1, expdesc *e2) {$/;"	f	typeref:typename:void	file:
codeextraarg	lcode.c	/^static int codeextraarg (FuncState *fs, int a) {$/;"	f	typeref:typename:int	file:
codenot	lcode.c	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
codepoint	lutf8lib.c	/^static int codepoint (lua_State *L) {$/;"	f	typeref:typename:int	file:
codestring	lparser.c	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f	typeref:typename:void	file:
codeunexpval	lcode.c	/^static void codeunexpval (FuncState *fs, OpCode op, expdesc *e, int line) {$/;"	f	typeref:typename:void	file:
collectargs	lua.c	/^static int collectargs (char **argv, int *first) {$/;"	f	typeref:typename:int	file:
collectvalidlines	ldebug.c	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f	typeref:typename:void	file:
combine	luac.c	/^static const Proto* combine(lua_State* L, int n)$/;"	f	typeref:typename:const Proto *	file:
computesizes	ltable.c	/^static unsigned int computesizes (unsigned int nums[], unsigned int *pna) {$/;"	f	typeref:typename:unsigned int	file:
cond	lparser.c	/^static int cond (LexState *ls) {$/;"	f	typeref:typename:int	file:
condchangemem	llimits.h	/^#define condchangemem(/;"	d
condjump	lcode.c	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C) {$/;"	f	typeref:typename:int	file:
condmovestack	llimits.h	/^#define condmovestack(/;"	d
constfolding	lcode.c	/^static int constfolding (FuncState *fs, int op, expdesc *e1,$/;"	f	typeref:typename:int	file:
constructor	lparser.c	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f	typeref:typename:void	file:
convergeephemerons	lgc.c	/^static void convergeephemerons (global_State *g) {$/;"	f	typeref:typename:void	file:
copy2buff	lvm.c	/^static void copy2buff (StkId top, int n, char *buff) {$/;"	f	typeref:typename:void	file:
copywithendian	lstrlib.c	/^static void copywithendian (volatile char *dest, volatile const char *src,$/;"	f	typeref:typename:void	file:
correctstack	ldo.c	/^static void correctstack (lua_State *L, TValue *oldstack) {$/;"	f	typeref:typename:void	file:
countint	ltable.c	/^static int countint (const TValue *key, unsigned int *nums) {$/;"	f	typeref:typename:int	file:
createargtable	lua.c	/^static void createargtable (lua_State *L, char **argv, int argc, int script) {$/;"	f	typeref:typename:void	file:
createclibstable	loadlib.c	/^static void createclibstable (lua_State *L) {$/;"	f	typeref:typename:void	file:
createmeta	liolib.c	/^static void createmeta (lua_State *L) {$/;"	f	typeref:typename:void	file:
createmetatable	lstrlib.c	/^static void createmetatable (lua_State *L) {$/;"	f	typeref:typename:void	file:
createsearcherstable	loadlib.c	/^static void createsearcherstable (lua_State *L) {$/;"	f	typeref:typename:void	file:
createstdfile	liolib.c	/^static void createstdfile (lua_State *L, FILE *f, const char *k,$/;"	f	typeref:typename:void	file:
createstrobj	lstring.c	/^static TString *createstrobj (lua_State *L, size_t l, int tag, unsigned int h) {$/;"	f	typeref:typename:TString *	file:
ctb	lobject.h	/^#define ctb(/;"	d
ctx	lstate.h	/^      lua_KContext ctx;  \/* context info. in case of yields *\/$/;"	m	struct:CallInfo::__anond1956568010a::__anond19565680308	typeref:typename:lua_KContext
currIsNewline	llex.c	/^#define currIsNewline(/;"	d	file:
current	llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState	typeref:typename:int
currentline	ldebug.c	/^static int currentline (CallInfo *ci) {$/;"	f	typeref:typename:int	file:
currentline	lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug	typeref:typename:int
currentpc	ldebug.c	/^static int currentpc (CallInfo *ci) {$/;"	f	typeref:typename:int	file:
currentwhite	lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State	typeref:typename:lu_byte
cvt2num	lvm.h	/^#define cvt2num(/;"	d
cvt2str	lvm.h	/^#define cvt2str(/;"	d
d	lstrlib.c	/^  double d;$/;"	m	union:Ftypes	typeref:typename:double	file:
d	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon2b5c08b2030a	typeref:typename:double	file:
data	ldump.c	/^  void *data;$/;"	m	struct:__anon6f17f8b80108	typeref:typename:void *	file:
data	lzio.h	/^  void *data;			\/* additional data *\/$/;"	m	struct:Zio	typeref:typename:void *
db_debug	ldblib.c	/^static int db_debug (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_gethook	ldblib.c	/^static int db_gethook (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getinfo	ldblib.c	/^static int db_getinfo (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getlocal	ldblib.c	/^static int db_getlocal (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getmetatable	ldblib.c	/^static int db_getmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getregistry	ldblib.c	/^static int db_getregistry (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getupvalue	ldblib.c	/^static int db_getupvalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_getuservalue	ldblib.c	/^static int db_getuservalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_sethook	ldblib.c	/^static int db_sethook (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setlocal	ldblib.c	/^static int db_setlocal (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setmetatable	ldblib.c	/^static int db_setmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setupvalue	ldblib.c	/^static int db_setupvalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_setuservalue	ldblib.c	/^static int db_setuservalue (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_traceback	ldblib.c	/^static int db_traceback (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_upvalueid	ldblib.c	/^static int db_upvalueid (lua_State *L) {$/;"	f	typeref:typename:int	file:
db_upvaluejoin	ldblib.c	/^static int db_upvaluejoin (lua_State *L) {$/;"	f	typeref:typename:int	file:
dblib	ldblib.c	/^static const luaL_Reg dblib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
deadvalue	lobject.h	/^#define deadvalue(/;"	d
default	Makefile	/^default: $(PLAT)$/;"	t
depend	Makefile	/^depend:$/;"	t
digit	lstrlib.c	/^static int digit (int c) { return '0' <= c && c <= '9'; }$/;"	f	typeref:typename:int	file:
disable_execution_output	lua.c	/^int disable_execution_output = 0;$/;"	v	typeref:typename:int
discharge2anyreg	lcode.c	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
discharge2reg	lcode.c	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	typeref:typename:void	file:
dischargejpc	lcode.c	/^static void dischargejpc (FuncState *fs) {$/;"	f	typeref:typename:void	file:
doREPL	lua.c	/^static void doREPL (lua_State *L) {$/;"	f	typeref:typename:void	file:
doargs	luac.c	/^static int doargs(int argc, char* argv[])$/;"	f	typeref:typename:int	file:
docall	lua.c	/^static int docall (lua_State *L, int narg, int nres) {$/;"	f	typeref:typename:int	file:
dochunk	lua.c	/^static int dochunk (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
dofile	lua.c	/^static int dofile (lua_State *L, const char *name) {$/;"	f	typeref:typename:int	file:
dofilecont	lbaselib.c	/^static int dofilecont (lua_State *L, int d1, lua_KContext d2) {$/;"	f	typeref:typename:int	file:
dojump	lvm.c	/^#define dojump(/;"	d	file:
dolibrary	lua.c	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f	typeref:typename:int	file:
donextjump	lvm.c	/^#define donextjump(/;"	d	file:
dooptions	loadlib.c	/^static void dooptions (lua_State *L, int n) {$/;"	f	typeref:typename:void	file:
dostring	lua.c	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f	typeref:typename:int	file:
dothecall	lgc.c	/^static void dothecall (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
dummy	lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for 'local' udata *\/$/;"	m	union:UUdata	typeref:typename:L_Umaxalign
dummy	lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:UTString	typeref:typename:L_Umaxalign
dummy	lstrlib.c	/^  int dummy;$/;"	m	union:__anon2b5c08b2020a	typeref:typename:int	file:
dummynode	ltable.c	/^#define dummynode	/;"	d	file:
dummynode_	ltable.c	/^static const Node dummynode_ = {$/;"	v	typeref:typename:const Node	file:
dumping	luac.c	/^static int dumping=1;			\/* dump bytecodes? *\/$/;"	v	typeref:typename:int	file:
dyd	ldo.c	/^  Dyndata dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:SParser	typeref:typename:Dyndata	file:
dyd	llex.h	/^  struct Dyndata *dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:LexState	typeref:struct:Dyndata *
echo	Makefile	/^echo:$/;"	t
end_capture	lstrlib.c	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
endpc	lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar	typeref:typename:int
enterblock	lparser.c	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isloop) {$/;"	f	typeref:typename:void	file:
enterlevel	lparser.c	/^static void enterlevel (LexState *ls) {$/;"	f	typeref:typename:void	file:
entersweep	lgc.c	/^static void entersweep (lua_State *L) {$/;"	f	typeref:typename:void	file:
envn	llex.h	/^  TString *envn;  \/* environment variable name *\/$/;"	m	struct:LexState	typeref:typename:TString *
ephemeron	lstate.h	/^  GCObject *ephemeron;  \/* list of ephemeron tables (weak keys) *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
eqshrstr	lstring.h	/^#define eqshrstr(/;"	d
eqstr	lparser.c	/^#define eqstr(/;"	d	file:
errfile	lauxlib.c	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f	typeref:typename:int	file:
errfunc	lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State	typeref:typename:ptrdiff_t
error	lundump.c	/^static l_noret error(LoadState *S, const char *why) {$/;"	f	typeref:typename:l_noret	file:
errorJmp	lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_longjmp *
error_expected	lparser.c	/^static l_noret error_expected (LexState *ls, int token) {$/;"	f	typeref:typename:l_noret	file:
errorlimit	lparser.c	/^static l_noret errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f	typeref:typename:l_noret	file:
errorstatus	ldo.c	/^#define errorstatus(/;"	d	file:
esccheck	llex.c	/^static void esccheck (LexState *ls, int c, const char *msg) {$/;"	f	typeref:typename:void	file:
event	lua.h	/^  int event;$/;"	m	struct:lua_Debug	typeref:typename:int
exp1	lparser.c	/^static int exp1 (LexState *ls) {$/;"	f	typeref:typename:int	file:
exp2reg	lcode.c	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	typeref:typename:void	file:
expdesc	lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expkind	lparser.h	/^} expkind;$/;"	t	typeref:enum:__anonb080c5d40103
explist	lparser.c	/^static int explist (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:int	file:
expr	lparser.c	/^static void expr (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
exprstat	lparser.c	/^static void exprstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
extra	lobject.h	/^  lu_byte extra;  \/* reserved words for short strings; "has hash" for longs *\/$/;"	m	struct:TString	typeref:typename:lu_byte
extra	lstate.h	/^  ptrdiff_t extra;$/;"	m	struct:CallInfo	typeref:typename:ptrdiff_t
extra_	lstate.c	/^  lu_byte extra_[LUA_EXTRASPACE];$/;"	m	struct:LX	typeref:typename:lu_byte[]	file:
f	lauxlib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:LoadF	typeref:typename:FILE *	file:
f	lauxlib.h	/^  FILE *f;  \/* stream (NULL for incompletely created streams) *\/$/;"	m	struct:luaL_Stream	typeref:typename:FILE *
f	liolib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:__anonc4e633510108	typeref:typename:FILE *	file:
f	lobject.h	/^  lua_CFunction f; \/* light C functions *\/$/;"	m	union:Value	typeref:typename:lua_CFunction
f	lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure	typeref:typename:lua_CFunction
f	lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState	typeref:typename:Proto *
f	lparser.h	/^  int f;  \/* patch list of 'exit when false' *\/$/;"	m	struct:expdesc	typeref:typename:int
f	lstrlib.c	/^  float f;$/;"	m	union:Ftypes	typeref:typename:float	file:
f_call	lapi.c	/^static void f_call (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
f_close	liolib.c	/^static int f_close (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_flush	liolib.c	/^static int f_flush (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_gc	liolib.c	/^static int f_gc (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_lines	liolib.c	/^static int f_lines (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_luaopen	lstate.c	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
f_parser	ldo.c	/^static void f_parser (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
f_read	liolib.c	/^static int f_read (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_seek	liolib.c	/^static int f_seek (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_setvbuf	liolib.c	/^static int f_setvbuf (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_tostring	liolib.c	/^static int f_tostring (lua_State *L) {$/;"	f	typeref:typename:int	file:
f_write	liolib.c	/^static int f_write (lua_State *L) {$/;"	f	typeref:typename:int	file:
fasttm	ltm.h	/^#define fasttm(/;"	d
fatal	luac.c	/^static void fatal(const char* message)$/;"	f	typeref:typename:void	file:
fchecksize	lundump.c	/^static void fchecksize (LoadState *S, size_t size, const char *tname) {$/;"	f	typeref:typename:void	file:
field	lparser.c	/^static void field (LexState *ls, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
fieldargs	lbitlib.c	/^static int fieldargs (lua_State *L, int farg, int *width) {$/;"	f	typeref:typename:int	file:
fieldsel	lparser.c	/^static void fieldsel (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
filterpc	ldebug.c	/^static int filterpc (int pc, int jmptarget) {$/;"	f	typeref:typename:int	file:
findfield	lauxlib.c	/^static int findfield (lua_State *L, int objidx, int level) {$/;"	f	typeref:typename:int	file:
findfile	loadlib.c	/^static const char *findfile (lua_State *L, const char *name,$/;"	f	typeref:typename:const char *	file:
findgotos	lparser.c	/^static void findgotos (LexState *ls, Labeldesc *lb) {$/;"	f	typeref:typename:void	file:
findindex	ltable.c	/^static unsigned int findindex (lua_State *L, Table *t, StkId key) {$/;"	f	typeref:typename:unsigned int	file:
findlabel	lparser.c	/^static int findlabel (LexState *ls, int g) {$/;"	f	typeref:typename:int	file:
findlast	lgc.c	/^static GCObject **findlast (GCObject **p) {$/;"	f	typeref:typename:GCObject **	file:
findloader	loadlib.c	/^static void findloader (lua_State *L, const char *name) {$/;"	f	typeref:typename:void	file:
findlocal	ldebug.c	/^static const char *findlocal (lua_State *L, CallInfo *ci, int n,$/;"	f	typeref:typename:const char *	file:
findpcall	ldo.c	/^static CallInfo *findpcall (lua_State *L) {$/;"	f	typeref:typename:CallInfo *	file:
findsetreg	ldebug.c	/^static int findsetreg (Proto *p, int lastpc, int reg) {$/;"	f	typeref:typename:int	file:
findvararg	ldebug.c	/^static const char *findvararg (CallInfo *ci, int n, StkId *pos) {$/;"	f	typeref:typename:const char *	file:
finishCcall	ldo.c	/^static void finishCcall (lua_State *L, int status) {$/;"	f	typeref:typename:void	file:
finishpcall	lbaselib.c	/^static int finishpcall (lua_State *L, int status, lua_KContext extra) {$/;"	f	typeref:typename:int	file:
finobj	lstate.h	/^  GCObject *finobj;  \/* list of collectable objects with finalizers *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
firstgoto	lparser.c	/^  int firstgoto;  \/* index of first pending goto in this block *\/$/;"	m	struct:BlockCnt	typeref:typename:int	file:
firstlabel	lparser.c	/^  int firstlabel;  \/* index of first label in this block *\/$/;"	m	struct:BlockCnt	typeref:typename:int	file:
firstlocal	lparser.h	/^  int firstlocal;  \/* index of first local var (in Dyndata array) *\/$/;"	m	struct:FuncState	typeref:typename:int
fixedgc	lstate.h	/^  GCObject *fixedgc;  \/* list of objects not to be collected *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
fixjump	lcode.c	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f	typeref:typename:void	file:
flags	lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/$/;"	m	struct:Table	typeref:typename:lu_byte
flib	liolib.c	/^static const luaL_Reg flib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
fltvalue	lobject.h	/^#define fltvalue(/;"	d
forbody	lparser.c	/^static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {$/;"	f	typeref:typename:void	file:
forlimit	lvm.c	/^static int forlimit (const TValue *obj, lua_Integer *p, lua_Integer step,$/;"	f	typeref:typename:int	file:
forlist	lparser.c	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f	typeref:typename:void	file:
fornum	lparser.c	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f	typeref:typename:void	file:
forstat	lparser.c	/^static void forstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
frealloc	lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State	typeref:typename:lua_Alloc
freeLclosure	lgc.c	/^static void freeLclosure (lua_State *L, LClosure *cl) {$/;"	f	typeref:typename:void	file:
freebsd	Makefile	/^freebsd:$/;"	t
freeexp	lcode.c	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
freeexps	lcode.c	/^static void freeexps (FuncState *fs, expdesc *e1, expdesc *e2) {$/;"	f	typeref:typename:void	file:
freelist	lauxlib.c	/^#define freelist	/;"	d	file:
freeobj	lgc.c	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f	typeref:typename:void	file:
freereg	lcode.c	/^static void freereg (FuncState *fs, int reg) {$/;"	f	typeref:typename:void	file:
freereg	lparser.h	/^  lu_byte freereg;  \/* first free register *\/$/;"	m	struct:FuncState	typeref:typename:lu_byte
freestack	lstate.c	/^static void freestack (lua_State *L) {$/;"	f	typeref:typename:void	file:
fromstate	lstate.c	/^#define fromstate(/;"	d	file:
fs	llex.h	/^  struct FuncState *fs;  \/* current function (parser) *\/$/;"	m	struct:LexState	typeref:struct:FuncState *
func	lapi.c	/^  StkId func;$/;"	m	struct:CallS	typeref:typename:StkId	file:
func	lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg	typeref:typename:lua_CFunction
func	lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo	typeref:typename:StkId
funcargs	lparser.c	/^static void funcargs (LexState *ls, expdesc *f, int line) {$/;"	f	typeref:typename:void	file:
funcinfo	ldebug.c	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f	typeref:typename:void	file:
funcname	lparser.c	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:int	file:
funcnamefromcode	ldebug.c	/^static const char *funcnamefromcode (lua_State *L, CallInfo *ci,$/;"	f	typeref:typename:const char *	file:
funcs	lutf8lib.c	/^static const luaL_Reg funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
funcstat	lparser.c	/^static void funcstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
fvalue	lobject.h	/^#define fvalue(/;"	d
g	lstate.c	/^  global_State g;$/;"	m	struct:LG	typeref:typename:global_State	file:
g_iofile	liolib.c	/^static int g_iofile (lua_State *L, const char *f, const char *mode) {$/;"	f	typeref:typename:int	file:
g_read	liolib.c	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f	typeref:typename:int	file:
g_write	liolib.c	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f	typeref:typename:int	file:
gc	lobject.h	/^  GCObject *gc;    \/* collectable objects *\/$/;"	m	union:Value	typeref:typename:GCObject *
gc	lstate.h	/^  GCObject gc;  \/* common header *\/$/;"	m	union:GCUnion	typeref:typename:GCObject
gcfinnum	lstate.h	/^  unsigned int gcfinnum;  \/* number of finalizers to call in each GC step *\/$/;"	m	struct:global_State	typeref:typename:unsigned int
gckind	lstate.h	/^  lu_byte gckind;  \/* kind of GC running *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gclist	lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto	typeref:typename:GCObject *
gclist	lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table	typeref:typename:GCObject *
gclist	lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State	typeref:typename:GCObject *
gco2ccl	lstate.h	/^#define gco2ccl(/;"	d
gco2cl	lstate.h	/^#define gco2cl(/;"	d
gco2lcl	lstate.h	/^#define gco2lcl(/;"	d
gco2p	lstate.h	/^#define gco2p(/;"	d
gco2t	lstate.h	/^#define gco2t(/;"	d
gco2th	lstate.h	/^#define gco2th(/;"	d
gco2ts	lstate.h	/^#define gco2ts(/;"	d
gco2u	lstate.h	/^#define gco2u(/;"	d
gcpause	lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State	typeref:typename:int
gcrunning	lstate.h	/^  lu_byte gcrunning;  \/* true if GC is running *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gcstate	lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State	typeref:typename:lu_byte
gcstepmul	lstate.h	/^  int gcstepmul;  \/* GC 'granularity' *\/$/;"	m	struct:global_State	typeref:typename:int
gctm	loadlib.c	/^static int gctm (lua_State *L) {$/;"	f	typeref:typename:int	file:
gcvalue	lobject.h	/^#define gcvalue(/;"	d
generic	Makefile	/^generic: $(ALL)$/;"	t
generic_reader	lbaselib.c	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f	typeref:typename:const char *	file:
getBMode	lopcodes.h	/^#define getBMode(/;"	d
getCMode	lopcodes.h	/^#define getCMode(/;"	d
getF	lauxlib.c	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f	typeref:typename:const char *	file:
getOpMode	lopcodes.h	/^#define getOpMode(/;"	d
getS	lauxlib.c	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f	typeref:typename:const char *	file:
get_prompt	lua.c	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f	typeref:typename:const char *	file:
get_time_diff	lua.c	/^get_time_diff(struct timespec a, struct timespec b)$/;"	f	typeref:typename:double
getarg	lopcodes.h	/^#define getarg(/;"	d
getbinopr	lparser.c	/^static BinOpr getbinopr (int op) {$/;"	f	typeref:typename:BinOpr	file:
getboolfield	loslib.c	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f	typeref:typename:int	file:
getcached	lvm.c	/^static LClosure *getcached (Proto *p, UpVal **encup, StkId base) {$/;"	f	typeref:typename:LClosure *	file:
getco	lcorolib.c	/^static lua_State *getco (lua_State *L) {$/;"	f	typeref:typename:lua_State *	file:
getdebt	lgc.c	/^static l_mem getdebt (global_State *g) {$/;"	f	typeref:typename:l_mem	file:
getdetails	lstrlib.c	/^static KOption getdetails (Header *h, size_t totalsize,$/;"	f	typeref:typename:KOption	file:
getfield	loslib.c	/^static int getfield (lua_State *L, const char *key, int d, int delta) {$/;"	f	typeref:typename:int	file:
getfreepos	ltable.c	/^static Node *getfreepos (Table *t) {$/;"	f	typeref:typename:Node *	file:
getfuncline	ldebug.h	/^#define getfuncline(/;"	d
getfuncname	ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f	typeref:typename:const char *	file:
getgeneric	ltable.c	/^static const TValue *getgeneric (Table *t, const TValue *key) {$/;"	f	typeref:typename:const TValue *	file:
gethexa	llex.c	/^static int gethexa (LexState *ls) {$/;"	f	typeref:typename:int	file:
getinstruction	lcode.h	/^#define getinstruction(/;"	d
getiofile	liolib.c	/^static FILE *getiofile (lua_State *L, const char *findex) {$/;"	f	typeref:typename:FILE *	file:
getjump	lcode.c	/^static int getjump (FuncState *fs, int pc) {$/;"	f	typeref:typename:int	file:
getjumpcontrol	lcode.c	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f	typeref:typename:Instruction *	file:
getlocvar	lparser.c	/^static LocVar *getlocvar (FuncState *fs, int i) {$/;"	f	typeref:typename:LocVar *	file:
getnum	lstrlib.c	/^static int getnum (const char **fmt, int df) {$/;"	f	typeref:typename:int	file:
getnumlimit	lstrlib.c	/^static int getnumlimit (Header *h, const char **fmt, int df) {$/;"	f	typeref:typename:int	file:
getoah	lstate.h	/^#define getoah(/;"	d
getobjname	ldebug.c	/^static const char *getobjname (Proto *p, int lastpc, int reg,$/;"	f	typeref:typename:const char *	file:
getoption	lstrlib.c	/^static KOption getoption (Header *h, const char **fmt, int *size) {$/;"	f	typeref:typename:KOption	file:
getproto	lobject.h	/^#define getproto(/;"	d
getstr	lobject.h	/^#define getstr(/;"	d
gettableProtected	lvm.c	/^#define gettableProtected(/;"	d	file:
getthread	ldblib.c	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f	typeref:typename:lua_State *	file:
gettotalbytes	lstate.h	/^#define gettotalbytes(/;"	d
getudatamem	lobject.h	/^#define getudatamem(/;"	d
getunopr	lparser.c	/^static UnOpr getunopr (int op) {$/;"	f	typeref:typename:UnOpr	file:
getupvalname	ldebug.c	/^static const char *getupvalname (CallInfo *ci, const TValue *o,$/;"	f	typeref:typename:const char *	file:
getupvalref	lapi.c	/^static UpVal **getupvalref (lua_State *L, int fidx, int n, LClosure **pf) {$/;"	f	typeref:typename:UpVal **	file:
getuservalue	lobject.h	/^#define getuservalue(/;"	d
gfasttm	ltm.h	/^#define gfasttm(/;"	d
gkey	ltable.h	/^#define gkey(/;"	d
globalL	lua.c	/^static lua_State *globalL = NULL;$/;"	v	typeref:typename:lua_State *	file:
global_State	lstate.h	/^typedef struct global_State {$/;"	s
global_State	lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
gmatch	lstrlib.c	/^static int gmatch (lua_State *L) {$/;"	f	typeref:typename:int	file:
gmatch_aux	lstrlib.c	/^static int gmatch_aux (lua_State *L) {$/;"	f	typeref:typename:int	file:
gnext	ltable.h	/^#define gnext(/;"	d
gnode	ltable.h	/^#define gnode(/;"	d
gnodelast	lgc.c	/^#define gnodelast(/;"	d	file:
gotostat	lparser.c	/^static void gotostat (LexState *ls, int pc) {$/;"	f	typeref:typename:void	file:
gray	lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
gray2black	lgc.h	/^#define gray2black(/;"	d
grayagain	lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
growstack	lapi.c	/^static void growstack (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
gt	lparser.h	/^  Labellist gt;  \/* list of pending gotos *\/$/;"	m	struct:Dyndata	typeref:typename:Labellist
gval	ltable.h	/^#define gval(/;"	d
h	llex.h	/^  Table *h;  \/* to avoid collection\/reuse strings *\/$/;"	m	struct:LexState	typeref:typename:Table *
h	lstate.h	/^  struct Table h;$/;"	m	union:GCUnion	typeref:struct:Table
handle_luainit	lua.c	/^static int handle_luainit (lua_State *L) {$/;"	f	typeref:typename:int	file:
handle_script	lua.c	/^static int handle_script (lua_State *L, char **argv) {$/;"	f	typeref:typename:int	file:
has_E	lua.c	/^#define has_E	/;"	d	file:
has_e	lua.c	/^#define has_e	/;"	d	file:
has_error	lua.c	/^#define has_error	/;"	d	file:
has_i	lua.c	/^#define has_i	/;"	d	file:
has_v	lua.c	/^#define has_v	/;"	d	file:
hash	lobject.h	/^  unsigned int hash;$/;"	m	struct:TString	typeref:typename:unsigned int
hash	lstate.h	/^  TString **hash;$/;"	m	struct:stringtable	typeref:typename:TString **
hashboolean	ltable.c	/^#define hashboolean(/;"	d	file:
hashint	ltable.c	/^#define hashint(/;"	d	file:
hashmod	ltable.c	/^#define hashmod(/;"	d	file:
hashpointer	ltable.c	/^#define hashpointer(/;"	d	file:
hashpow2	ltable.c	/^#define hashpow2(/;"	d	file:
hashstr	ltable.c	/^#define hashstr(/;"	d	file:
hasjumps	lcode.c	/^#define hasjumps(/;"	d	file:
hasmultret	lparser.c	/^#define hasmultret(/;"	d	file:
hnext	lobject.h	/^    struct TString *hnext;  \/* linked list for hash table *\/$/;"	m	union:TString::__anonfd91815e010a	typeref:struct:TString *
hook	lstate.h	/^  volatile lua_Hook hook;$/;"	m	struct:lua_State	typeref:typename:volatile lua_Hook
hookcount	lstate.h	/^  int hookcount;$/;"	m	struct:lua_State	typeref:typename:int
hookf	ldblib.c	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:void	file:
hookmask	lstate.h	/^  l_signalT hookmask;$/;"	m	struct:lua_State	typeref:typename:l_signalT
hvalue	lobject.h	/^#define hvalue(/;"	d
i	llex.h	/^  lua_Integer i;$/;"	m	union:__anon0ba7e630010a	typeref:typename:lua_Integer
i	llimits.h	/^  lua_Integer i;$/;"	m	union:__anon5af4d619010a	typeref:typename:lua_Integer
i	lobject.h	/^  lua_Integer i;   \/* integer numbers *\/$/;"	m	union:Value	typeref:typename:lua_Integer
i	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon2b5c08b2030a	typeref:typename:lua_Integer	file:
iABC	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAsBx	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAx	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
i_ci	lua.h	/^  struct CallInfo *i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	typeref:struct:CallInfo *
i_key	lobject.h	/^  TKey i_key;$/;"	m	struct:Node	typeref:typename:TKey
i_val	lobject.h	/^  TValue i_val;$/;"	m	struct:Node	typeref:typename:TValue
idx	lobject.h	/^  lu_byte idx;  \/* index of upvalue (in stack or in outer function's list) *\/$/;"	m	struct:Upvaldesc	typeref:typename:lu_byte
idx	lparser.h	/^      short idx;  \/* index (R\/K) *\/$/;"	m	struct:expdesc::__anonb080c5d4020a::__anonb080c5d40308	typeref:typename:short
idx	lparser.h	/^  short idx;  \/* variable index in stack *\/$/;"	m	struct:Vardesc	typeref:typename:short
ifstat	lparser.c	/^static void ifstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
inclinenumber	llex.c	/^static void inclinenumber (LexState *ls) {$/;"	f	typeref:typename:void	file:
incomplete	lua.c	/^static int incomplete (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
ind	lparser.h	/^    } ind;$/;"	m	union:expdesc::__anonb080c5d4020a	typeref:struct:expdesc::__anonb080c5d4020a::__anonb080c5d40308
index2addr	lapi.c	/^static TValue *index2addr (lua_State *L, int idx) {$/;"	f	typeref:typename:TValue *	file:
info	lparser.h	/^    int info;  \/* for generic use *\/$/;"	m	union:expdesc::__anonb080c5d4020a	typeref:typename:int
init	lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anon2b5c08b20108	typeref:typename:const char *	file:
init	lua.c	/^int init = 0;$/;"	v	typeref:typename:int
init_exp	lparser.c	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f	typeref:typename:void	file:
init_registry	lstate.c	/^static void init_registry (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
initb	lauxlib.h	/^  char initb[LUAL_BUFFERSIZE];  \/* initial buffer *\/$/;"	m	struct:luaL_Buffer	typeref:typename:char[]
initheader	lstrlib.c	/^static void initheader (lua_State *L, Header *h) {$/;"	f	typeref:typename:void	file:
instack	lobject.h	/^  lu_byte instack;  \/* whether it is in stack (register) *\/$/;"	m	struct:Upvaldesc	typeref:typename:lu_byte
intarith	lobject.c	/^static lua_Integer intarith (lua_State *L, int op, lua_Integer v1,$/;"	f	typeref:typename:lua_Integer	file:
internshrstr	lstring.c	/^static TString *internshrstr (lua_State *L, const char *str, size_t l) {$/;"	f	typeref:typename:TString *	file:
interror	lauxlib.c	/^static void interror (lua_State *L, int arg) {$/;"	f	typeref:typename:void	file:
intop	lvm.h	/^#define intop(/;"	d
invalidateTMcache	ltable.h	/^#define invalidateTMcache(/;"	d
io_close	liolib.c	/^static int io_close (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_fclose	liolib.c	/^static int io_fclose (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_flush	liolib.c	/^static int io_flush (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_input	liolib.c	/^static int io_input (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_lines	liolib.c	/^static int io_lines (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_noclose	liolib.c	/^static int io_noclose (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_open	liolib.c	/^static int io_open (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_output	liolib.c	/^static int io_output (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_pclose	liolib.c	/^static int io_pclose (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_popen	liolib.c	/^static int io_popen (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_read	liolib.c	/^static int io_read (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_readline	liolib.c	/^static int io_readline (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_tmpfile	liolib.c	/^static int io_tmpfile (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_type	liolib.c	/^static int io_type (lua_State *L) {$/;"	f	typeref:typename:int	file:
io_write	liolib.c	/^static int io_write (lua_State *L) {$/;"	f	typeref:typename:int	file:
iolib	liolib.c	/^static const luaL_Reg iolib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
ipairsaux	lbaselib.c	/^static int ipairsaux (lua_State *L) {$/;"	f	typeref:typename:int	file:
isLfunction	lobject.h	/^#define isLfunction(/;"	d
isLua	lstate.h	/^#define isLua(/;"	d
is_vararg	lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:Proto	typeref:typename:lu_byte
isblack	lgc.h	/^#define isblack(/;"	d
iscleared	lgc.c	/^static int iscleared (global_State *g, const TValue *o) {$/;"	f	typeref:typename:int	file:
isclosed	liolib.c	/^#define isclosed(/;"	d	file:
iscollectable	lobject.h	/^#define iscollectable(/;"	d
iscont	lutf8lib.c	/^#define iscont(/;"	d	file:
isdead	lgc.h	/^#define isdead(/;"	d
isdeadm	lgc.h	/^#define isdeadm(/;"	d
isdummy	ltable.h	/^#define isdummy(/;"	d
isemptystr	lvm.c	/^#define isemptystr(/;"	d	file:
isgray	lgc.h	/^#define isgray(/;"	d
isinstack	ldebug.c	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f	typeref:typename:int	file:
isintwups	lfunc.h	/^#define isintwups(/;"	d
islittle	lstrlib.c	/^  int islittle;$/;"	m	struct:Header	typeref:typename:int	file:
isloop	lparser.c	/^  lu_byte isloop;  \/* true if 'block' is a loop *\/$/;"	m	struct:BlockCnt	typeref:typename:lu_byte	file:
isneg	lobject.c	/^static int isneg (const char **s) {$/;"	f	typeref:typename:int	file:
ispseudo	lapi.c	/^#define ispseudo(/;"	d	file:
isreserved	lstring.h	/^#define isreserved(/;"	d
isstackindex	lapi.c	/^#define isstackindex(/;"	d	file:
issweepphase	lgc.h	/^#define issweepphase(/;"	d
istailcall	lua.h	/^  char istailcall;	\/* (t) *\/$/;"	m	struct:lua_Debug	typeref:typename:char
isupvalue	lapi.c	/^#define isupvalue(/;"	d	file:
isvalid	lapi.c	/^#define isvalid(/;"	d	file:
isvararg	lua.h	/^  char isvararg;        \/* (u) *\/$/;"	m	struct:lua_Debug	typeref:typename:char
iswhite	lgc.h	/^#define iswhite(/;"	d
iter_aux	lutf8lib.c	/^static int iter_aux (lua_State *L) {$/;"	f	typeref:typename:int	file:
iter_codes	lutf8lib.c	/^static int iter_codes (lua_State *L) {$/;"	f	typeref:typename:int	file:
ival	lparser.h	/^    lua_Integer ival;    \/* for VKINT *\/$/;"	m	union:expdesc::__anonb080c5d4020a	typeref:typename:lua_Integer
ivalue	lobject.h	/^#define ivalue(/;"	d
jpc	lparser.h	/^  int jpc;  \/* list of pending jumps to 'pc' *\/$/;"	m	struct:FuncState	typeref:typename:int
jumponcond	lcode.c	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f	typeref:typename:int	file:
k	lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto	typeref:typename:TValue *
k	lparser.h	/^  expkind k;$/;"	m	struct:expdesc	typeref:typename:expkind
k	lstate.h	/^      lua_KFunction k;  \/* continuation in case of yields *\/$/;"	m	struct:CallInfo::__anond1956568010a::__anond19565680308	typeref:typename:lua_KFunction
keepinvariant	lgc.h	/^#define keepinvariant(/;"	d
keyfromval	ltable.h	/^#define keyfromval(/;"	d
kname	ldebug.c	/^static void kname (Proto *p, int pc, int c, const char **name) {$/;"	f	typeref:typename:void	file:
l	llimits.h	/^  long l;$/;"	m	union:__anon5af4d619010a	typeref:typename:long
l	lobject.h	/^  LClosure l;$/;"	m	union:Closure	typeref:typename:LClosure
l	lstate.c	/^  LX l;$/;"	m	struct:LG	typeref:typename:LX	file:
l	lstate.c	/^  lua_State l;$/;"	m	struct:LX	typeref:typename:lua_State	file:
l	lstate.h	/^    } l;$/;"	m	union:CallInfo::__anond1956568010a	typeref:struct:CallInfo::__anond1956568010a::__anond19565680208
l_G	lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State	typeref:typename:global_State *
l_alloc	lauxlib.c	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f	typeref:typename:void *	file:
l_castS2U	llimits.h	/^#define l_castS2U(/;"	d
l_castU2S	llimits.h	/^#define l_castU2S(/;"	d
l_checkmode	liolib.c	/^static int l_checkmode (const char *mode) {$/;"	f	typeref:typename:int	file:
l_checktime	loslib.c	/^static time_t l_checktime (lua_State *L, int arg) {$/;"	f	typeref:typename:time_t	file:
l_floor	luaconf.h	/^#define l_floor(/;"	d
l_fseek	liolib.c	/^#define l_fseek(/;"	d	file:
l_ftell	liolib.c	/^#define l_ftell(/;"	d	file:
l_getc	liolib.c	/^#define l_getc(/;"	d	file:
l_gmtime	loslib.c	/^#define l_gmtime(/;"	d	file:
l_hashfloat	ltable.c	/^static int l_hashfloat (lua_Number n) {$/;"	f	typeref:typename:int	file:
l_inspectstat	lauxlib.c	/^#define l_inspectstat(/;"	d	file:
l_intfitsf	lvm.c	/^#define l_intfitsf(/;"	d	file:
l_isfalse	lobject.h	/^#define l_isfalse(/;"	d
l_localtime	loslib.c	/^#define l_localtime(/;"	d	file:
l_lockfile	liolib.c	/^#define l_lockfile(/;"	d	file:
l_mathlim	luaconf.h	/^#define l_mathlim(/;"	d
l_mathop	luaconf.h	/^#define l_mathop(/;"	d
l_mem	llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t	typeref:typename:LUAI_MEM
l_mem	llimits.h	/^typedef long l_mem;$/;"	t	typeref:typename:long
l_mem	llimits.h	/^typedef ptrdiff_t l_mem;$/;"	t	typeref:typename:ptrdiff_t
l_message	lua.c	/^static void l_message (const char *pname, const char *msg) {$/;"	f	typeref:typename:void	file:
l_noret	llimits.h	/^#define l_noret	/;"	d
l_pclose	liolib.c	/^#define l_pclose(/;"	d	file:
l_popen	liolib.c	/^#define l_popen(/;"	d	file:
l_print	lua.c	/^static void l_print (lua_State *L) {$/;"	f	typeref:typename:void	file:
l_pushtime	loslib.c	/^#define l_pushtime(/;"	d	file:
l_rand	lmathlib.c	/^#define l_rand(/;"	d	file:
l_randomizePivot	ltablib.c	/^static unsigned int l_randomizePivot (void) {$/;"	f	typeref:typename:unsigned int	file:
l_registry	lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State	typeref:typename:TValue
l_seeknum	liolib.c	/^#define l_seeknum	/;"	d	file:
l_setbit	lgc.h	/^#define l_setbit(/;"	d
l_signalT	lstate.h	/^#define l_signalT	/;"	d
l_sprintf	luaconf.h	/^#define l_sprintf(/;"	d
l_srand	lmathlib.c	/^#define l_srand(/;"	d	file:
l_str2d	lobject.c	/^static const char *l_str2d (const char *s, lua_Number *result) {$/;"	f	typeref:typename:const char *	file:
l_str2dloc	lobject.c	/^static const char *l_str2dloc (const char *s, lua_Number *result, int mode) {$/;"	f	typeref:typename:const char *	file:
l_str2int	lobject.c	/^static const char *l_str2int (const char *s, lua_Integer *result) {$/;"	f	typeref:typename:const char *	file:
l_strcmp	lvm.c	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f	typeref:typename:int	file:
l_timet	loslib.c	/^#define l_timet	/;"	d	file:
l_uacInt	llimits.h	/^typedef LUAI_UACINT l_uacInt;$/;"	t	typeref:typename:LUAI_UACINT
l_uacNumber	llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t	typeref:typename:LUAI_UACNUMBER
l_unlockfile	liolib.c	/^#define l_unlockfile(/;"	d	file:
label	lparser.h	/^  Labellist label;   \/* list of active labels *\/$/;"	m	struct:Dyndata	typeref:typename:Labellist
labelstat	lparser.c	/^static void labelstat (LexState *ls, TString *label, int line) {$/;"	f	typeref:typename:void	file:
laction	lua.c	/^static void laction (int i) {$/;"	f	typeref:typename:void	file:
lapi.o	Makefile	/^lapi.o: lapi.c lprefix.h lua.h luaconf.h lapi.h llimits.h lstate.h \\$/;"	t
lapi_c	lapi.c	/^#define lapi_c$/;"	d	file:
lapi_h	lapi.h	/^#define lapi_h$/;"	d
lastfree	lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table	typeref:typename:Node *
lastlevel	lauxlib.c	/^static int lastlevel (lua_State *L) {$/;"	f	typeref:typename:int	file:
lastline	llex.h	/^  int lastline;  \/* line of last token 'consumed' *\/$/;"	m	struct:LexState	typeref:typename:int
lastlinedefined	lobject.h	/^  int lastlinedefined;  \/* debug information  *\/$/;"	m	struct:Proto	typeref:typename:int
lastlinedefined	lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:int
lastlistfield	lparser.c	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
lastmatch	lstrlib.c	/^  const char *lastmatch;  \/* end of last match *\/$/;"	m	struct:GMatchState	typeref:typename:const char *	file:
lasttarget	lparser.h	/^  int lasttarget;   \/* 'label' of last 'jump label' *\/$/;"	m	struct:FuncState	typeref:typename:int
lauxlib.o	Makefile	/^lauxlib.o: lauxlib.c lprefix.h lua.h luaconf.h lauxlib.h$/;"	t
lauxlib_c	lauxlib.c	/^#define lauxlib_c$/;"	d	file:
lauxlib_h	lauxlib.h	/^#define lauxlib_h$/;"	d
lbaselib.o	Makefile	/^lbaselib.o: lbaselib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lbaselib_c	lbaselib.c	/^#define lbaselib_c$/;"	d	file:
lbitlib.o	Makefile	/^lbitlib.o: lbitlib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lbitlib_c	lbitlib.c	/^#define lbitlib_c$/;"	d	file:
lcode.o	Makefile	/^lcode.o: lcode.c lprefix.h lua.h luaconf.h lcode.h llex.h lobject.h \\$/;"	t
lcode_c	lcode.c	/^#define lcode_c$/;"	d	file:
lcode_h	lcode.h	/^#define lcode_h$/;"	d
lcorolib.o	Makefile	/^lcorolib.o: lcorolib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lcorolib_c	lcorolib.c	/^#define lcorolib_c$/;"	d	file:
lctype.o	Makefile	/^lctype.o: lctype.c lprefix.h lctype.h lua.h luaconf.h llimits.h$/;"	t
lctype_c	lctype.c	/^#define lctype_c$/;"	d	file:
lctype_h	lctype.h	/^#define lctype_h$/;"	d
ldblib.o	Makefile	/^ldblib.o: ldblib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
ldblib_c	ldblib.c	/^#define ldblib_c$/;"	d	file:
ldebug.o	Makefile	/^ldebug.o: ldebug.c lprefix.h lua.h luaconf.h lapi.h llimits.h lstate.h \\$/;"	t
ldebug_c	ldebug.c	/^#define ldebug_c$/;"	d	file:
ldebug_h	ldebug.h	/^#define ldebug_h$/;"	d
ldo.o	Makefile	/^ldo.o: ldo.c lprefix.h lua.h luaconf.h lapi.h llimits.h lstate.h \\$/;"	t
ldo_c	ldo.c	/^#define ldo_c$/;"	d	file:
ldo_h	ldo.h	/^#define ldo_h$/;"	d
ldump.o	Makefile	/^ldump.o: ldump.c lprefix.h lua.h luaconf.h lobject.h llimits.h lstate.h \\$/;"	t
ldump_c	ldump.c	/^#define ldump_c$/;"	d	file:
leaveblock	lparser.c	/^static void leaveblock (FuncState *fs) {$/;"	f	typeref:typename:void	file:
leavelevel	lparser.c	/^#define leavelevel(/;"	d	file:
left	lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anonb080c5cf0108	typeref:typename:lu_byte	file:
len	lobject.h	/^  size_t len;  \/* number of bytes *\/$/;"	m	struct:Udata	typeref:typename:size_t
len	lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon2b5c08b20108	typeref:typename:ptrdiff_t	file:
level	lstrlib.c	/^  unsigned char level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	typeref:typename:unsigned char	file:
lexerror	llex.c	/^static l_noret lexerror (LexState *ls, const char *msg, int token) {$/;"	f	typeref:typename:l_noret	file:
lfunc.o	Makefile	/^lfunc.o: lfunc.c lprefix.h lua.h luaconf.h lfunc.h lobject.h llimits.h \\$/;"	t
lfunc_c	lfunc.c	/^#define lfunc_c$/;"	d	file:
lfunc_h	lfunc.h	/^#define lfunc_h$/;"	d
lgc.o	Makefile	/^lgc.o: lgc.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
lgc_c	lgc.c	/^#define lgc_c$/;"	d	file:
lgc_h	lgc.h	/^#define lgc_h$/;"	d
libdlua	Makefile	/^libdlua:$/;"	t
libsize	lauxlib.c	/^static int libsize (const luaL_Reg *l) {$/;"	f	typeref:typename:int	file:
line	lparser.h	/^  int line;  \/* line where it appeared *\/$/;"	m	struct:Labeldesc	typeref:typename:int
linedefined	lobject.h	/^  int linedefined;  \/* debug information  *\/$/;"	m	struct:Proto	typeref:typename:int
linedefined	lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:int
lineinfo	lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines (debug information) *\/$/;"	m	struct:Proto	typeref:typename:int *
linenumber	llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState	typeref:typename:int
linit.o	Makefile	/^linit.o: linit.c lprefix.h lua.h luaconf.h lualib.h lauxlib.h$/;"	t
linit_c	linit.c	/^#define linit_c$/;"	d	file:
linkgclist	lgc.c	/^#define linkgclist(/;"	d	file:
linux	Makefile	/^linux:$/;"	t
liolib.o	Makefile	/^liolib.o: liolib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
liolib_c	liolib.c	/^#define liolib_c$/;"	d	file:
lisdigit	lctype.h	/^#define lisdigit(/;"	d
lislalnum	lctype.h	/^#define lislalnum(/;"	d
lislalpha	lctype.h	/^#define lislalpha(/;"	d
lisprint	lctype.h	/^#define lisprint(/;"	d
lisspace	lctype.h	/^#define lisspace(/;"	d
listfield	lparser.c	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
listing	luac.c	/^static int listing=0;			\/* list bytecodes? *\/$/;"	v	typeref:typename:int	file:
lisxdigit	lctype.h	/^#define lisxdigit(/;"	d
little	lstrlib.c	/^  char little;  \/* true iff machine is little endian *\/$/;"	m	union:__anon2b5c08b2020a	typeref:typename:char	file:
ll_funcs	loadlib.c	/^static const luaL_Reg ll_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
ll_loadlib	loadlib.c	/^static int ll_loadlib (lua_State *L) {$/;"	f	typeref:typename:int	file:
ll_module	loadlib.c	/^static int ll_module (lua_State *L) {$/;"	f	typeref:typename:int	file:
ll_require	loadlib.c	/^static int ll_require (lua_State *L) {$/;"	f	typeref:typename:int	file:
ll_searchpath	loadlib.c	/^static int ll_searchpath (lua_State *L) {$/;"	f	typeref:typename:int	file:
ll_seeall	loadlib.c	/^static int ll_seeall (lua_State *L) {$/;"	f	typeref:typename:int	file:
llex	llex.c	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f	typeref:typename:int	file:
llex.o	Makefile	/^llex.o: llex.c lprefix.h lua.h luaconf.h lctype.h llimits.h ldebug.h \\$/;"	t
llex_c	llex.c	/^#define llex_c$/;"	d	file:
llex_h	llex.h	/^#define llex_h$/;"	d
llimits_h	llimits.h	/^#define llimits_h$/;"	d
lmathlib.o	Makefile	/^lmathlib.o: lmathlib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lmathlib_c	lmathlib.c	/^#define lmathlib_c$/;"	d	file:
lmem.o	Makefile	/^lmem.o: lmem.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
lmem_c	lmem.c	/^#define lmem_c$/;"	d	file:
lmem_h	lmem.h	/^#define lmem_h$/;"	d
lmemfind	lstrlib.c	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f	typeref:typename:const char *	file:
lmod	lobject.h	/^#define lmod(/;"	d
lnglen	lobject.h	/^    size_t lnglen;  \/* length for long strings *\/$/;"	m	union:TString::__anonfd91815e010a	typeref:typename:size_t
load_aux	lbaselib.c	/^static int load_aux (lua_State *L, int status, int envidx) {$/;"	f	typeref:typename:int	file:
loadedlibs	linit.c	/^static const luaL_Reg loadedlibs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
loadfunc	loadlib.c	/^static int loadfunc (lua_State *L, const char *filename, const char *modname) {$/;"	f	typeref:typename:int	file:
loadlib.o	Makefile	/^loadlib.o: loadlib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
loadlib_c	loadlib.c	/^#define loadlib_c$/;"	d	file:
loadline	lua.c	/^static int loadline (lua_State *L) {$/;"	f	typeref:typename:int	file:
lobject.o	Makefile	/^lobject.o: lobject.c lprefix.h lua.h luaconf.h lctype.h llimits.h \\$/;"	t
lobject_c	lobject.c	/^#define lobject_c$/;"	d	file:
lobject_h	lobject.h	/^#define lobject_h$/;"	d
localfunc	lparser.c	/^static void localfunc (LexState *ls) {$/;"	f	typeref:typename:void	file:
localstat	lparser.c	/^static void localstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
locvars	lobject.h	/^  LocVar *locvars;  \/* information about local variables (debug information) *\/$/;"	m	struct:Proto	typeref:typename:LocVar *
lookahead	llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState	typeref:typename:Token
lookforfunc	loadlib.c	/^static int lookforfunc (lua_State *L, const char *path, const char *sym) {$/;"	f	typeref:typename:int	file:
lopcodes.o	Makefile	/^lopcodes.o: lopcodes.c lprefix.h lopcodes.h llimits.h lua.h luaconf.h$/;"	t
lopcodes_c	lopcodes.c	/^#define lopcodes_c$/;"	d	file:
lopcodes_h	lopcodes.h	/^#define lopcodes_h$/;"	d
loslib.o	Makefile	/^loslib.o: loslib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
loslib_c	loslib.c	/^#define loslib_c$/;"	d	file:
lparser.o	Makefile	/^lparser.o: lparser.c lprefix.h lua.h luaconf.h lcode.h llex.h lobject.h \\$/;"	t
lparser_c	lparser.c	/^#define lparser_c$/;"	d	file:
lparser_h	lparser.h	/^#define lparser_h$/;"	d
lprefix_h	lprefix.h	/^#define lprefix_h$/;"	d
ls	lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:LexState *
lsizenode	lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of 'node' array *\/$/;"	m	struct:Table	typeref:typename:lu_byte
lstate.o	Makefile	/^lstate.o: lstate.c lprefix.h lua.h luaconf.h lapi.h llimits.h lstate.h \\$/;"	t
lstate_c	lstate.c	/^#define lstate_c$/;"	d	file:
lstate_h	lstate.h	/^#define lstate_h$/;"	d
lstop	lua.c	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:void	file:
lstring.o	Makefile	/^lstring.o: lstring.c lprefix.h lua.h luaconf.h ldebug.h lstate.h \\$/;"	t
lstring_c	lstring.c	/^#define lstring_c$/;"	d	file:
lstring_h	lstring.h	/^#define lstring_h$/;"	d
lstrlib.o	Makefile	/^lstrlib.o: lstrlib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lstrlib_c	lstrlib.c	/^#define lstrlib_c$/;"	d	file:
lsys_load	loadlib.c	/^static void *lsys_load (lua_State *L, const char *path, int seeglb) {$/;"	f	typeref:typename:void *	file:
lsys_sym	loadlib.c	/^static lua_CFunction lsys_sym (lua_State *L, void *lib, const char *sym) {$/;"	f	typeref:typename:lua_CFunction	file:
lsys_unloadlib	loadlib.c	/^static void lsys_unloadlib (void *lib) {$/;"	f	typeref:typename:void	file:
ltable.o	Makefile	/^ltable.o: ltable.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
ltable_c	ltable.c	/^#define ltable_c$/;"	d	file:
ltable_h	ltable.h	/^#define ltable_h$/;"	d
ltablib.o	Makefile	/^ltablib.o: ltablib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
ltablib_c	ltablib.c	/^#define ltablib_c$/;"	d	file:
ltm.o	Makefile	/^ltm.o: ltm.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
ltm_c	ltm.c	/^#define ltm_c$/;"	d	file:
ltm_h	ltm.h	/^#define ltm_h$/;"	d
ltolower	lctype.h	/^#define ltolower(/;"	d
lu_byte	llimits.h	/^typedef unsigned char lu_byte;$/;"	t	typeref:typename:unsigned char
lu_mem	llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t	typeref:typename:LUAI_UMEM
lu_mem	llimits.h	/^typedef size_t lu_mem;$/;"	t	typeref:typename:size_t
lu_mem	llimits.h	/^typedef unsigned long lu_mem;$/;"	t	typeref:typename:unsigned long
lua.o	Makefile	/^lua.o: lua.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
luaB_assert	lbaselib.c	/^static int luaB_assert (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_auxwrap	lcorolib.c	/^static int luaB_auxwrap (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_cocreate	lcorolib.c	/^static int luaB_cocreate (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_collectgarbage	lbaselib.c	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_coresume	lcorolib.c	/^static int luaB_coresume (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_corunning	lcorolib.c	/^static int luaB_corunning (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_costatus	lcorolib.c	/^static int luaB_costatus (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_cowrap	lcorolib.c	/^static int luaB_cowrap (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_dofile	lbaselib.c	/^static int luaB_dofile (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_error	lbaselib.c	/^static int luaB_error (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_getmetatable	lbaselib.c	/^static int luaB_getmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_ipairs	lbaselib.c	/^static int luaB_ipairs (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_load	lbaselib.c	/^static int luaB_load (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_loadfile	lbaselib.c	/^static int luaB_loadfile (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_next	lbaselib.c	/^static int luaB_next (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_pairs	lbaselib.c	/^static int luaB_pairs (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_pcall	lbaselib.c	/^static int luaB_pcall (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_print	lbaselib.c	/^static int luaB_print (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawequal	lbaselib.c	/^static int luaB_rawequal (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawget	lbaselib.c	/^static int luaB_rawget (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawlen	lbaselib.c	/^static int luaB_rawlen (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_rawset	lbaselib.c	/^static int luaB_rawset (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_select	lbaselib.c	/^static int luaB_select (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_setmetatable	lbaselib.c	/^static int luaB_setmetatable (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_tonumber	lbaselib.c	/^static int luaB_tonumber (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_tostring	lbaselib.c	/^static int luaB_tostring (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_type	lbaselib.c	/^static int luaB_type (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_xpcall	lbaselib.c	/^static int luaB_xpcall (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_yield	lcorolib.c	/^static int luaB_yield (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaB_yieldable	lcorolib.c	/^static int luaB_yieldable (lua_State *L) {$/;"	f	typeref:typename:int	file:
luaC_barrier	lgc.h	/^#define luaC_barrier(/;"	d
luaC_barrier_	lgc.c	/^void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {$/;"	f	typeref:typename:void
luaC_barrierback	lgc.h	/^#define luaC_barrierback(/;"	d
luaC_barrierback_	lgc.c	/^void luaC_barrierback_ (lua_State *L, Table *t) {$/;"	f	typeref:typename:void
luaC_checkGC	lgc.h	/^#define luaC_checkGC(/;"	d
luaC_checkfinalizer	lgc.c	/^void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt) {$/;"	f	typeref:typename:void
luaC_condGC	lgc.h	/^#define luaC_condGC(/;"	d
luaC_fix	lgc.c	/^void luaC_fix (lua_State *L, GCObject *o) {$/;"	f	typeref:typename:void
luaC_freeallobjects	lgc.c	/^void luaC_freeallobjects (lua_State *L) {$/;"	f	typeref:typename:void
luaC_fullgc	lgc.c	/^void luaC_fullgc (lua_State *L, int isemergency) {$/;"	f	typeref:typename:void
luaC_newobj	lgc.c	/^GCObject *luaC_newobj (lua_State *L, int tt, size_t sz) {$/;"	f	typeref:typename:GCObject *
luaC_objbarrier	lgc.h	/^#define luaC_objbarrier(/;"	d
luaC_runtilstate	lgc.c	/^void luaC_runtilstate (lua_State *L, int statesmask) {$/;"	f	typeref:typename:void
luaC_step	lgc.c	/^void luaC_step (lua_State *L) {$/;"	f	typeref:typename:void
luaC_upvalbarrier	lgc.h	/^#define luaC_upvalbarrier(/;"	d
luaC_upvalbarrier_	lgc.c	/^void luaC_upvalbarrier_ (lua_State *L, UpVal *uv) {$/;"	f	typeref:typename:void
luaC_upvdeccount	lgc.c	/^void luaC_upvdeccount (lua_State *L, UpVal *uv) {$/;"	f	typeref:typename:void
luaC_white	lgc.h	/^#define luaC_white(/;"	d
luaD_call	ldo.c	/^void luaD_call (lua_State *L, StkId func, int nResults) {$/;"	f	typeref:typename:void
luaD_callnoyield	ldo.c	/^void luaD_callnoyield (lua_State *L, StkId func, int nResults) {$/;"	f	typeref:typename:void
luaD_checkstack	ldo.h	/^#define luaD_checkstack(/;"	d
luaD_checkstackaux	ldo.h	/^#define luaD_checkstackaux(/;"	d
luaD_growstack	ldo.c	/^void luaD_growstack (lua_State *L, int n) {$/;"	f	typeref:typename:void
luaD_hook	ldo.c	/^void luaD_hook (lua_State *L, int event, int line) {$/;"	f	typeref:typename:void
luaD_inctop	ldo.c	/^void luaD_inctop (lua_State *L) {$/;"	f	typeref:typename:void
luaD_pcall	ldo.c	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f	typeref:typename:int
luaD_poscall	ldo.c	/^int luaD_poscall (lua_State *L, CallInfo *ci, StkId firstResult, int nres) {$/;"	f	typeref:typename:int
luaD_precall	ldo.c	/^int luaD_precall (lua_State *L, StkId func, int nresults) {$/;"	f	typeref:typename:int
luaD_protectedparser	ldo.c	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,$/;"	f	typeref:typename:int
luaD_rawrunprotected	ldo.c	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f	typeref:typename:int
luaD_reallocstack	ldo.c	/^void luaD_reallocstack (lua_State *L, int newsize) {$/;"	f	typeref:typename:void
luaD_shrinkstack	ldo.c	/^void luaD_shrinkstack (lua_State *L) {$/;"	f	typeref:typename:void
luaD_throw	ldo.c	/^l_noret luaD_throw (lua_State *L, int errcode) {$/;"	f	typeref:typename:l_noret
luaE_extendCI	lstate.c	/^CallInfo *luaE_extendCI (lua_State *L) {$/;"	f	typeref:typename:CallInfo *
luaE_freeCI	lstate.c	/^void luaE_freeCI (lua_State *L) {$/;"	f	typeref:typename:void
luaE_freethread	lstate.c	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f	typeref:typename:void
luaE_setdebt	lstate.c	/^void luaE_setdebt (global_State *g, l_mem debt) {$/;"	f	typeref:typename:void
luaE_shrinkCI	lstate.c	/^void luaE_shrinkCI (lua_State *L) {$/;"	f	typeref:typename:void
luaF_close	lfunc.c	/^void luaF_close (lua_State *L, StkId level) {$/;"	f	typeref:typename:void
luaF_findupval	lfunc.c	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f	typeref:typename:UpVal *
luaF_freeproto	lfunc.c	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f	typeref:typename:void
luaF_getlocalname	lfunc.c	/^const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {$/;"	f	typeref:typename:const char *
luaF_initupvals	lfunc.c	/^void luaF_initupvals (lua_State *L, LClosure *cl) {$/;"	f	typeref:typename:void
luaF_newCclosure	lfunc.c	/^CClosure *luaF_newCclosure (lua_State *L, int n) {$/;"	f	typeref:typename:CClosure *
luaF_newLclosure	lfunc.c	/^LClosure *luaF_newLclosure (lua_State *L, int n) {$/;"	f	typeref:typename:LClosure *
luaF_newproto	lfunc.c	/^Proto *luaF_newproto (lua_State *L) {$/;"	f	typeref:typename:Proto *
luaG_addinfo	ldebug.c	/^const char *luaG_addinfo (lua_State *L, const char *msg, TString *src,$/;"	f	typeref:typename:const char *
luaG_concaterror	ldebug.c	/^l_noret luaG_concaterror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f	typeref:typename:l_noret
luaG_errormsg	ldebug.c	/^l_noret luaG_errormsg (lua_State *L) {$/;"	f	typeref:typename:l_noret
luaG_opinterror	ldebug.c	/^l_noret luaG_opinterror (lua_State *L, const TValue *p1,$/;"	f	typeref:typename:l_noret
luaG_ordererror	ldebug.c	/^l_noret luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f	typeref:typename:l_noret
luaG_runerror	ldebug.c	/^l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:l_noret
luaG_tointerror	ldebug.c	/^l_noret luaG_tointerror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f	typeref:typename:l_noret
luaG_traceexec	ldebug.c	/^void luaG_traceexec (lua_State *L) {$/;"	f	typeref:typename:void
luaG_typeerror	ldebug.c	/^l_noret luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f	typeref:typename:l_noret
luaH_free	ltable.c	/^void luaH_free (lua_State *L, Table *t) {$/;"	f	typeref:typename:void
luaH_get	ltable.c	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f	typeref:typename:const TValue *
luaH_getint	ltable.c	/^const TValue *luaH_getint (Table *t, lua_Integer key) {$/;"	f	typeref:typename:const TValue *
luaH_getn	ltable.c	/^lua_Unsigned luaH_getn (Table *t) {$/;"	f	typeref:typename:lua_Unsigned
luaH_getshortstr	ltable.c	/^const TValue *luaH_getshortstr (Table *t, TString *key) {$/;"	f	typeref:typename:const TValue *
luaH_getstr	ltable.c	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f	typeref:typename:const TValue *
luaH_isdummy	ltable.c	/^int luaH_isdummy (const Table *t) { return isdummy(t); }$/;"	f	typeref:typename:int
luaH_mainposition	ltable.c	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f	typeref:typename:Node *
luaH_new	ltable.c	/^Table *luaH_new (lua_State *L) {$/;"	f	typeref:typename:Table *
luaH_newkey	ltable.c	/^TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f	typeref:typename:TValue *
luaH_next	ltable.c	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f	typeref:typename:int
luaH_resize	ltable.c	/^void luaH_resize (lua_State *L, Table *t, unsigned int nasize,$/;"	f	typeref:typename:void
luaH_resizearray	ltable.c	/^void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize) {$/;"	f	typeref:typename:void
luaH_set	ltable.c	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f	typeref:typename:TValue *
luaH_setint	ltable.c	/^void luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {$/;"	f	typeref:typename:void
luaK_checkstack	lcode.c	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f	typeref:typename:void
luaK_code	lcode.c	/^static int luaK_code (FuncState *fs, Instruction i) {$/;"	f	typeref:typename:int	file:
luaK_codeABC	lcode.c	/^int luaK_codeABC (FuncState *fs, OpCode o, int a, int b, int c) {$/;"	f	typeref:typename:int
luaK_codeABx	lcode.c	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f	typeref:typename:int
luaK_codeAsBx	lcode.h	/^#define luaK_codeAsBx(/;"	d
luaK_codek	lcode.c	/^int luaK_codek (FuncState *fs, int reg, int k) {$/;"	f	typeref:typename:int
luaK_concat	lcode.c	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f	typeref:typename:void
luaK_dischargevars	lcode.c	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_exp2RK	lcode.c	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:int
luaK_exp2anyreg	lcode.c	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:int
luaK_exp2anyregup	lcode.c	/^void luaK_exp2anyregup (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_exp2nextreg	lcode.c	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_exp2val	lcode.c	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_fixline	lcode.c	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f	typeref:typename:void
luaK_getlabel	lcode.c	/^int luaK_getlabel (FuncState *fs) {$/;"	f	typeref:typename:int
luaK_goiffalse	lcode.c	/^void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_goiftrue	lcode.c	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_indexed	lcode.c	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f	typeref:typename:void
luaK_infix	lcode.c	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f	typeref:typename:void
luaK_intK	lcode.c	/^int luaK_intK (FuncState *fs, lua_Integer n) {$/;"	f	typeref:typename:int
luaK_jump	lcode.c	/^int luaK_jump (FuncState *fs) {$/;"	f	typeref:typename:int
luaK_jumpto	lcode.h	/^#define luaK_jumpto(/;"	d
luaK_nil	lcode.c	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f	typeref:typename:void
luaK_numberK	lcode.c	/^static int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f	typeref:typename:int	file:
luaK_patchclose	lcode.c	/^void luaK_patchclose (FuncState *fs, int list, int level) {$/;"	f	typeref:typename:void
luaK_patchlist	lcode.c	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f	typeref:typename:void
luaK_patchtohere	lcode.c	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f	typeref:typename:void
luaK_posfix	lcode.c	/^void luaK_posfix (FuncState *fs, BinOpr op,$/;"	f	typeref:typename:void
luaK_prefix	lcode.c	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e, int line) {$/;"	f	typeref:typename:void
luaK_reserveregs	lcode.c	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f	typeref:typename:void
luaK_ret	lcode.c	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f	typeref:typename:void
luaK_self	lcode.c	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f	typeref:typename:void
luaK_setlist	lcode.c	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f	typeref:typename:void
luaK_setmultret	lcode.h	/^#define luaK_setmultret(/;"	d
luaK_setoneret	lcode.c	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void
luaK_setreturns	lcode.c	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f	typeref:typename:void
luaK_storevar	lcode.c	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f	typeref:typename:void
luaK_stringK	lcode.c	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f	typeref:typename:int
luaL_Buffer	lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Reg	lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_Stream	lauxlib.h	/^typedef struct luaL_Stream {$/;"	s
luaL_Stream	lauxlib.h	/^} luaL_Stream;$/;"	t	typeref:struct:luaL_Stream
luaL_addchar	lauxlib.h	/^#define luaL_addchar(/;"	d
luaL_addlstring	lauxlib.c	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f	typeref:typename:LUALIB_API void
luaL_addlstring	lauxlib.h	/^LUALIB_API void (luaL_addlstring) (luaL_Buffer *B, const char *s, size_t l);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B,const char * s,size_t l)
luaL_addsize	lauxlib.h	/^#define luaL_addsize(/;"	d
luaL_addstring	lauxlib.c	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f	typeref:typename:LUALIB_API void
luaL_addstring	lauxlib.h	/^LUALIB_API void (luaL_addstring) (luaL_Buffer *B, const char *s);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B,const char * s)
luaL_addvalue	lauxlib.c	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f	typeref:typename:LUALIB_API void
luaL_addvalue	lauxlib.h	/^LUALIB_API void (luaL_addvalue) (luaL_Buffer *B);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B)
luaL_argcheck	lauxlib.h	/^#define luaL_argcheck(/;"	d
luaL_argerror	lauxlib.c	/^LUALIB_API int luaL_argerror (lua_State *L, int arg, const char *extramsg) {$/;"	f	typeref:typename:LUALIB_API int
luaL_argerror	lauxlib.h	/^LUALIB_API int (luaL_argerror) (lua_State *L, int arg, const char *extramsg);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int arg,const char * extramsg)
luaL_buffinit	lauxlib.c	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f	typeref:typename:LUALIB_API void
luaL_buffinit	lauxlib.h	/^LUALIB_API void (luaL_buffinit) (lua_State *L, luaL_Buffer *B);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,luaL_Buffer * B)
luaL_buffinitsize	lauxlib.c	/^LUALIB_API char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz) {$/;"	f	typeref:typename:LUALIB_API char *
luaL_buffinitsize	lauxlib.h	/^LUALIB_API char *(luaL_buffinitsize) (lua_State *L, luaL_Buffer *B, size_t sz);$/;"	v	typeref:typename:LUALIB_API char * ()(lua_State * L,luaL_Buffer * B,size_t sz)
luaL_callmeta	lauxlib.c	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f	typeref:typename:LUALIB_API int
luaL_callmeta	lauxlib.h	/^LUALIB_API int (luaL_callmeta) (lua_State *L, int obj, const char *e);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int obj,const char * e)
luaL_checkany	lauxlib.c	/^LUALIB_API void luaL_checkany (lua_State *L, int arg) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checkany	lauxlib.h	/^LUALIB_API void (luaL_checkany) (lua_State *L, int arg);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int arg)
luaL_checkint	lauxlib.h	/^#define luaL_checkint(/;"	d
luaL_checkinteger	lauxlib.c	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int arg) {$/;"	f	typeref:typename:LUALIB_API lua_Integer
luaL_checklong	lauxlib.h	/^#define luaL_checklong(/;"	d
luaL_checklstring	lauxlib.c	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int arg, size_t *len) {$/;"	f	typeref:typename:LUALIB_API const char *
luaL_checklstring	lauxlib.h	/^LUALIB_API const char *(luaL_checklstring) (lua_State *L, int arg,$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,int arg,size_t * l)
luaL_checknumber	lauxlib.c	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int arg) {$/;"	f	typeref:typename:LUALIB_API lua_Number
luaL_checkoption	lauxlib.c	/^LUALIB_API int luaL_checkoption (lua_State *L, int arg, const char *def,$/;"	f	typeref:typename:LUALIB_API int
luaL_checkoption	lauxlib.h	/^LUALIB_API int (luaL_checkoption) (lua_State *L, int arg, const char *def,$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int arg,const char * def,const char * const lst[])
luaL_checkstack	lauxlib.c	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *msg) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checkstack	lauxlib.h	/^LUALIB_API void (luaL_checkstack) (lua_State *L, int sz, const char *msg);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int sz,const char * msg)
luaL_checkstring	lauxlib.h	/^#define luaL_checkstring(/;"	d
luaL_checktype	lauxlib.c	/^LUALIB_API void luaL_checktype (lua_State *L, int arg, int t) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checktype	lauxlib.h	/^LUALIB_API void (luaL_checktype) (lua_State *L, int arg, int t);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int arg,int t)
luaL_checkudata	lauxlib.c	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f	typeref:typename:LUALIB_API void *
luaL_checkudata	lauxlib.h	/^LUALIB_API void *(luaL_checkudata) (lua_State *L, int ud, const char *tname);$/;"	v	typeref:typename:LUALIB_API void * ()(lua_State * L,int ud,const char * tname)
luaL_checkunsigned	lauxlib.h	/^#define luaL_checkunsigned(/;"	d
luaL_checkversion	lauxlib.h	/^#define luaL_checkversion(/;"	d
luaL_checkversion_	lauxlib.c	/^LUALIB_API void luaL_checkversion_ (lua_State *L, lua_Number ver, size_t sz) {$/;"	f	typeref:typename:LUALIB_API void
luaL_checkversion_	lauxlib.h	/^LUALIB_API void (luaL_checkversion_) (lua_State *L, lua_Number ver, size_t sz);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,lua_Number ver,size_t sz)
luaL_dofile	lauxlib.h	/^#define luaL_dofile(/;"	d
luaL_dostring	lauxlib.h	/^#define luaL_dostring(/;"	d
luaL_error	lauxlib.c	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:LUALIB_API int
luaL_error	lauxlib.h	/^LUALIB_API int (luaL_error) (lua_State *L, const char *fmt, ...);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * fmt,...)
luaL_execresult	lauxlib.c	/^LUALIB_API int luaL_execresult (lua_State *L, int stat) {$/;"	f	typeref:typename:LUALIB_API int
luaL_execresult	lauxlib.h	/^LUALIB_API int (luaL_execresult) (lua_State *L, int stat);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int stat)
luaL_fileresult	lauxlib.c	/^LUALIB_API int luaL_fileresult (lua_State *L, int stat, const char *fname) {$/;"	f	typeref:typename:LUALIB_API int
luaL_fileresult	lauxlib.h	/^LUALIB_API int (luaL_fileresult) (lua_State *L, int stat, const char *fname);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int stat,const char * fname)
luaL_findtable	lauxlib.c	/^static const char *luaL_findtable (lua_State *L, int idx,$/;"	f	typeref:typename:const char *	file:
luaL_getmetafield	lauxlib.c	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f	typeref:typename:LUALIB_API int
luaL_getmetafield	lauxlib.h	/^LUALIB_API int (luaL_getmetafield) (lua_State *L, int obj, const char *e);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int obj,const char * e)
luaL_getmetatable	lauxlib.h	/^#define luaL_getmetatable(/;"	d
luaL_getsubtable	lauxlib.c	/^LUALIB_API int luaL_getsubtable (lua_State *L, int idx, const char *fname) {$/;"	f	typeref:typename:LUALIB_API int
luaL_getsubtable	lauxlib.h	/^LUALIB_API int (luaL_getsubtable) (lua_State *L, int idx, const char *fname);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int idx,const char * fname)
luaL_gsub	lauxlib.c	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,$/;"	f	typeref:typename:LUALIB_API const char *
luaL_gsub	lauxlib.h	/^LUALIB_API const char *(luaL_gsub) (lua_State *L, const char *s, const char *p,$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,const char * s,const char * p,const char * r)
luaL_len	lauxlib.c	/^LUALIB_API lua_Integer luaL_len (lua_State *L, int idx) {$/;"	f	typeref:typename:LUALIB_API lua_Integer
luaL_loadbuffer	lauxlib.h	/^#define luaL_loadbuffer(/;"	d
luaL_loadbufferx	lauxlib.c	/^LUALIB_API int luaL_loadbufferx (lua_State *L, const char *buff, size_t size,$/;"	f	typeref:typename:LUALIB_API int
luaL_loadbufferx	lauxlib.h	/^LUALIB_API int (luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz,$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * buff,size_t sz,const char * name,const char * mode)
luaL_loadfile	lauxlib.h	/^#define luaL_loadfile(/;"	d
luaL_loadfilex	lauxlib.c	/^LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,$/;"	f	typeref:typename:LUALIB_API int
luaL_loadfilex	lauxlib.h	/^LUALIB_API int (luaL_loadfilex) (lua_State *L, const char *filename,$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * filename,const char * mode)
luaL_loadstring	lauxlib.c	/^LUALIB_API int luaL_loadstring (lua_State *L, const char *s) {$/;"	f	typeref:typename:LUALIB_API int
luaL_loadstring	lauxlib.h	/^LUALIB_API int (luaL_loadstring) (lua_State *L, const char *s);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * s)
luaL_newlib	lauxlib.h	/^#define luaL_newlib(/;"	d
luaL_newlibtable	lauxlib.h	/^#define luaL_newlibtable(/;"	d
luaL_newmetatable	lauxlib.c	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f	typeref:typename:LUALIB_API int
luaL_newmetatable	lauxlib.h	/^LUALIB_API int   (luaL_newmetatable) (lua_State *L, const char *tname);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,const char * tname)
luaL_newstate	lauxlib.c	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f	typeref:typename:LUALIB_API lua_State *
luaL_newstate	lauxlib.h	/^LUALIB_API lua_State *(luaL_newstate) (void);$/;"	v	typeref:typename:LUALIB_API lua_State * ()(void)
luaL_openlib	lauxlib.c	/^LUALIB_API void luaL_openlib (lua_State *L, const char *libname,$/;"	f	typeref:typename:LUALIB_API void
luaL_openlib	lauxlib.h	/^LUALIB_API void (luaL_openlib) (lua_State *L, const char *libname,$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,const char * libname,const luaL_Reg * l,int nup)
luaL_openlibs	linit.c	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f	typeref:typename:LUALIB_API void
luaL_openlibs	lualib.h	/^LUALIB_API void (luaL_openlibs) (lua_State *L);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L)
luaL_opt	lauxlib.h	/^#define luaL_opt(/;"	d
luaL_optint	lauxlib.h	/^#define luaL_optint(/;"	d
luaL_optinteger	lauxlib.c	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int arg,$/;"	f	typeref:typename:LUALIB_API lua_Integer
luaL_optlong	lauxlib.h	/^#define luaL_optlong(/;"	d
luaL_optlstring	lauxlib.c	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int arg,$/;"	f	typeref:typename:LUALIB_API const char *
luaL_optlstring	lauxlib.h	/^LUALIB_API const char *(luaL_optlstring) (lua_State *L, int arg,$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,int arg,const char * def,size_t * l)
luaL_optnumber	lauxlib.c	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int arg, lua_Number def) {$/;"	f	typeref:typename:LUALIB_API lua_Number
luaL_optstring	lauxlib.h	/^#define luaL_optstring(/;"	d
luaL_optunsigned	lauxlib.h	/^#define luaL_optunsigned(/;"	d
luaL_prepbuffer	lauxlib.h	/^#define luaL_prepbuffer(/;"	d
luaL_prepbuffsize	lauxlib.c	/^LUALIB_API char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz) {$/;"	f	typeref:typename:LUALIB_API char *
luaL_prepbuffsize	lauxlib.h	/^LUALIB_API char *(luaL_prepbuffsize) (luaL_Buffer *B, size_t sz);$/;"	v	typeref:typename:LUALIB_API char * ()(luaL_Buffer * B,size_t sz)
luaL_pushmodule	lauxlib.c	/^LUALIB_API void luaL_pushmodule (lua_State *L, const char *modname,$/;"	f	typeref:typename:LUALIB_API void
luaL_pushmodule	lauxlib.h	/^LUALIB_API void (luaL_pushmodule) (lua_State *L, const char *modname,$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,const char * modname,int sizehint)
luaL_pushresult	lauxlib.c	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f	typeref:typename:LUALIB_API void
luaL_pushresult	lauxlib.h	/^LUALIB_API void (luaL_pushresult) (luaL_Buffer *B);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B)
luaL_pushresultsize	lauxlib.c	/^LUALIB_API void luaL_pushresultsize (luaL_Buffer *B, size_t sz) {$/;"	f	typeref:typename:LUALIB_API void
luaL_pushresultsize	lauxlib.h	/^LUALIB_API void (luaL_pushresultsize) (luaL_Buffer *B, size_t sz);$/;"	v	typeref:typename:LUALIB_API void ()(luaL_Buffer * B,size_t sz)
luaL_ref	lauxlib.c	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f	typeref:typename:LUALIB_API int
luaL_ref	lauxlib.h	/^LUALIB_API int (luaL_ref) (lua_State *L, int t);$/;"	v	typeref:typename:LUALIB_API int ()(lua_State * L,int t)
luaL_register	lauxlib.h	/^#define luaL_register(/;"	d
luaL_requiref	lauxlib.c	/^LUALIB_API void luaL_requiref (lua_State *L, const char *modname,$/;"	f	typeref:typename:LUALIB_API void
luaL_requiref	lauxlib.h	/^LUALIB_API void (luaL_requiref) (lua_State *L, const char *modname,$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,const char * modname,lua_CFunction openf,int glb)
luaL_setfuncs	lauxlib.c	/^LUALIB_API void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {$/;"	f	typeref:typename:LUALIB_API void
luaL_setfuncs	lauxlib.h	/^LUALIB_API void (luaL_setfuncs) (lua_State *L, const luaL_Reg *l, int nup);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,const luaL_Reg * l,int nup)
luaL_setmetatable	lauxlib.c	/^LUALIB_API void luaL_setmetatable (lua_State *L, const char *tname) {$/;"	f	typeref:typename:LUALIB_API void
luaL_setmetatable	lauxlib.h	/^LUALIB_API void  (luaL_setmetatable) (lua_State *L, const char *tname);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,const char * tname)
luaL_testudata	lauxlib.c	/^LUALIB_API void *luaL_testudata (lua_State *L, int ud, const char *tname) {$/;"	f	typeref:typename:LUALIB_API void *
luaL_testudata	lauxlib.h	/^LUALIB_API void *(luaL_testudata) (lua_State *L, int ud, const char *tname);$/;"	v	typeref:typename:LUALIB_API void * ()(lua_State * L,int ud,const char * tname)
luaL_tolstring	lauxlib.c	/^LUALIB_API const char *luaL_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f	typeref:typename:LUALIB_API const char *
luaL_tolstring	lauxlib.h	/^LUALIB_API const char *(luaL_tolstring) (lua_State *L, int idx, size_t *len);$/;"	v	typeref:typename:LUALIB_API const char * ()(lua_State * L,int idx,size_t * len)
luaL_traceback	lauxlib.c	/^LUALIB_API void luaL_traceback (lua_State *L, lua_State *L1,$/;"	f	typeref:typename:LUALIB_API void
luaL_traceback	lauxlib.h	/^LUALIB_API void (luaL_traceback) (lua_State *L, lua_State *L1,$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,lua_State * L1,const char * msg,int level)
luaL_typename	lauxlib.h	/^#define luaL_typename(/;"	d
luaL_unref	lauxlib.c	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f	typeref:typename:LUALIB_API void
luaL_unref	lauxlib.h	/^LUALIB_API void (luaL_unref) (lua_State *L, int t, int ref);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int t,int ref)
luaL_where	lauxlib.c	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f	typeref:typename:LUALIB_API void
luaL_where	lauxlib.h	/^LUALIB_API void (luaL_where) (lua_State *L, int lvl);$/;"	v	typeref:typename:LUALIB_API void ()(lua_State * L,int lvl)
luaM_free	lmem.h	/^#define luaM_free(/;"	d
luaM_freearray	lmem.h	/^#define luaM_freearray(/;"	d
luaM_freemem	lmem.h	/^#define luaM_freemem(/;"	d
luaM_growaux_	lmem.c	/^void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,$/;"	f	typeref:typename:void *
luaM_growvector	lmem.h	/^#define luaM_growvector(/;"	d
luaM_malloc	lmem.h	/^#define luaM_malloc(/;"	d
luaM_new	lmem.h	/^#define luaM_new(/;"	d
luaM_newobject	lmem.h	/^#define luaM_newobject(/;"	d
luaM_newvector	lmem.h	/^#define luaM_newvector(/;"	d
luaM_realloc_	lmem.c	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f	typeref:typename:void *
luaM_reallocv	lmem.h	/^#define luaM_reallocv(/;"	d
luaM_reallocvchar	lmem.h	/^#define luaM_reallocvchar(/;"	d
luaM_reallocvector	lmem.h	/^#define luaM_reallocvector(/;"	d
luaM_toobig	lmem.c	/^l_noret luaM_toobig (lua_State *L) {$/;"	f	typeref:typename:l_noret
luaO_arith	lobject.c	/^void luaO_arith (lua_State *L, int op, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:void
luaO_ceillog2	lobject.c	/^int luaO_ceillog2 (unsigned int x) {$/;"	f	typeref:typename:int
luaO_chunkid	lobject.c	/^void luaO_chunkid (char *out, const char *source, size_t bufflen) {$/;"	f	typeref:typename:void
luaO_fb2int	lobject.c	/^int luaO_fb2int (int x) {$/;"	f	typeref:typename:int
luaO_hexavalue	lobject.c	/^int luaO_hexavalue (int c) {$/;"	f	typeref:typename:int
luaO_int2fb	lobject.c	/^int luaO_int2fb (unsigned int x) {$/;"	f	typeref:typename:int
luaO_nilobject	lobject.h	/^#define luaO_nilobject	/;"	d
luaO_nilobject_	lobject.c	/^LUAI_DDEF const TValue luaO_nilobject_ = {NILCONSTANT};$/;"	v	typeref:typename:LUAI_DDEF const TValue
luaO_nilobject_	lobject.h	/^LUAI_DDEC const TValue luaO_nilobject_;$/;"	v	typeref:typename:LUAI_DDEC const TValue
luaO_pushfstring	lobject.c	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:const char *
luaO_pushvfstring	lobject.c	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f	typeref:typename:const char *
luaO_str2num	lobject.c	/^size_t luaO_str2num (const char *s, TValue *o) {$/;"	f	typeref:typename:size_t
luaO_tostring	lobject.c	/^void luaO_tostring (lua_State *L, StkId obj) {$/;"	f	typeref:typename:void
luaO_utf8esc	lobject.c	/^int luaO_utf8esc (char *buff, unsigned long x) {$/;"	f	typeref:typename:int
luaP_opmodes	lopcodes.c	/^LUAI_DDEF const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v	typeref:typename:LUAI_DDEF const lu_byte[]
luaP_opmodes	lopcodes.h	/^LUAI_DDEC const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v	typeref:typename:LUAI_DDEC const lu_byte[]
luaP_opnames	lopcodes.c	/^LUAI_DDEF const char *const luaP_opnames[NUM_OPCODES+1] = {$/;"	v	typeref:typename:LUAI_DDEF const char * const[]
luaP_opnames	lopcodes.h	/^LUAI_DDEC const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v	typeref:typename:LUAI_DDEC const char * const[]
luaS_clearcache	lstring.c	/^void luaS_clearcache (global_State *g) {$/;"	f	typeref:typename:void
luaS_createlngstrobj	lstring.c	/^TString *luaS_createlngstrobj (lua_State *L, size_t l) {$/;"	f	typeref:typename:TString *
luaS_eqlngstr	lstring.c	/^int luaS_eqlngstr (TString *a, TString *b) {$/;"	f	typeref:typename:int
luaS_hash	lstring.c	/^unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {$/;"	f	typeref:typename:unsigned int
luaS_hashlongstr	lstring.c	/^unsigned int luaS_hashlongstr (TString *ts) {$/;"	f	typeref:typename:unsigned int
luaS_init	lstring.c	/^void luaS_init (lua_State *L) {$/;"	f	typeref:typename:void
luaS_new	lstring.c	/^TString *luaS_new (lua_State *L, const char *str) {$/;"	f	typeref:typename:TString *
luaS_newliteral	lstring.h	/^#define luaS_newliteral(/;"	d
luaS_newlstr	lstring.c	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f	typeref:typename:TString *
luaS_newudata	lstring.c	/^Udata *luaS_newudata (lua_State *L, size_t s) {$/;"	f	typeref:typename:Udata *
luaS_remove	lstring.c	/^void luaS_remove (lua_State *L, TString *ts) {$/;"	f	typeref:typename:void
luaS_resize	lstring.c	/^void luaS_resize (lua_State *L, int newsize) {$/;"	f	typeref:typename:void
luaT_callTM	ltm.c	/^void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f	typeref:typename:void
luaT_callbinTM	ltm.c	/^int luaT_callbinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:int
luaT_callorderTM	ltm.c	/^int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:int
luaT_gettm	ltm.c	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f	typeref:typename:const TValue *
luaT_gettmbyobj	ltm.c	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f	typeref:typename:const TValue *
luaT_init	ltm.c	/^void luaT_init (lua_State *L) {$/;"	f	typeref:typename:void
luaT_objtypename	ltm.c	/^const char *luaT_objtypename (lua_State *L, const TValue *o) {$/;"	f	typeref:typename:const char *
luaT_trybinTM	ltm.c	/^void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f	typeref:typename:void
luaT_typenames_	ltm.c	/^LUAI_DDEF const char *const luaT_typenames_[LUA_TOTALTAGS] = {$/;"	v	typeref:typename:LUAI_DDEF const char * const[]
luaT_typenames_	ltm.h	/^LUAI_DDEC const char *const luaT_typenames_[LUA_TOTALTAGS];$/;"	v	typeref:typename:LUAI_DDEC const char * const[]
luaU_dump	ldump.c	/^int luaU_dump(lua_State *L, const Proto *f, lua_Writer w, void *data,$/;"	f	typeref:typename:int
luaU_print	luac.c	/^#define luaU_print	/;"	d	file:
luaU_undump	lundump.c	/^LClosure *luaU_undump(lua_State *L, ZIO *Z, const char *name) {$/;"	f	typeref:typename:LClosure *
luaV_concat	lvm.c	/^void luaV_concat (lua_State *L, int total) {$/;"	f	typeref:typename:void
luaV_div	lvm.c	/^lua_Integer luaV_div (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f	typeref:typename:lua_Integer
luaV_equalobj	lvm.c	/^int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f	typeref:typename:int
luaV_execute	lvm.c	/^void luaV_execute (lua_State *L) {$/;"	f	typeref:typename:void
luaV_fastget	lvm.h	/^#define luaV_fastget(/;"	d
luaV_fastset	lvm.h	/^#define luaV_fastset(/;"	d
luaV_finishOp	lvm.c	/^void luaV_finishOp (lua_State *L) {$/;"	f	typeref:typename:void
luaV_finishget	lvm.c	/^void luaV_finishget (lua_State *L, const TValue *t, TValue *key, StkId val,$/;"	f	typeref:typename:void
luaV_finishset	lvm.c	/^void luaV_finishset (lua_State *L, const TValue *t, TValue *key,$/;"	f	typeref:typename:void
luaV_gettable	lvm.h	/^#define luaV_gettable(/;"	d
luaV_lessequal	lvm.c	/^int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int
luaV_lessthan	lvm.c	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f	typeref:typename:int
luaV_mod	lvm.c	/^lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f	typeref:typename:lua_Integer
luaV_objlen	lvm.c	/^void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {$/;"	f	typeref:typename:void
luaV_rawequalobj	lvm.h	/^#define luaV_rawequalobj(/;"	d
luaV_settable	lvm.h	/^#define luaV_settable(/;"	d
luaV_shiftl	lvm.c	/^lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y) {$/;"	f	typeref:typename:lua_Integer
luaV_tointeger	lvm.c	/^int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode) {$/;"	f	typeref:typename:int
luaV_tonumber_	lvm.c	/^int luaV_tonumber_ (const TValue *obj, lua_Number *n) {$/;"	f	typeref:typename:int
luaX_init	llex.c	/^void luaX_init (lua_State *L) {$/;"	f	typeref:typename:void
luaX_lookahead	llex.c	/^int luaX_lookahead (LexState *ls) {$/;"	f	typeref:typename:int
luaX_newstring	llex.c	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f	typeref:typename:TString *
luaX_next	llex.c	/^void luaX_next (LexState *ls) {$/;"	f	typeref:typename:void
luaX_setinput	llex.c	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source,$/;"	f	typeref:typename:void
luaX_syntaxerror	llex.c	/^l_noret luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f	typeref:typename:l_noret
luaX_token2str	llex.c	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f	typeref:typename:const char *
luaX_tokens	llex.c	/^static const char *const luaX_tokens [] = {$/;"	v	typeref:typename:const char * const[]	file:
luaY_parser	lparser.c	/^LClosure *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff,$/;"	f	typeref:typename:LClosure *
luaZ_buffer	lzio.h	/^#define luaZ_buffer(/;"	d
luaZ_bufflen	lzio.h	/^#define luaZ_bufflen(/;"	d
luaZ_buffremove	lzio.h	/^#define luaZ_buffremove(/;"	d
luaZ_fill	lzio.c	/^int luaZ_fill (ZIO *z) {$/;"	f	typeref:typename:int
luaZ_freebuffer	lzio.h	/^#define luaZ_freebuffer(/;"	d
luaZ_init	lzio.c	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f	typeref:typename:void
luaZ_initbuffer	lzio.h	/^#define luaZ_initbuffer(/;"	d
luaZ_read	lzio.c	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f	typeref:typename:size_t
luaZ_resetbuffer	lzio.h	/^#define luaZ_resetbuffer(/;"	d
luaZ_resizebuffer	lzio.h	/^#define luaZ_resizebuffer(/;"	d
luaZ_sizebuffer	lzio.h	/^#define luaZ_sizebuffer(/;"	d
lua_Alloc	lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t	typeref:typename:void * (*)(void * ud,void * ptr,size_t osize,size_t nsize)
lua_CFunction	lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t	typeref:typename:int (*)(lua_State * L)
lua_Debug	lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t	typeref:typename:void (*)(lua_State * L,lua_Debug * ar)
lua_Integer	lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t	typeref:typename:LUA_INTEGER
lua_KContext	lua.h	/^typedef LUA_KCONTEXT lua_KContext;$/;"	t	typeref:typename:LUA_KCONTEXT
lua_KFunction	lua.h	/^typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);$/;"	t	typeref:typename:int (*)(lua_State * L,int status,lua_KContext ctx)
lua_Number	lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t	typeref:typename:LUA_NUMBER
lua_Reader	lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t	typeref:typename:const char * (*)(lua_State * L,void * ud,size_t * sz)
lua_State	lstate.h	/^struct lua_State {$/;"	s
lua_State	lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_TValue	lobject.h	/^typedef struct lua_TValue {$/;"	s
lua_Unsigned	lua.h	/^typedef LUA_UNSIGNED lua_Unsigned;$/;"	t	typeref:typename:LUA_UNSIGNED
lua_Writer	lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);$/;"	t	typeref:typename:int (*)(lua_State * L,const void * p,size_t sz,void * ud)
lua_absindex	lapi.c	/^LUA_API int lua_absindex (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_absindex	lua.h	/^LUA_API int   (lua_absindex) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_arith	lapi.c	/^LUA_API void lua_arith (lua_State *L, int op) {$/;"	f	typeref:typename:LUA_API void
lua_arith	lua.h	/^LUA_API void  (lua_arith) (lua_State *L, int op);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int op)
lua_assert	llimits.h	/^#define lua_assert(/;"	d
lua_assert	lualib.h	/^#define lua_assert(/;"	d
lua_atpanic	lapi.c	/^LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f	typeref:typename:LUA_API lua_CFunction
lua_c	lua.c	/^#define lua_c$/;"	d	file:
lua_call	lua.h	/^#define lua_call(/;"	d
lua_callk	lapi.c	/^LUA_API void lua_callk (lua_State *L, int nargs, int nresults,$/;"	f	typeref:typename:LUA_API void
lua_callk	lua.h	/^LUA_API void  (lua_callk) (lua_State *L, int nargs, int nresults,$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int nargs,int nresults,lua_KContext ctx,lua_KFunction k)
lua_checkstack	lapi.c	/^LUA_API int lua_checkstack (lua_State *L, int n) {$/;"	f	typeref:typename:LUA_API int
lua_checkstack	lua.h	/^LUA_API int   (lua_checkstack) (lua_State *L, int n);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int n)
lua_close	lstate.c	/^LUA_API void lua_close (lua_State *L) {$/;"	f	typeref:typename:LUA_API void
lua_close	lua.h	/^LUA_API void       (lua_close) (lua_State *L);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L)
lua_compare	lapi.c	/^LUA_API int lua_compare (lua_State *L, int index1, int index2, int op) {$/;"	f	typeref:typename:LUA_API int
lua_compare	lua.h	/^LUA_API int   (lua_compare) (lua_State *L, int idx1, int idx2, int op);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx1,int idx2,int op)
lua_concat	lapi.c	/^LUA_API void lua_concat (lua_State *L, int n) {$/;"	f	typeref:typename:LUA_API void
lua_concat	lua.h	/^LUA_API void  (lua_concat) (lua_State *L, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int n)
lua_copy	lapi.c	/^LUA_API void lua_copy (lua_State *L, int fromidx, int toidx) {$/;"	f	typeref:typename:LUA_API void
lua_copy	lua.h	/^LUA_API void  (lua_copy) (lua_State *L, int fromidx, int toidx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int fromidx,int toidx)
lua_cpcall	luaconf.h	/^#define lua_cpcall(/;"	d
lua_createtable	lapi.c	/^LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f	typeref:typename:LUA_API void
lua_createtable	lua.h	/^LUA_API void  (lua_createtable) (lua_State *L, int narr, int nrec);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int narr,int nrec)
lua_dump	lapi.c	/^LUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data, int strip) {$/;"	f	typeref:typename:LUA_API int
lua_dump	lua.h	/^LUA_API int (lua_dump) (lua_State *L, lua_Writer writer, void *data, int strip);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,lua_Writer writer,void * data,int strip)
lua_equal	luaconf.h	/^#define lua_equal(/;"	d
lua_error	lapi.c	/^LUA_API int lua_error (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_error	lua.h	/^LUA_API int   (lua_error) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_freeline	lua.c	/^#define lua_freeline(/;"	d	file:
lua_gc	lapi.c	/^LUA_API int lua_gc (lua_State *L, int what, int data) {$/;"	f	typeref:typename:LUA_API int
lua_gc	lua.h	/^LUA_API int (lua_gc) (lua_State *L, int what, int data);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int what,int data)
lua_getallocf	lapi.c	/^LUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f	typeref:typename:LUA_API lua_Alloc
lua_getextraspace	lua.h	/^#define lua_getextraspace(/;"	d
lua_getfield	lapi.c	/^LUA_API int lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f	typeref:typename:LUA_API int
lua_getfield	lua.h	/^LUA_API int (lua_getfield) (lua_State *L, int idx, const char *k);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx,const char * k)
lua_getglobal	lapi.c	/^LUA_API int lua_getglobal (lua_State *L, const char *name) {$/;"	f	typeref:typename:LUA_API int
lua_getglobal	lua.h	/^LUA_API int (lua_getglobal) (lua_State *L, const char *name);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,const char * name)
lua_gethook	ldebug.c	/^LUA_API lua_Hook lua_gethook (lua_State *L) {$/;"	f	typeref:typename:LUA_API lua_Hook
lua_gethookcount	ldebug.c	/^LUA_API int lua_gethookcount (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_gethookcount	lua.h	/^LUA_API int (lua_gethookcount) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_gethookmask	ldebug.c	/^LUA_API int lua_gethookmask (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_gethookmask	lua.h	/^LUA_API int (lua_gethookmask) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_geti	lapi.c	/^LUA_API int lua_geti (lua_State *L, int idx, lua_Integer n) {$/;"	f	typeref:typename:LUA_API int
lua_geti	lua.h	/^LUA_API int (lua_geti) (lua_State *L, int idx, lua_Integer n);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx,lua_Integer n)
lua_getinfo	ldebug.c	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f	typeref:typename:LUA_API int
lua_getinfo	lua.h	/^LUA_API int (lua_getinfo) (lua_State *L, const char *what, lua_Debug *ar);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,const char * what,lua_Debug * ar)
lua_getlocal	ldebug.c	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_getlocal	lua.h	/^LUA_API const char *(lua_getlocal) (lua_State *L, const lua_Debug *ar, int n);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const lua_Debug * ar,int n)
lua_getlocaledecpoint	luaconf.h	/^#define lua_getlocaledecpoint(/;"	d
lua_getmetatable	lapi.c	/^LUA_API int lua_getmetatable (lua_State *L, int objindex) {$/;"	f	typeref:typename:LUA_API int
lua_getmetatable	lua.h	/^LUA_API int   (lua_getmetatable) (lua_State *L, int objindex);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int objindex)
lua_getstack	ldebug.c	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f	typeref:typename:LUA_API int
lua_getstack	lua.h	/^LUA_API int (lua_getstack) (lua_State *L, int level, lua_Debug *ar);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int level,lua_Debug * ar)
lua_gettable	lapi.c	/^LUA_API int lua_gettable (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_gettable	lua.h	/^LUA_API int (lua_gettable) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_gettop	lapi.c	/^LUA_API int lua_gettop (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_gettop	lua.h	/^LUA_API int   (lua_gettop) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_getupvalue	lapi.c	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_getupvalue	lua.h	/^LUA_API const char *(lua_getupvalue) (lua_State *L, int funcindex, int n);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,int funcindex,int n)
lua_getuservalue	lapi.c	/^LUA_API int lua_getuservalue (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_getuservalue	lua.h	/^LUA_API int  (lua_getuservalue) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_h	lua.h	/^#define lua_h$/;"	d
lua_ident	lapi.c	/^const char lua_ident[] =$/;"	v	typeref:typename:const char[]
lua_insert	lua.h	/^#define lua_insert(/;"	d
lua_integer2str	luaconf.h	/^#define lua_integer2str(/;"	d
lua_isboolean	lua.h	/^#define lua_isboolean(/;"	d
lua_iscfunction	lapi.c	/^LUA_API int lua_iscfunction (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_iscfunction	lua.h	/^LUA_API int             (lua_iscfunction) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_isfunction	lua.h	/^#define lua_isfunction(/;"	d
lua_isinteger	lapi.c	/^LUA_API int lua_isinteger (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isinteger	lua.h	/^LUA_API int             (lua_isinteger) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_islightuserdata	lua.h	/^#define lua_islightuserdata(/;"	d
lua_isnil	lua.h	/^#define lua_isnil(/;"	d
lua_isnone	lua.h	/^#define lua_isnone(/;"	d
lua_isnoneornil	lua.h	/^#define lua_isnoneornil(/;"	d
lua_isnumber	lapi.c	/^LUA_API int lua_isnumber (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isnumber	lua.h	/^LUA_API int             (lua_isnumber) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_isstring	lapi.c	/^LUA_API int lua_isstring (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isstring	lua.h	/^LUA_API int             (lua_isstring) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_istable	lua.h	/^#define lua_istable(/;"	d
lua_isthread	lua.h	/^#define lua_isthread(/;"	d
lua_isuserdata	lapi.c	/^LUA_API int lua_isuserdata (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_isuserdata	lua.h	/^LUA_API int             (lua_isuserdata) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_isyieldable	ldo.c	/^LUA_API int lua_isyieldable (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_isyieldable	lua.h	/^LUA_API int (lua_isyieldable) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_len	lapi.c	/^LUA_API void lua_len (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_len	lua.h	/^LUA_API void  (lua_len)    (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_lessthan	luaconf.h	/^#define lua_lessthan(/;"	d
lua_load	lapi.c	/^LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f	typeref:typename:LUA_API int
lua_load	lua.h	/^LUA_API int   (lua_load) (lua_State *L, lua_Reader reader, void *dt,$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,lua_Reader reader,void * dt,const char * chunkname,const char * mode)
lua_lock	llimits.h	/^#define lua_lock(/;"	d
lua_longassert	llimits.h	/^#define lua_longassert(/;"	d
lua_longjmp	ldo.c	/^struct lua_longjmp {$/;"	s	file:
lua_main	lua.c	/^lua_main (int argc, char **argv, int d)$/;"	f	typeref:typename:int
lua_newstate	lstate.c	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f	typeref:typename:LUA_API lua_State *
lua_newstate	lua.h	/^LUA_API lua_State *(lua_newstate) (lua_Alloc f, void *ud);$/;"	v	typeref:typename:LUA_API lua_State * ()(lua_Alloc f,void * ud)
lua_newtable	lua.h	/^#define lua_newtable(/;"	d
lua_newthread	lstate.c	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f	typeref:typename:LUA_API lua_State *
lua_newthread	lua.h	/^LUA_API lua_State *(lua_newthread) (lua_State *L);$/;"	v	typeref:typename:LUA_API lua_State * ()(lua_State * L)
lua_newuserdata	lapi.c	/^LUA_API void *lua_newuserdata (lua_State *L, size_t size) {$/;"	f	typeref:typename:LUA_API void *
lua_newuserdata	lua.h	/^LUA_API void *(lua_newuserdata) (lua_State *L, size_t sz);$/;"	v	typeref:typename:LUA_API void * ()(lua_State * L,size_t sz)
lua_next	lapi.c	/^LUA_API int lua_next (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_next	lua.h	/^LUA_API int   (lua_next) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_number2str	luaconf.h	/^#define lua_number2str(/;"	d
lua_number2strx	lstrlib.c	/^static int lua_number2strx (lua_State *L, char *buff, int sz,$/;"	f	typeref:typename:int	file:
lua_number2strx	luaconf.h	/^#define lua_number2strx(/;"	d
lua_numbertointeger	luaconf.h	/^#define lua_numbertointeger(/;"	d
lua_objlen	luaconf.h	/^#define lua_objlen(/;"	d
lua_pcall	lua.h	/^#define lua_pcall(/;"	d
lua_pcallk	lapi.c	/^LUA_API int lua_pcallk (lua_State *L, int nargs, int nresults, int errfunc,$/;"	f	typeref:typename:LUA_API int
lua_pcallk	lua.h	/^LUA_API int   (lua_pcallk) (lua_State *L, int nargs, int nresults, int errfunc,$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int nargs,int nresults,int errfunc,lua_KContext ctx,lua_KFunction k)
lua_pointer2str	luaconf.h	/^#define lua_pointer2str(/;"	d
lua_pop	lua.h	/^#define lua_pop(/;"	d
lua_pushboolean	lapi.c	/^LUA_API void lua_pushboolean (lua_State *L, int b) {$/;"	f	typeref:typename:LUA_API void
lua_pushboolean	lua.h	/^LUA_API void  (lua_pushboolean) (lua_State *L, int b);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int b)
lua_pushcclosure	lapi.c	/^LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f	typeref:typename:LUA_API void
lua_pushcclosure	lua.h	/^LUA_API void  (lua_pushcclosure) (lua_State *L, lua_CFunction fn, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_CFunction fn,int n)
lua_pushcfunction	lua.h	/^#define lua_pushcfunction(/;"	d
lua_pushfstring	lapi.c	/^LUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f	typeref:typename:LUA_API const char *
lua_pushfstring	lua.h	/^LUA_API const char *(lua_pushfstring) (lua_State *L, const char *fmt, ...);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const char * fmt,...)
lua_pushglobaltable	lua.h	/^#define lua_pushglobaltable(/;"	d
lua_pushinteger	lapi.c	/^LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f	typeref:typename:LUA_API void
lua_pushinteger	lua.h	/^LUA_API void        (lua_pushinteger) (lua_State *L, lua_Integer n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_Integer n)
lua_pushlightuserdata	lapi.c	/^LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f	typeref:typename:LUA_API void
lua_pushlightuserdata	lua.h	/^LUA_API void  (lua_pushlightuserdata) (lua_State *L, void *p);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,void * p)
lua_pushliteral	lua.h	/^#define lua_pushliteral(/;"	d
lua_pushlstring	lapi.c	/^LUA_API const char *lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f	typeref:typename:LUA_API const char *
lua_pushlstring	lua.h	/^LUA_API const char *(lua_pushlstring) (lua_State *L, const char *s, size_t len);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const char * s,size_t len)
lua_pushnil	lapi.c	/^LUA_API void lua_pushnil (lua_State *L) {$/;"	f	typeref:typename:LUA_API void
lua_pushnil	lua.h	/^LUA_API void        (lua_pushnil) (lua_State *L);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L)
lua_pushnumber	lapi.c	/^LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f	typeref:typename:LUA_API void
lua_pushnumber	lua.h	/^LUA_API void        (lua_pushnumber) (lua_State *L, lua_Number n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_Number n)
lua_pushstring	lapi.c	/^LUA_API const char *lua_pushstring (lua_State *L, const char *s) {$/;"	f	typeref:typename:LUA_API const char *
lua_pushstring	lua.h	/^LUA_API const char *(lua_pushstring) (lua_State *L, const char *s);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const char * s)
lua_pushthread	lapi.c	/^LUA_API int lua_pushthread (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_pushthread	lua.h	/^LUA_API int   (lua_pushthread) (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_pushunsigned	lua.h	/^#define lua_pushunsigned(/;"	d
lua_pushvalue	lapi.c	/^LUA_API void lua_pushvalue (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_pushvalue	lua.h	/^LUA_API void  (lua_pushvalue) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_pushvfstring	lapi.c	/^LUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f	typeref:typename:LUA_API const char *
lua_pushvfstring	lua.h	/^LUA_API const char *(lua_pushvfstring) (lua_State *L, const char *fmt,$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const char * fmt,va_list argp)
lua_rawequal	lapi.c	/^LUA_API int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f	typeref:typename:LUA_API int
lua_rawequal	lua.h	/^LUA_API int   (lua_rawequal) (lua_State *L, int idx1, int idx2);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx1,int idx2)
lua_rawget	lapi.c	/^LUA_API int lua_rawget (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_rawget	lua.h	/^LUA_API int (lua_rawget) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_rawgeti	lapi.c	/^LUA_API int lua_rawgeti (lua_State *L, int idx, lua_Integer n) {$/;"	f	typeref:typename:LUA_API int
lua_rawgeti	lua.h	/^LUA_API int (lua_rawgeti) (lua_State *L, int idx, lua_Integer n);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx,lua_Integer n)
lua_rawgetp	lapi.c	/^LUA_API int lua_rawgetp (lua_State *L, int idx, const void *p) {$/;"	f	typeref:typename:LUA_API int
lua_rawgetp	lua.h	/^LUA_API int (lua_rawgetp) (lua_State *L, int idx, const void *p);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx,const void * p)
lua_rawlen	lapi.c	/^LUA_API size_t lua_rawlen (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API size_t
lua_rawset	lapi.c	/^LUA_API void lua_rawset (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_rawset	lua.h	/^LUA_API void  (lua_rawset) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_rawseti	lapi.c	/^LUA_API void lua_rawseti (lua_State *L, int idx, lua_Integer n) {$/;"	f	typeref:typename:LUA_API void
lua_rawseti	lua.h	/^LUA_API void  (lua_rawseti) (lua_State *L, int idx, lua_Integer n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,lua_Integer n)
lua_rawsetp	lapi.c	/^LUA_API void lua_rawsetp (lua_State *L, int idx, const void *p) {$/;"	f	typeref:typename:LUA_API void
lua_rawsetp	lua.h	/^LUA_API void  (lua_rawsetp) (lua_State *L, int idx, const void *p);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,const void * p)
lua_readline	lua.c	/^#define lua_readline(/;"	d	file:
lua_register	lua.h	/^#define lua_register(/;"	d
lua_remove	lua.h	/^#define lua_remove(/;"	d
lua_replace	lua.h	/^#define lua_replace(/;"	d
lua_resume	ldo.c	/^LUA_API int lua_resume (lua_State *L, lua_State *from, int nargs) {$/;"	f	typeref:typename:LUA_API int
lua_resume	lua.h	/^LUA_API int  (lua_resume)     (lua_State *L, lua_State *from, int narg);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,lua_State * from,int narg)
lua_rotate	lapi.c	/^LUA_API void lua_rotate (lua_State *L, int idx, int n) {$/;"	f	typeref:typename:LUA_API void
lua_rotate	lua.h	/^LUA_API void  (lua_rotate) (lua_State *L, int idx, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,int n)
lua_saveline	lua.c	/^#define lua_saveline(/;"	d	file:
lua_setallocf	lapi.c	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f	typeref:typename:LUA_API void
lua_setallocf	lua.h	/^LUA_API void      (lua_setallocf) (lua_State *L, lua_Alloc f, void *ud);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_Alloc f,void * ud)
lua_setfield	lapi.c	/^LUA_API void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f	typeref:typename:LUA_API void
lua_setfield	lua.h	/^LUA_API void  (lua_setfield) (lua_State *L, int idx, const char *k);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,const char * k)
lua_setglobal	lapi.c	/^LUA_API void lua_setglobal (lua_State *L, const char *name) {$/;"	f	typeref:typename:LUA_API void
lua_setglobal	lua.h	/^LUA_API void  (lua_setglobal) (lua_State *L, const char *name);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,const char * name)
lua_sethook	ldebug.c	/^LUA_API void lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f	typeref:typename:LUA_API void
lua_sethook	lua.h	/^LUA_API void (lua_sethook) (lua_State *L, lua_Hook func, int mask, int count);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,lua_Hook func,int mask,int count)
lua_seti	lapi.c	/^LUA_API void lua_seti (lua_State *L, int idx, lua_Integer n) {$/;"	f	typeref:typename:LUA_API void
lua_seti	lua.h	/^LUA_API void  (lua_seti) (lua_State *L, int idx, lua_Integer n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx,lua_Integer n)
lua_setlocal	ldebug.c	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_setlocal	lua.h	/^LUA_API const char *(lua_setlocal) (lua_State *L, const lua_Debug *ar, int n);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,const lua_Debug * ar,int n)
lua_setmetatable	lapi.c	/^LUA_API int lua_setmetatable (lua_State *L, int objindex) {$/;"	f	typeref:typename:LUA_API int
lua_setmetatable	lua.h	/^LUA_API int   (lua_setmetatable) (lua_State *L, int objindex);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int objindex)
lua_settable	lapi.c	/^LUA_API void lua_settable (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_settable	lua.h	/^LUA_API void  (lua_settable) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_settop	lapi.c	/^LUA_API void lua_settop (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_settop	lua.h	/^LUA_API void  (lua_settop) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_setupvalue	lapi.c	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f	typeref:typename:LUA_API const char *
lua_setupvalue	lua.h	/^LUA_API const char *(lua_setupvalue) (lua_State *L, int funcindex, int n);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,int funcindex,int n)
lua_setuservalue	lapi.c	/^LUA_API void lua_setuservalue (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void
lua_setuservalue	lua.h	/^LUA_API void  (lua_setuservalue) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int idx)
lua_status	lapi.c	/^LUA_API int lua_status (lua_State *L) {$/;"	f	typeref:typename:LUA_API int
lua_status	lua.h	/^LUA_API int  (lua_status)     (lua_State *L);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L)
lua_stdin_is_tty	lua.c	/^#define lua_stdin_is_tty(/;"	d	file:
lua_str2number	luaconf.h	/^#define lua_str2number(/;"	d
lua_stringtonumber	lapi.c	/^LUA_API size_t lua_stringtonumber (lua_State *L, const char *s) {$/;"	f	typeref:typename:LUA_API size_t
lua_strlen	luaconf.h	/^#define lua_strlen(/;"	d
lua_strx2number	lobject.c	/^static lua_Number lua_strx2number (const char *s, char **endptr) {$/;"	f	typeref:typename:lua_Number	file:
lua_strx2number	luaconf.h	/^#define lua_strx2number(/;"	d
lua_tmpnam	loslib.c	/^#define lua_tmpnam(/;"	d	file:
lua_toboolean	lapi.c	/^LUA_API int lua_toboolean (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_toboolean	lua.h	/^LUA_API int             (lua_toboolean) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_tocfunction	lapi.c	/^LUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API lua_CFunction
lua_tointeger	lua.h	/^#define lua_tointeger(/;"	d
lua_tointegerx	lapi.c	/^LUA_API lua_Integer lua_tointegerx (lua_State *L, int idx, int *pisnum) {$/;"	f	typeref:typename:LUA_API lua_Integer
lua_tolstring	lapi.c	/^LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f	typeref:typename:LUA_API const char *
lua_tolstring	lua.h	/^LUA_API const char     *(lua_tolstring) (lua_State *L, int idx, size_t *len);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,int idx,size_t * len)
lua_tonumber	lua.h	/^#define lua_tonumber(/;"	d
lua_tonumberx	lapi.c	/^LUA_API lua_Number lua_tonumberx (lua_State *L, int idx, int *pisnum) {$/;"	f	typeref:typename:LUA_API lua_Number
lua_topointer	lapi.c	/^LUA_API const void *lua_topointer (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API const void *
lua_topointer	lua.h	/^LUA_API const void     *(lua_topointer) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API const void * ()(lua_State * L,int idx)
lua_tostring	lua.h	/^#define lua_tostring(/;"	d
lua_tothread	lapi.c	/^LUA_API lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API lua_State *
lua_tothread	lua.h	/^LUA_API lua_State      *(lua_tothread) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API lua_State * ()(lua_State * L,int idx)
lua_tounsigned	lua.h	/^#define lua_tounsigned(/;"	d
lua_tounsignedx	lua.h	/^#define lua_tounsignedx(/;"	d
lua_touserdata	lapi.c	/^LUA_API void *lua_touserdata (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API void *
lua_touserdata	lua.h	/^LUA_API void	       *(lua_touserdata) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API void * ()(lua_State * L,int idx)
lua_type	lapi.c	/^LUA_API int lua_type (lua_State *L, int idx) {$/;"	f	typeref:typename:LUA_API int
lua_type	lua.h	/^LUA_API int             (lua_type) (lua_State *L, int idx);$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int idx)
lua_typename	lapi.c	/^LUA_API const char *lua_typename (lua_State *L, int t) {$/;"	f	typeref:typename:LUA_API const char *
lua_typename	lua.h	/^LUA_API const char     *(lua_typename) (lua_State *L, int tp);$/;"	v	typeref:typename:LUA_API const char * ()(lua_State * L,int tp)
lua_unlock	llimits.h	/^#define lua_unlock(/;"	d
lua_upvalueid	lapi.c	/^LUA_API void *lua_upvalueid (lua_State *L, int fidx, int n) {$/;"	f	typeref:typename:LUA_API void *
lua_upvalueid	lua.h	/^LUA_API void *(lua_upvalueid) (lua_State *L, int fidx, int n);$/;"	v	typeref:typename:LUA_API void * ()(lua_State * L,int fidx,int n)
lua_upvalueindex	lua.h	/^#define lua_upvalueindex(/;"	d
lua_upvaluejoin	lapi.c	/^LUA_API void lua_upvaluejoin (lua_State *L, int fidx1, int n1,$/;"	f	typeref:typename:LUA_API void
lua_upvaluejoin	lua.h	/^LUA_API void  (lua_upvaluejoin) (lua_State *L, int fidx1, int n1,$/;"	v	typeref:typename:LUA_API void ()(lua_State * L,int fidx1,int n1,int fidx2,int n2)
lua_version	lapi.c	/^LUA_API const lua_Number *lua_version (lua_State *L) {$/;"	f	typeref:typename:LUA_API const lua_Number *
lua_version	lua.h	/^LUA_API const lua_Number *(lua_version) (lua_State *L);$/;"	v	typeref:typename:LUA_API const lua_Number * ()(lua_State * L)
lua_vm	lua.c	/^int lua_vm (int argc, char **argv) {$/;"	f	typeref:typename:int
lua_writeline	lauxlib.h	/^#define lua_writeline(/;"	d
lua_writestring	lauxlib.h	/^#define lua_writestring(/;"	d
lua_writestringerror	lauxlib.h	/^#define lua_writestringerror(/;"	d
lua_xmove	lapi.c	/^LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f	typeref:typename:LUA_API void
lua_xmove	lua.h	/^LUA_API void  (lua_xmove) (lua_State *from, lua_State *to, int n);$/;"	v	typeref:typename:LUA_API void ()(lua_State * from,lua_State * to,int n)
lua_yield	lua.h	/^#define lua_yield(/;"	d
lua_yieldk	ldo.c	/^LUA_API int lua_yieldk (lua_State *L, int nresults, lua_KContext ctx,$/;"	f	typeref:typename:LUA_API int
lua_yieldk	lua.h	/^LUA_API int  (lua_yieldk)     (lua_State *L, int nresults, lua_KContext ctx,$/;"	v	typeref:typename:LUA_API int ()(lua_State * L,int nresults,lua_KContext ctx,lua_KFunction k)
luac.o	Makefile	/^luac.o: luac.c lprefix.h lua.h luaconf.h lauxlib.h lobject.h llimits.h \\$/;"	t
luac_c	luac.c	/^#define luac_c$/;"	d	file:
luaconf_h	luaconf.h	/^#define luaconf_h$/;"	d
luai_apicheck	llimits.h	/^#define luai_apicheck(/;"	d
luai_apicheck	luaconf.h	/^#define luai_apicheck(/;"	d
luai_ctype_	lctype.c	/^LUAI_DDEF const lu_byte luai_ctype_[UCHAR_MAX + 2] = {$/;"	v	typeref:typename:LUAI_DDEF const lu_byte[]
luai_ctype_	lctype.h	/^LUAI_DDEC const lu_byte luai_ctype_[UCHAR_MAX + 2];$/;"	v	typeref:typename:LUAI_DDEC const lu_byte[]
luai_jmpbuf	ldo.c	/^#define luai_jmpbuf	/;"	d	file:
luai_makeseed	lstate.c	/^#define luai_makeseed(/;"	d	file:
luai_numadd	llimits.h	/^#define luai_numadd(/;"	d
luai_numdiv	llimits.h	/^#define luai_numdiv(/;"	d
luai_numeq	llimits.h	/^#define luai_numeq(/;"	d
luai_numidiv	llimits.h	/^#define luai_numidiv(/;"	d
luai_numisnan	llimits.h	/^#define luai_numisnan(/;"	d
luai_numle	llimits.h	/^#define luai_numle(/;"	d
luai_numlt	llimits.h	/^#define luai_numlt(/;"	d
luai_nummod	llimits.h	/^#define luai_nummod(/;"	d
luai_nummul	llimits.h	/^#define luai_nummul(/;"	d
luai_numpow	llimits.h	/^#define luai_numpow(/;"	d
luai_numsub	llimits.h	/^#define luai_numsub(/;"	d
luai_numunm	llimits.h	/^#define luai_numunm(/;"	d
luai_threadyield	llimits.h	/^#define luai_threadyield(/;"	d
luai_userstateclose	llimits.h	/^#define luai_userstateclose(/;"	d
luai_userstatefree	llimits.h	/^#define luai_userstatefree(/;"	d
luai_userstateopen	llimits.h	/^#define luai_userstateopen(/;"	d
luai_userstateresume	llimits.h	/^#define luai_userstateresume(/;"	d
luai_userstatethread	llimits.h	/^#define luai_userstatethread(/;"	d
luai_userstateyield	llimits.h	/^#define luai_userstateyield(/;"	d
luai_verifycode	lundump.c	/^#define luai_verifycode(/;"	d	file:
lualib_h	lualib.h	/^#define lualib_h$/;"	d
luaopen_base	lbaselib.c	/^LUAMOD_API int luaopen_base (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_base	lualib.h	/^LUAMOD_API int (luaopen_base) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_bit32	lbitlib.c	/^LUAMOD_API int luaopen_bit32 (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_bit32	lualib.h	/^LUAMOD_API int (luaopen_bit32) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_coroutine	lcorolib.c	/^LUAMOD_API int luaopen_coroutine (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_coroutine	lualib.h	/^LUAMOD_API int (luaopen_coroutine) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_debug	ldblib.c	/^LUAMOD_API int luaopen_debug (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_debug	lualib.h	/^LUAMOD_API int (luaopen_debug) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_io	liolib.c	/^LUAMOD_API int luaopen_io (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_io	lualib.h	/^LUAMOD_API int (luaopen_io) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_math	lmathlib.c	/^LUAMOD_API int luaopen_math (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_math	lualib.h	/^LUAMOD_API int (luaopen_math) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_os	loslib.c	/^LUAMOD_API int luaopen_os (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_os	lualib.h	/^LUAMOD_API int (luaopen_os) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_package	loadlib.c	/^LUAMOD_API int luaopen_package (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_package	lualib.h	/^LUAMOD_API int (luaopen_package) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_string	lstrlib.c	/^LUAMOD_API int luaopen_string (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_string	lualib.h	/^LUAMOD_API int (luaopen_string) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_table	ltablib.c	/^LUAMOD_API int luaopen_table (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
luaopen_table	lualib.h	/^LUAMOD_API int (luaopen_table) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_utf8	lualib.h	/^LUAMOD_API int (luaopen_utf8) (lua_State *L);$/;"	v	typeref:typename:LUAMOD_API int ()(lua_State * L)
luaopen_utf8	lutf8lib.c	/^LUAMOD_API int luaopen_utf8 (lua_State *L) {$/;"	f	typeref:typename:LUAMOD_API int
lundump.o	Makefile	/^lundump.o: lundump.c lprefix.h lua.h luaconf.h ldebug.h lstate.h \\$/;"	t
lundump_c	lundump.c	/^#define lundump_c$/;"	d	file:
lundump_h	lundump.h	/^#define lundump_h$/;"	d
lutf8lib.o	Makefile	/^lutf8lib.o: lutf8lib.c lprefix.h lua.h luaconf.h lauxlib.h lualib.h$/;"	t
lutf8lib_c	lutf8lib.c	/^#define lutf8lib_c$/;"	d	file:
lvm.o	Makefile	/^lvm.o: lvm.c lprefix.h lua.h luaconf.h ldebug.h lstate.h lobject.h \\$/;"	t
lvm_c	lvm.c	/^#define lvm_c$/;"	d	file:
lvm_h	lvm.h	/^#define lvm_h$/;"	d
lzio.o	Makefile	/^lzio.o: lzio.c lprefix.h lua.h luaconf.h llimits.h lmem.h lstate.h \\$/;"	t
lzio_c	lzio.c	/^#define lzio_c$/;"	d	file:
lzio_h	lzio.h	/^#define lzio_h$/;"	d
macosx	Makefile	/^macosx:$/;"	t
main	lua.c	/^int main (int argc, char **argv) { return lua_vm(argc, argv);}$/;"	f	typeref:typename:int
main	luac.c	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	test.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
mainfunc	lparser.c	/^static void mainfunc (LexState *ls, FuncState *fs) {$/;"	f	typeref:typename:void	file:
mainposition	ltable.c	/^static Node *mainposition (const Table *t, const TValue *key) {$/;"	f	typeref:typename:Node *	file:
mainthread	lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:lua_State *
makemask	ldblib.c	/^static int makemask (const char *smask, int count) {$/;"	f	typeref:typename:int	file:
makeseed	lstate.c	/^static unsigned int makeseed (lua_State *L) {$/;"	f	typeref:typename:unsigned int	file:
makewhite	lgc.c	/^#define makewhite(/;"	d	file:
markbeingfnz	lgc.c	/^static void markbeingfnz (global_State *g) {$/;"	f	typeref:typename:void	file:
marklen	lua.c	/^#define marklen	/;"	d	file:
markmt	lgc.c	/^static void markmt (global_State *g) {$/;"	f	typeref:typename:void	file:
markobject	lgc.c	/^#define markobject(/;"	d	file:
markobjectN	lgc.c	/^#define markobjectN(/;"	d	file:
markupval	lparser.c	/^static void markupval (FuncState *fs, int level) {$/;"	f	typeref:typename:void	file:
markvalue	lgc.c	/^#define markvalue(/;"	d	file:
mask	lbitlib.c	/^#define mask(/;"	d	file:
maskcolors	lgc.c	/^#define maskcolors	/;"	d	file:
match	lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f	typeref:typename:const char *	file:
match_capture	lstrlib.c	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f	typeref:typename:const char *	file:
match_class	lstrlib.c	/^static int match_class (int c, int cl) {$/;"	f	typeref:typename:int	file:
matchbalance	lstrlib.c	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
matchbracketclass	lstrlib.c	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f	typeref:typename:int	file:
matchdepth	lstrlib.c	/^  int matchdepth;  \/* control for recursive depth (to avoid C stack overflow) *\/$/;"	m	struct:MatchState	typeref:typename:int	file:
math_abs	lmathlib.c	/^static int math_abs (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_acos	lmathlib.c	/^static int math_acos (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_asin	lmathlib.c	/^static int math_asin (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_atan	lmathlib.c	/^static int math_atan (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_ceil	lmathlib.c	/^static int math_ceil (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_cos	lmathlib.c	/^static int math_cos (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_cosh	lmathlib.c	/^static int math_cosh (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_deg	lmathlib.c	/^static int math_deg (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_exp	lmathlib.c	/^static int math_exp (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_floor	lmathlib.c	/^static int math_floor (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_fmod	lmathlib.c	/^static int math_fmod (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_frexp	lmathlib.c	/^static int math_frexp (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_ldexp	lmathlib.c	/^static int math_ldexp (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_log	lmathlib.c	/^static int math_log (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_log10	lmathlib.c	/^static int math_log10 (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_max	lmathlib.c	/^static int math_max (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_min	lmathlib.c	/^static int math_min (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_modf	lmathlib.c	/^static int math_modf (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_pow	lmathlib.c	/^static int math_pow (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_rad	lmathlib.c	/^static int math_rad (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_random	lmathlib.c	/^static int math_random (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_randomseed	lmathlib.c	/^static int math_randomseed (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_sin	lmathlib.c	/^static int math_sin (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_sinh	lmathlib.c	/^static int math_sinh (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_sqrt	lmathlib.c	/^static int math_sqrt (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_tan	lmathlib.c	/^static int math_tan (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_tanh	lmathlib.c	/^static int math_tanh (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_toint	lmathlib.c	/^static int math_toint (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_type	lmathlib.c	/^static int math_type (lua_State *L) {$/;"	f	typeref:typename:int	file:
math_ult	lmathlib.c	/^static int math_ult (lua_State *L) {$/;"	f	typeref:typename:int	file:
mathlib	lmathlib.c	/^static const luaL_Reg mathlib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
max_expand	lstrlib.c	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
maxalign	lstrlib.c	/^  int maxalign;$/;"	m	struct:Header	typeref:typename:int	file:
maxn	ltablib.c	/^static int maxn (lua_State *L) {$/;"	f	typeref:typename:int	file:
maxstacksize	lobject.h	/^  lu_byte maxstacksize;  \/* number of registers needed by this function *\/$/;"	m	struct:Proto	typeref:typename:lu_byte
memerrmsg	lstate.h	/^  TString *memerrmsg;  \/* memory-error message *\/$/;"	m	struct:global_State	typeref:typename:TString *
metatable	lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table *
metatable	lobject.h	/^  struct Table *metatable;$/;"	m	struct:Udata	typeref:struct:Table *
min_expand	lstrlib.c	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
mingw	Makefile	/^mingw:$/;"	t
mode	ldo.c	/^  const char *mode;$/;"	m	struct:SParser	typeref:typename:const char *	file:
modinit	loadlib.c	/^static void modinit (lua_State *L, const char *modname) {$/;"	f	typeref:typename:void	file:
movegotosout	lparser.c	/^static void movegotosout (FuncState *fs, BlockCnt *bl) {$/;"	f	typeref:typename:void	file:
moveresults	ldo.c	/^static int moveresults (lua_State *L, const TValue *firstResult, StkId res,$/;"	f	typeref:typename:int	file:
ms	lstrlib.c	/^  MatchState ms;  \/* match state *\/$/;"	m	struct:GMatchState	typeref:typename:MatchState	file:
msghandler	lua.c	/^static int msghandler (lua_State *L) {$/;"	f	typeref:typename:int	file:
mt	lstate.h	/^  struct Table *mt[LUA_NUMTAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:Table * []
multiline	lua.c	/^static int multiline (lua_State *L) {$/;"	f	typeref:typename:int	file:
n	lauxlib.c	/^  int n;  \/* number of pre-read characters *\/$/;"	m	struct:LoadF	typeref:typename:int	file:
n	lauxlib.h	/^  size_t n;  \/* number of characters in buffer *\/$/;"	m	struct:luaL_Buffer	typeref:typename:size_t
n	liolib.c	/^  int n;  \/* number of elements in buffer 'buff' *\/$/;"	m	struct:__anonc4e633510108	typeref:typename:int	file:
n	llimits.h	/^  lua_Number n;$/;"	m	union:__anon5af4d619010a	typeref:typename:lua_Number
n	lobject.h	/^  lua_Number n;    \/* float numbers *\/$/;"	m	union:Value	typeref:typename:lua_Number
n	lparser.h	/^    int n;$/;"	m	struct:Dyndata::__anonb080c5d40408	typeref:typename:int
n	lparser.h	/^  int n;  \/* number of entries in use *\/$/;"	m	struct:Labellist	typeref:typename:int
n	lstrlib.c	/^  lua_Number n;$/;"	m	union:Ftypes	typeref:typename:lua_Number	file:
n	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon2b5c08b2030a	typeref:typename:lua_Number	file:
n	lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio	typeref:typename:size_t
n	lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer	typeref:typename:size_t
nCcalls	lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State	typeref:typename:unsigned short
na	lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	typeref:typename:int	file:
nactvar	lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the block *\/$/;"	m	struct:BlockCnt	typeref:typename:lu_byte	file:
nactvar	lparser.h	/^  lu_byte nactvar;  \/* local level where it appears in current block *\/$/;"	m	struct:Labeldesc	typeref:typename:lu_byte
nactvar	lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState	typeref:typename:lu_byte
name	lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg	typeref:typename:const char *
name	ldo.c	/^  const char *name;$/;"	m	struct:SParser	typeref:typename:const char *	file:
name	lobject.h	/^  TString *name;  \/* upvalue name (for debug information) *\/$/;"	m	struct:Upvaldesc	typeref:typename:TString *
name	lparser.h	/^  TString *name;  \/* label identifier *\/$/;"	m	struct:Labeldesc	typeref:typename:TString *
name	lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
name	lundump.c	/^  const char *name;$/;"	m	struct:__anon15ff56bb0108	typeref:typename:const char *	file:
namewhat	lua.h	/^  const char *namewhat;	\/* (n) 'global', 'local', 'field', 'method' *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
nativeendian	lstrlib.c	/^} nativeendian = {1};$/;"	v	typeref:typename:const union __anon2b5c08b2020a
nci	lstate.h	/^  unsigned short nci;  \/* number of items in 'ci' list *\/$/;"	m	struct:lua_State	typeref:typename:unsigned short
need_value	lcode.c	/^static int need_value (FuncState *fs, int list) {$/;"	f	typeref:typename:int	file:
negatecondition	lcode.c	/^static void negatecondition (FuncState *fs, expdesc *e) {$/;"	f	typeref:typename:void	file:
new_localvar	lparser.c	/^static void new_localvar (LexState *ls, TString *name) {$/;"	f	typeref:typename:void	file:
new_localvarliteral	lparser.c	/^#define new_localvarliteral(/;"	d	file:
new_localvarliteral_	lparser.c	/^static void new_localvarliteral_ (LexState *ls, const char *name, size_t sz) {$/;"	f	typeref:typename:void	file:
newbox	lauxlib.c	/^static void *newbox (lua_State *L, size_t newsize) {$/;"	f	typeref:typename:void *	file:
newfile	liolib.c	/^static LStream *newfile (lua_State *L) {$/;"	f	typeref:typename:LStream *	file:
newlabelentry	lparser.c	/^static int newlabelentry (LexState *ls, Labellist *l, TString *name,$/;"	f	typeref:typename:int	file:
newprefile	liolib.c	/^static LStream *newprefile (lua_State *L) {$/;"	f	typeref:typename:LStream *	file:
newupvalue	lparser.c	/^static int newupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f	typeref:typename:int	file:
next	lfunc.h	/^      UpVal *next;  \/* linked list *\/$/;"	m	struct:UpVal::__anon73c29f13010a::__anon73c29f130208	typeref:typename:UpVal *
next	llex.c	/^#define next(/;"	d	file:
next	lobject.h	/^    int next;  \/* for chaining (offset for next node) *\/$/;"	m	struct:TKey::__anonfd91815e0208	typeref:typename:int
next	lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo *
next_ci	ldo.c	/^#define next_ci(/;"	d	file:
nextc	liolib.c	/^static int nextc (RN *rn) {$/;"	f	typeref:typename:int	file:
nh	lparser.c	/^  int nh;  \/* total number of 'record' elements *\/$/;"	m	struct:ConsControl	typeref:typename:int	file:
nhsize	ltable.c	/^  unsigned int nhsize;$/;"	m	struct:__anonf24b53aa0108	typeref:typename:unsigned int	file:
nilK	lcode.c	/^static int nilK (FuncState *fs) {$/;"	f	typeref:typename:int	file:
nk	lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anonfd91815e0208
nk	lparser.h	/^  int nk;  \/* number of elements in 'k' *\/$/;"	m	struct:FuncState	typeref:typename:int
nlocvars	lparser.h	/^  short nlocvars;  \/* number of elements in 'f->locvars' *\/$/;"	m	struct:FuncState	typeref:typename:short
nny	lstate.h	/^  unsigned short nny;  \/* number of non-yieldable calls in stack *\/$/;"	m	struct:lua_State	typeref:typename:unsigned short
noLuaClosure	ldebug.c	/^#define noLuaClosure(/;"	d	file:
node	lobject.h	/^  Node *node;$/;"	m	struct:Table	typeref:typename:Node *
noenv	loadlib.c	/^static int noenv (lua_State *L) {$/;"	f	typeref:typename:int	file:
none	Makefile	/^none:$/;"	t
nospecials	lstrlib.c	/^static int nospecials (const char *p, size_t l) {$/;"	f	typeref:typename:int	file:
novariant	lobject.h	/^#define novariant(/;"	d
np	lparser.h	/^  int np;  \/* number of elements in 'p' *\/$/;"	m	struct:FuncState	typeref:typename:int
nparams	lua.h	/^  unsigned char nparams;\/* (u) number of parameters *\/$/;"	m	struct:lua_Debug	typeref:typename:unsigned char
nresults	lapi.c	/^  int nresults;$/;"	m	struct:CallS	typeref:typename:int	file:
nresults	lstate.h	/^  short nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo	typeref:typename:short
num2straux	lstrlib.c	/^static int num2straux (char *buff, int sz, lua_Number x) {$/;"	f	typeref:typename:int	file:
numarith	lobject.c	/^static lua_Number numarith (lua_State *L, int op, lua_Number v1,$/;"	f	typeref:typename:lua_Number	file:
numparams	lobject.h	/^  lu_byte numparams;  \/* number of fixed parameters *\/$/;"	m	struct:Proto	typeref:typename:lu_byte
numusearray	ltable.c	/^static unsigned int numusearray (const Table *t, unsigned int *nums) {$/;"	f	typeref:typename:unsigned int	file:
numusehash	ltable.c	/^static int numusehash (const Table *t, unsigned int *nums, unsigned int *pna) {$/;"	f	typeref:typename:int	file:
nups	lparser.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:FuncState	typeref:typename:lu_byte
nups	lua.h	/^  unsigned char nups;	\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug	typeref:typename:unsigned char
nuse	lstate.h	/^  int nuse;  \/* number of elements *\/$/;"	m	struct:stringtable	typeref:typename:int
nval	lparser.h	/^    lua_Number nval;  \/* for VKFLT *\/$/;"	m	union:expdesc::__anonb080c5d4020a	typeref:typename:lua_Number
nvalue	lobject.h	/^#define nvalue(/;"	d
o	Makefile	/^o:	$(ALL_O)$/;"	t
obj2gco	lstate.h	/^#define obj2gco(/;"	d
old_errfunc	lstate.h	/^      ptrdiff_t old_errfunc;$/;"	m	struct:CallInfo::__anond1956568010a::__anond19565680308	typeref:typename:ptrdiff_t
oldpc	lstate.h	/^  const Instruction *oldpc;  \/* last pc traced *\/$/;"	m	struct:lua_State	typeref:typename:const Instruction *
open	lfunc.h	/^    } open;$/;"	m	union:UpVal::__anon73c29f13010a	typeref:struct:UpVal::__anon73c29f13010a::__anon73c29f130208
open_func	lparser.c	/^static void open_func (LexState *ls, FuncState *fs, BlockCnt *bl) {$/;"	f	typeref:typename:void	file:
opencheck	liolib.c	/^static void opencheck (lua_State *L, const char *fname, const char *mode) {$/;"	f	typeref:typename:void	file:
openupval	lstate.h	/^  UpVal *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State	typeref:typename:UpVal *
opmode	lopcodes.c	/^#define opmode(/;"	d	file:
os_clock	loslib.c	/^static int os_clock (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_date	loslib.c	/^static int os_date (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_difftime	loslib.c	/^static int os_difftime (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_execute	loslib.c	/^static int os_execute (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_exit	loslib.c	/^static int os_exit (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_getenv	loslib.c	/^static int os_getenv (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_remove	loslib.c	/^static int os_remove (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_rename	loslib.c	/^static int os_rename (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_setlocale	loslib.c	/^static int os_setlocale (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_time	loslib.c	/^static int os_time (lua_State *L) {$/;"	f	typeref:typename:int	file:
os_tmpname	loslib.c	/^static int os_tmpname (lua_State *L) {$/;"	f	typeref:typename:int	file:
otherwhite	lgc.h	/^#define otherwhite(/;"	d
output	luac.c	/^static const char* output=Output;	\/* actual output file name *\/$/;"	v	typeref:typename:const char *	file:
output_file	lua.c	/^FILE *output_file = NULL;$/;"	v	typeref:typename:FILE *
p	lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto **
p	lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:Proto *
p	lobject.h	/^  void *p;         \/* light userdata *\/$/;"	m	union:Value	typeref:typename:void *
p	lstate.h	/^  struct Proto p;$/;"	m	union:GCUnion	typeref:struct:Proto
p	lstrlib.c	/^  const char *p;  \/* pattern *\/$/;"	m	struct:GMatchState	typeref:typename:const char *	file:
p	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon2b5c08b2030a	typeref:typename:void *	file:
p	lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio	typeref:typename:const char *
p_end	lstrlib.c	/^  const char *p_end;  \/* end ('\\0') of pattern *\/$/;"	m	struct:MatchState	typeref:typename:const char *	file:
pack	ltablib.c	/^static int pack (lua_State *L) {$/;"	f	typeref:typename:int	file:
packint	lstrlib.c	/^static void packint (luaL_Buffer *b, lua_Unsigned n,$/;"	f	typeref:typename:void	file:
pairsmeta	lbaselib.c	/^static int pairsmeta (lua_State *L, const char *method, int iszero,$/;"	f	typeref:typename:int	file:
panic	lauxlib.c	/^static int panic (lua_State *L) {$/;"	f	typeref:typename:int	file:
panic	lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State	typeref:typename:lua_CFunction
parlist	lparser.c	/^static void parlist (LexState *ls) {$/;"	f	typeref:typename:void	file:
parse_string	lua.c	/^const char *parse_string = \\$/;"	v	typeref:typename:const char *
partition	ltablib.c	/^static IdxT partition (lua_State *L, IdxT lo, IdxT up) {$/;"	f	typeref:typename:IdxT	file:
patchlistaux	lcode.c	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f	typeref:typename:void	file:
patchtestreg	lcode.c	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f	typeref:typename:int	file:
pc	lparser.h	/^  int pc;  \/* next position to code (equivalent to 'ncode') *\/$/;"	m	struct:FuncState	typeref:typename:int
pc	lparser.h	/^  int pc;  \/* position in code *\/$/;"	m	struct:Labeldesc	typeref:typename:int
pcRel	ldebug.h	/^#define pcRel(/;"	d
pk_funcs	loadlib.c	/^static const luaL_Reg pk_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
pmain	lua.c	/^static int pmain (lua_State *L) {$/;"	f	typeref:typename:int	file:
pmain	luac.c	/^static int pmain(lua_State* L)$/;"	f	typeref:typename:int	file:
point2uint	llimits.h	/^#define point2uint(/;"	d
posix	Makefile	/^posix:$/;"	t
posrelat	lstrlib.c	/^static lua_Integer posrelat (lua_Integer pos, size_t len) {$/;"	f	typeref:typename:lua_Integer	file:
preinit_thread	lstate.c	/^static void preinit_thread (lua_State *L, global_State *g) {$/;"	f	typeref:typename:void	file:
prepstate	lstrlib.c	/^static void prepstate (MatchState *ms, lua_State *L,$/;"	f	typeref:typename:void	file:
prev	lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign *	file:
prev	lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState *
previous	ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp *	file:
previous	lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt *	file:
previous	lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo *
primaryexp	lparser.c	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
print_usage	lua.c	/^static void print_usage (const char *badoption) {$/;"	f	typeref:typename:void	file:
print_version	lua.c	/^static void print_version (void) {$/;"	f	typeref:typename:void	file:
priority	lparser.c	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:typename:const struct __anonb080c5cf0108[]
progname	lua.c	/^static const char *progname = LUA_PROGNAME;$/;"	v	typeref:typename:const char *	file:
progname	luac.c	/^static const char* progname=PROGNAME;	\/* actual program name *\/$/;"	v	typeref:typename:const char *	file:
propagateall	lgc.c	/^static void propagateall (global_State *g) {$/;"	f	typeref:typename:void	file:
propagatemark	lgc.c	/^static void propagatemark (global_State *g) {$/;"	f	typeref:typename:void	file:
push_captures	lstrlib.c	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f	typeref:typename:int	file:
push_onecapture	lstrlib.c	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f	typeref:typename:void	file:
pushargs	lua.c	/^static int pushargs (lua_State *L) {$/;"	f	typeref:typename:int	file:
pushclosure	lvm.c	/^static void pushclosure (lua_State *L, Proto *p, UpVal **encup, StkId base,$/;"	f	typeref:typename:void	file:
pusherror	loadlib.c	/^static void pusherror (lua_State *L) {$/;"	f	typeref:typename:void	file:
pushfuncname	lauxlib.c	/^static void pushfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:void	file:
pushglobalfuncname	lauxlib.c	/^static int pushglobalfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	typeref:typename:int	file:
pushline	lua.c	/^static int pushline (lua_State *L, int firstline) {$/;"	f	typeref:typename:int	file:
pushnexttemplate	loadlib.c	/^static const char *pushnexttemplate (lua_State *L, const char *path) {$/;"	f	typeref:typename:const char *	file:
pushnumint	lmathlib.c	/^static void pushnumint (lua_State *L, lua_Number d) {$/;"	f	typeref:typename:void	file:
pushstr	lobject.c	/^static void pushstr (lua_State *L, const char *str, size_t l) {$/;"	f	typeref:typename:void	file:
pushunsigned	lbitlib.c	/^#define pushunsigned(/;"	d	file:
pushutfchar	lutf8lib.c	/^static void pushutfchar (lua_State *L, int arg) {$/;"	f	typeref:typename:void	file:
pvalue	lobject.h	/^#define pvalue(/;"	d
r	llex.h	/^  lua_Number r;$/;"	m	union:__anon0ba7e630010a	typeref:typename:lua_Number
read_all	liolib.c	/^static void read_all (lua_State *L, FILE *f) {$/;"	f	typeref:typename:void	file:
read_chars	liolib.c	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f	typeref:typename:int	file:
read_line	liolib.c	/^static int read_line (lua_State *L, FILE *f, int chop) {$/;"	f	typeref:typename:int	file:
read_long_string	llex.c	/^static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {$/;"	f	typeref:typename:void	file:
read_number	liolib.c	/^static int read_number (lua_State *L, FILE *f) {$/;"	f	typeref:typename:int	file:
read_numeral	llex.c	/^static int read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f	typeref:typename:int	file:
read_string	llex.c	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f	typeref:typename:void	file:
readable	loadlib.c	/^static int readable (const char *filename) {$/;"	f	typeref:typename:int	file:
readdecesc	llex.c	/^static int readdecesc (LexState *ls) {$/;"	f	typeref:typename:int	file:
readdigits	liolib.c	/^static int readdigits (RN *rn, int hex) {$/;"	f	typeref:typename:int	file:
reader	luac.c	/^static const char* reader(lua_State *L, void *ud, size_t *size)$/;"	f	typeref:typename:const char *	file:
reader	lzio.h	/^  lua_Reader reader;		\/* reader function *\/$/;"	m	struct:Zio	typeref:typename:lua_Reader
readhexaesc	llex.c	/^static int readhexaesc (LexState *ls) {$/;"	f	typeref:typename:int	file:
readutf8esc	llex.c	/^static unsigned long readutf8esc (LexState *ls) {$/;"	f	typeref:typename:unsigned long	file:
reallymarkobject	lgc.c	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f	typeref:typename:void	file:
recfield	lparser.c	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f	typeref:typename:void	file:
recover	ldo.c	/^static int recover (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
refcount	lfunc.h	/^  lu_mem refcount;  \/* reference counter *\/$/;"	m	struct:UpVal	typeref:typename:lu_mem
registerlocalvar	lparser.c	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f	typeref:typename:int	file:
rehash	ltable.c	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f	typeref:typename:void	file:
remarkupvals	lgc.c	/^static void remarkupvals (global_State *g) {$/;"	f	typeref:typename:void	file:
removeentry	lgc.c	/^static void removeentry (Node *n) {$/;"	f	typeref:typename:void	file:
removevalues	lcode.c	/^static void removevalues (FuncState *fs, int list) {$/;"	f	typeref:typename:void	file:
removevars	lparser.c	/^static void removevars (FuncState *fs, int tolevel) {$/;"	f	typeref:typename:void	file:
repeatstat	lparser.c	/^static void repeatstat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
report	lua.c	/^static int report (lua_State *L, int status) {$/;"	f	typeref:typename:int	file:
reprepstate	lstrlib.c	/^static void reprepstate (MatchState *ms) {$/;"	f	typeref:typename:void	file:
resetbit	lgc.h	/^#define resetbit(/;"	d
resetbits	lgc.h	/^#define resetbits(/;"	d
resethookcount	ldebug.h	/^#define resethookcount(/;"	d
resizebox	lauxlib.c	/^static void *resizebox (lua_State *L, int idx, size_t newsize) {$/;"	f	typeref:typename:void *	file:
restartcollection	lgc.c	/^static void restartcollection (global_State *g) {$/;"	f	typeref:typename:void	file:
restorestack	ldo.h	/^#define restorestack(/;"	d
resume	ldo.c	/^static void resume (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
resume_error	ldo.c	/^static int resume_error (lua_State *L, const char *msg, int narg) {$/;"	f	typeref:typename:int	file:
retstat	lparser.c	/^static void retstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
reverse	lapi.c	/^static void reverse (lua_State *L, StkId from, StkId to) {$/;"	f	typeref:typename:void	file:
right	lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anonb080c5cf0108	typeref:typename:lu_byte	file:
righttt	lobject.h	/^#define righttt(/;"	d
rttype	lobject.h	/^#define rttype(/;"	d
runafewfinalizers	lgc.c	/^static int runafewfinalizers (lua_State *L) {$/;"	f	typeref:typename:int	file:
runargs	lua.c	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f	typeref:typename:int	file:
s	lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS	typeref:typename:const char *	file:
s	llimits.h	/^  void *s;$/;"	m	union:__anon5af4d619010a	typeref:typename:void *
save	llex.c	/^static void save (LexState *ls, int c) {$/;"	f	typeref:typename:void	file:
save_and_next	llex.c	/^#define save_and_next(/;"	d	file:
savedpc	lstate.h	/^      const Instruction *savedpc;$/;"	m	struct:CallInfo::__anond1956568010a::__anond19565680208	typeref:typename:const Instruction *
savestack	ldo.h	/^#define savestack(/;"	d
scanformat	lstrlib.c	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f	typeref:typename:const char *	file:
searcher_C	loadlib.c	/^static int searcher_C (lua_State *L) {$/;"	f	typeref:typename:int	file:
searcher_Croot	loadlib.c	/^static int searcher_Croot (lua_State *L) {$/;"	f	typeref:typename:int	file:
searcher_Lua	loadlib.c	/^static int searcher_Lua (lua_State *L) {$/;"	f	typeref:typename:int	file:
searcher_preload	loadlib.c	/^static int searcher_preload (lua_State *L) {$/;"	f	typeref:typename:int	file:
searchpath	loadlib.c	/^static const char *searchpath (lua_State *L, const char *name,$/;"	f	typeref:typename:const char *	file:
searchupvalue	lparser.c	/^static int searchupvalue (FuncState *fs, TString *name) {$/;"	f	typeref:typename:int	file:
searchvar	lparser.c	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f	typeref:typename:int	file:
seed	lstate.h	/^  unsigned int seed;  \/* randomized seed for hashes *\/$/;"	m	struct:global_State	typeref:typename:unsigned int
semerror	lparser.c	/^static l_noret semerror (LexState *ls, const char *msg) {$/;"	f	typeref:typename:l_noret	file:
seminfo	llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token	typeref:typename:SemInfo
separatetobefnz	lgc.c	/^static void separatetobefnz (global_State *g, int all) {$/;"	f	typeref:typename:void	file:
set2	ltablib.c	/^static void set2 (lua_State *L, IdxT i, IdxT j) {$/;"	f	typeref:typename:void	file:
set_env	loadlib.c	/^static void set_env (lua_State *L) {$/;"	f	typeref:typename:void	file:
setallfields	loslib.c	/^static void setallfields (lua_State *L, struct tm *stm) {$/;"	f	typeref:typename:void	file:
setarg	lopcodes.h	/^#define setarg(/;"	d
setarrayvector	ltable.c	/^static void setarrayvector (lua_State *L, Table *t, unsigned int size) {$/;"	f	typeref:typename:void	file:
setbits	lgc.h	/^#define setbits(/;"	d
setboolfield	loslib.c	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f	typeref:typename:void	file:
setbvalue	lobject.h	/^#define setbvalue(/;"	d
setclCvalue	lobject.h	/^#define setclCvalue(/;"	d
setclLvalue	lobject.h	/^#define setclLvalue(/;"	d
setdeadvalue	lobject.h	/^#define setdeadvalue(/;"	d
seterrorobj	ldo.c	/^static void seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f	typeref:typename:void	file:
setfield	loslib.c	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f	typeref:typename:void	file:
setfltvalue	lobject.h	/^#define setfltvalue(/;"	d
setfvalue	lobject.h	/^#define setfvalue(/;"	d
setgcovalue	lobject.h	/^#define setgcovalue(/;"	d
sethvalue	lobject.h	/^#define sethvalue(/;"	d
sethvalue2s	lobject.h	/^#define sethvalue2s	/;"	d
setivalue	lobject.h	/^#define setivalue(/;"	d
setnilvalue	lobject.h	/^#define setnilvalue(/;"	d
setnodekey	lobject.h	/^#define setnodekey(/;"	d
setnodevector	ltable.c	/^static void setnodevector (lua_State *L, Table *t, unsigned int size) {$/;"	f	typeref:typename:void	file:
setoah	lstate.h	/^#define setoah(/;"	d
setobj	lobject.h	/^#define setobj(/;"	d
setobj2n	lobject.h	/^#define setobj2n	/;"	d
setobj2s	lobject.h	/^#define setobj2s	/;"	d
setobj2t	lobject.h	/^#define setobj2t(/;"	d
setobjs2s	lobject.h	/^#define setobjs2s	/;"	d
setobjt2t	lobject.h	/^#define setobjt2t	/;"	d
setpath	loadlib.c	/^static void setpath (lua_State *L, const char *fieldname,$/;"	f	typeref:typename:void	file:
setpause	lgc.c	/^static void setpause (global_State *g) {$/;"	f	typeref:typename:void	file:
setprogdir	loadlib.c	/^#define setprogdir(/;"	d	file:
setprogdir	loadlib.c	/^static void setprogdir (lua_State *L) {$/;"	f	typeref:typename:void	file:
setptvalue2s	lobject.h	/^#define setptvalue2s	/;"	d
setpvalue	lobject.h	/^#define setpvalue(/;"	d
setsvalue	lobject.h	/^#define setsvalue(/;"	d
setsvalue2n	lobject.h	/^#define setsvalue2n	/;"	d
setsvalue2s	lobject.h	/^#define setsvalue2s	/;"	d
settableProtected	lvm.c	/^#define settableProtected(/;"	d	file:
settabsb	ldblib.c	/^static void settabsb (lua_State *L, const char *k, int v) {$/;"	f	typeref:typename:void	file:
settabsi	ldblib.c	/^static void settabsi (lua_State *L, const char *k, int v) {$/;"	f	typeref:typename:void	file:
settabss	ldblib.c	/^static void settabss (lua_State *L, const char *k, const char *v) {$/;"	f	typeref:typename:void	file:
setthvalue	lobject.h	/^#define setthvalue(/;"	d
settt_	lobject.h	/^#define settt_(/;"	d
setuservalue	lobject.h	/^#define setuservalue(/;"	d
setuvalue	lobject.h	/^#define setuvalue(/;"	d
short_src	lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:char[]
shrlen	lobject.h	/^  lu_byte shrlen;  \/* length for short strings *\/$/;"	m	struct:TString	typeref:typename:lu_byte
simpleexp	lparser.c	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
singlematch	lstrlib.c	/^static int singlematch (MatchState *ms, const char *s, const char *p,$/;"	f	typeref:typename:int	file:
singlestep	lgc.c	/^static lu_mem singlestep (lua_State *L) {$/;"	f	typeref:typename:lu_mem	file:
singlevar	lparser.c	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f	typeref:typename:void	file:
singlevaraux	lparser.c	/^static void singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f	typeref:typename:void	file:
size	lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS	typeref:typename:size_t	file:
size	lauxlib.h	/^  size_t size;  \/* buffer size *\/$/;"	m	struct:luaL_Buffer	typeref:typename:size_t
size	lparser.h	/^    int size;$/;"	m	struct:Dyndata::__anonb080c5d40408	typeref:typename:int
size	lparser.h	/^  int size;  \/* array size *\/$/;"	m	struct:Labellist	typeref:typename:int
size	lstate.h	/^  int size;$/;"	m	struct:stringtable	typeref:typename:int
sizeCclosure	lfunc.h	/^#define sizeCclosure(/;"	d
sizeLclosure	lfunc.h	/^#define sizeLclosure(/;"	d
sizearray	lobject.h	/^  unsigned int sizearray;  \/* size of 'array' array *\/$/;"	m	struct:Table	typeref:typename:unsigned int
sizecode	lobject.h	/^  int sizecode;$/;"	m	struct:Proto	typeref:typename:int
sizek	lobject.h	/^  int sizek;  \/* size of 'k' *\/$/;"	m	struct:Proto	typeref:typename:int
sizelineinfo	lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto	typeref:typename:int
sizelocvars	lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto	typeref:typename:int
sizelstring	lstring.h	/^#define sizelstring(/;"	d
sizeludata	lstring.h	/^#define sizeludata(/;"	d
sizenode	lobject.h	/^#define sizenode(/;"	d
sizep	lobject.h	/^  int sizep;  \/* size of 'p' *\/$/;"	m	struct:Proto	typeref:typename:int
sizeudata	lstring.h	/^#define sizeudata(/;"	d
sizeupvalues	lobject.h	/^  int sizeupvalues;  \/* size of 'upvalues' *\/$/;"	m	struct:Proto	typeref:typename:int
skipBOM	lauxlib.c	/^static int skipBOM (LoadF *lf) {$/;"	f	typeref:typename:int	file:
skip_sep	llex.c	/^static int skip_sep (LexState *ls) {$/;"	f	typeref:typename:int	file:
skipcomment	lauxlib.c	/^static int skipcomment (LoadF *lf, int *cp) {$/;"	f	typeref:typename:int	file:
skipnoopstat	lparser.c	/^static void skipnoopstat (LexState *ls) {$/;"	f	typeref:typename:void	file:
sof	ltablib.c	/^#define sof(/;"	d	file:
solaris	Makefile	/^solaris:$/;"	t
sort	ltablib.c	/^static int sort (lua_State *L) {$/;"	f	typeref:typename:int	file:
sort_comp	ltablib.c	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f	typeref:typename:int	file:
source	llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState	typeref:typename:TString *
source	lobject.h	/^  TString  *source;  \/* used for debug information *\/$/;"	m	struct:Proto	typeref:typename:TString *
source	lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
src	lstrlib.c	/^  const char *src;  \/* current position *\/$/;"	m	struct:GMatchState	typeref:typename:const char *	file:
src_end	lstrlib.c	/^  const char *src_end;  \/* end ('\\0') of source string *\/$/;"	m	struct:MatchState	typeref:typename:const char *	file:
src_init	lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	typeref:typename:const char *	file:
stack	lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State	typeref:typename:StkId
stack_init	lstate.c	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f	typeref:typename:void	file:
stack_last	lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State	typeref:typename:StkId
stackerror	ldo.c	/^static void stackerror (lua_State *L) {$/;"	f	typeref:typename:void	file:
stackinuse	ldo.c	/^static int stackinuse (lua_State *L) {$/;"	f	typeref:typename:int	file:
stacksize	lstate.h	/^  int stacksize;$/;"	m	struct:lua_State	typeref:typename:int
start_capture	lstrlib.c	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f	typeref:typename:const char *	file:
startpc	lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar	typeref:typename:int
statement	lparser.c	/^static void statement (LexState *ls) {$/;"	f	typeref:typename:void	file:
statlist	lparser.c	/^static void statlist (LexState *ls) {$/;"	f	typeref:typename:void	file:
status	ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	typeref:typename:volatile int	file:
status	ldump.c	/^  int status;$/;"	m	struct:__anon6f17f8b80108	typeref:typename:int	file:
status	lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State	typeref:typename:lu_byte
str_byte	lstrlib.c	/^static int str_byte (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_char	lstrlib.c	/^static int str_char (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_checkname	lparser.c	/^static TString *str_checkname (LexState *ls) {$/;"	f	typeref:typename:TString *	file:
str_dump	lstrlib.c	/^static int str_dump (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_find	lstrlib.c	/^static int str_find (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_find_aux	lstrlib.c	/^static int str_find_aux (lua_State *L, int find) {$/;"	f	typeref:typename:int	file:
str_format	lstrlib.c	/^static int str_format (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_gsub	lstrlib.c	/^static int str_gsub (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_len	lstrlib.c	/^static int str_len (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_lower	lstrlib.c	/^static int str_lower (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_match	lstrlib.c	/^static int str_match (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_pack	lstrlib.c	/^static int str_pack (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_packsize	lstrlib.c	/^static int str_packsize (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_rep	lstrlib.c	/^static int str_rep (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_reverse	lstrlib.c	/^static int str_reverse (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_sub	lstrlib.c	/^static int str_sub (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_unpack	lstrlib.c	/^static int str_unpack (lua_State *L) {$/;"	f	typeref:typename:int	file:
str_upper	lstrlib.c	/^static int str_upper (lua_State *L) {$/;"	f	typeref:typename:int	file:
strcache	lstate.h	/^  TString *strcache[STRCACHE_N][STRCACHE_M];  \/* cache for strings in API *\/$/;"	m	struct:global_State	typeref:typename:TString * [][]
stringtable	lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
strip	ldump.c	/^  int strip;$/;"	m	struct:__anon6f17f8b80108	typeref:typename:int	file:
stripping	luac.c	/^static int stripping=0;			\/* strip debug information? *\/$/;"	v	typeref:typename:int	file:
strlib	lstrlib.c	/^static const luaL_Reg strlib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
strt	lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State	typeref:typename:stringtable
subexpr	lparser.c	/^static BinOpr subexpr (LexState *ls, expdesc *v, int limit) {$/;"	f	typeref:typename:BinOpr	file:
suffixedexp	lparser.c	/^static void suffixedexp (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
svalue	lobject.h	/^#define svalue(/;"	d
swapextra	ldebug.c	/^static void swapextra (lua_State *L) {$/;"	f	typeref:typename:void	file:
sweepgc	lstate.h	/^  GCObject **sweepgc;  \/* current position of sweep in list *\/$/;"	m	struct:global_State	typeref:typename:GCObject **
sweeplist	lgc.c	/^static GCObject **sweeplist (lua_State *L, GCObject **p, lu_mem count) {$/;"	f	typeref:typename:GCObject **	file:
sweepstep	lgc.c	/^static lu_mem sweepstep (lua_State *L, global_State *g,$/;"	f	typeref:typename:lu_mem	file:
sweeptolive	lgc.c	/^static GCObject **sweeptolive (lua_State *L, GCObject **p) {$/;"	f	typeref:typename:GCObject **	file:
sweepwholelist	lgc.c	/^#define sweepwholelist(/;"	d	file:
syslib	loslib.c	/^static const luaL_Reg syslib[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
t	llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState	typeref:typename:Token
t	lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	typeref:typename:expdesc *	file:
t	lparser.h	/^      lu_byte t;  \/* table (register or upvalue) *\/$/;"	m	struct:expdesc::__anonb080c5d4020a::__anonb080c5d40308	typeref:typename:lu_byte
t	lparser.h	/^  int t;  \/* patch list of 'exit when true' *\/$/;"	m	struct:expdesc	typeref:typename:int
t	ltable.c	/^  Table *t;$/;"	m	struct:__anonf24b53aa0108	typeref:typename:Table *	file:
tab_funcs	ltablib.c	/^static const luaL_Reg tab_funcs[] = {$/;"	v	typeref:typename:const luaL_Reg[]	file:
tag_error	lauxlib.c	/^static void tag_error (lua_State *L, int arg, int tag) {$/;"	f	typeref:typename:void	file:
tconcat	ltablib.c	/^static int tconcat (lua_State *L) {$/;"	f	typeref:typename:int	file:
test2	liolib.c	/^static int test2 (RN *rn, const char *set) {$/;"	f	typeref:typename:int	file:
testAMode	lopcodes.h	/^#define testAMode(/;"	d
testTMode	lopcodes.h	/^#define testTMode(/;"	d
test_eof	liolib.c	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f	typeref:typename:int	file:
test_then_block	lparser.c	/^static void test_then_block (LexState *ls, int *escapelist) {$/;"	f	typeref:typename:void	file:
testbit	lgc.h	/^#define testbit(/;"	d
testbits	lgc.h	/^#define testbits(/;"	d
testnext	lparser.c	/^static int testnext (LexState *ls, int c) {$/;"	f	typeref:typename:int	file:
testprop	lctype.h	/^#define testprop(/;"	d
th	lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCUnion	typeref:struct:lua_State
thvalue	lobject.h	/^#define thvalue(/;"	d
timespec_to_ns	lua.c	/^timespec_to_ns(struct timespec tp)$/;"	f	typeref:typename:double
tinsert	ltablib.c	/^static int tinsert (lua_State *L) {$/;"	f	typeref:typename:int	file:
tmname	lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State	typeref:typename:TString * []
tmove	ltablib.c	/^static int tmove (lua_State *L) {$/;"	f	typeref:typename:int	file:
tobefnz	lstate.h	/^  GCObject *tobefnz;  \/* list of userdata to be GC *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
tofile	liolib.c	/^static FILE *tofile (lua_State *L) {$/;"	f	typeref:typename:FILE *	file:
tofinalize	lgc.h	/^#define tofinalize(/;"	d
tointeger	lvm.h	/^#define tointeger(/;"	d
token	llex.h	/^  int token;$/;"	m	struct:Token	typeref:typename:int
tolstream	liolib.c	/^#define tolstream(/;"	d	file:
tonumber	lvm.h	/^#define tonumber(/;"	d
tonumeral	lcode.c	/^static int tonumeral(const expdesc *e, TValue *v) {$/;"	f	typeref:typename:int	file:
top	lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo	typeref:typename:StkId
top	lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State	typeref:typename:StkId
toproto	luac.c	/^#define toproto(/;"	d	file:
tostore	lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	typeref:typename:int	file:
tostring	lvm.c	/^#define tostring(/;"	d	file:
totalbytes	lstate.h	/^  l_mem totalbytes;  \/* number of bytes currently allocated - GCdebt *\/$/;"	m	struct:global_State	typeref:typename:l_mem
touched	lfunc.h	/^      int touched;  \/* mark to avoid cycles with dead threads *\/$/;"	m	struct:UpVal::__anon73c29f13010a::__anon73c29f130208	typeref:typename:int
traverseCclosure	lgc.c	/^static lu_mem traverseCclosure (global_State *g, CClosure *cl) {$/;"	f	typeref:typename:lu_mem	file:
traverseLclosure	lgc.c	/^static lu_mem traverseLclosure (global_State *g, LClosure *cl) {$/;"	f	typeref:typename:lu_mem	file:
traverseephemeron	lgc.c	/^static int traverseephemeron (global_State *g, Table *h) {$/;"	f	typeref:typename:int	file:
traverseproto	lgc.c	/^static int traverseproto (global_State *g, Proto *f) {$/;"	f	typeref:typename:int	file:
traversestrongtable	lgc.c	/^static void traversestrongtable (global_State *g, Table *h) {$/;"	f	typeref:typename:void	file:
traversetable	lgc.c	/^static lu_mem traversetable (global_State *g, Table *h) {$/;"	f	typeref:typename:lu_mem	file:
traversethread	lgc.c	/^static lu_mem traversethread (global_State *g, lua_State *th) {$/;"	f	typeref:typename:lu_mem	file:
traverseweakvalue	lgc.c	/^static void traverseweakvalue (global_State *g, Table *h) {$/;"	f	typeref:typename:void	file:
treatstackoption	ldblib.c	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f	typeref:typename:void	file:
tremove	ltablib.c	/^static int tremove (lua_State *L) {$/;"	f	typeref:typename:int	file:
trim	lbitlib.c	/^#define trim(/;"	d	file:
tryfuncTM	ldo.c	/^static void tryfuncTM (lua_State *L, StkId func) {$/;"	f	typeref:typename:void	file:
ts	llex.h	/^  TString *ts;$/;"	m	union:__anon0ba7e630010a	typeref:typename:TString *
ts	lstate.h	/^  struct TString ts;$/;"	m	union:GCUnion	typeref:struct:TString
tsslen	lobject.h	/^#define tsslen(/;"	d
tsv	lobject.h	/^  TString tsv;$/;"	m	union:UTString	typeref:typename:TString
tsvalue	lobject.h	/^#define tsvalue(/;"	d
ttisCclosure	lobject.h	/^#define ttisCclosure(/;"	d
ttisLclosure	lobject.h	/^#define ttisLclosure(/;"	d
ttisboolean	lobject.h	/^#define ttisboolean(/;"	d
ttisclosure	lobject.h	/^#define ttisclosure(/;"	d
ttisdeadkey	lobject.h	/^#define ttisdeadkey(/;"	d
ttisfloat	lobject.h	/^#define ttisfloat(/;"	d
ttisfulluserdata	lobject.h	/^#define ttisfulluserdata(/;"	d
ttisfunction	lobject.h	/^#define ttisfunction(/;"	d
ttisinteger	lobject.h	/^#define ttisinteger(/;"	d
ttislcf	lobject.h	/^#define ttislcf(/;"	d
ttislightuserdata	lobject.h	/^#define ttislightuserdata(/;"	d
ttislngstring	lobject.h	/^#define ttislngstring(/;"	d
ttisnil	lobject.h	/^#define ttisnil(/;"	d
ttisnumber	lobject.h	/^#define ttisnumber(/;"	d
ttisshrstring	lobject.h	/^#define ttisshrstring(/;"	d
ttisstring	lobject.h	/^#define ttisstring(/;"	d
ttistable	lobject.h	/^#define ttistable(/;"	d
ttisthread	lobject.h	/^#define ttisthread(/;"	d
ttnov	lobject.h	/^#define ttnov(/;"	d
ttuv_	lobject.h	/^  lu_byte ttuv_;  \/* user value's tag *\/$/;"	m	struct:Udata	typeref:typename:lu_byte
ttype	lobject.h	/^#define ttype(/;"	d
ttypename	ltm.h	/^#define ttypename(/;"	d
tvk	lobject.h	/^  TValue tvk;$/;"	m	union:TKey	typeref:typename:TValue
twoto	lobject.h	/^#define twoto(/;"	d
twups	lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:global_State	typeref:struct:lua_State *
twups	lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:lua_State	typeref:struct:lua_State *
txtToken	llex.c	/^static const char *txtToken (LexState *ls, int token) {$/;"	f	typeref:typename:const char *	file:
typeerror	lauxlib.c	/^static int typeerror (lua_State *L, int arg, const char *tname) {$/;"	f	typeref:typename:int	file:
u	lfunc.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon73c29f13010a
u	llimits.h	/^  double u;$/;"	m	union:__anon5af4d619010a	typeref:typename:double
u	lobject.h	/^  } u;$/;"	m	struct:TString	typeref:union:TString::__anonfd91815e010a
u	lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anonb080c5d4020a
u	lstate.h	/^  struct Udata u;$/;"	m	union:GCUnion	typeref:struct:Udata
u	lstate.h	/^  } u;$/;"	m	struct:CallInfo	typeref:union:CallInfo::__anond1956568010a
u	lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	struct:cD	typeref:union:cD::__anon2b5c08b2030a	file:
u_posrelat	lutf8lib.c	/^static lua_Integer u_posrelat (lua_Integer pos, size_t len) {$/;"	f	typeref:typename:lua_Integer	file:
uchar	lstrlib.c	/^#define uchar(/;"	d	file:
ud	lstate.h	/^  void *ud;         \/* auxiliary data to 'frealloc' *\/$/;"	m	struct:global_State	typeref:typename:void *
udata2finalize	lgc.c	/^static GCObject *udata2finalize (global_State *g) {$/;"	f	typeref:typename:GCObject *	file:
udatatypename	ltm.c	/^static const char udatatypename[] = "userdata";$/;"	v	typeref:typename:const char[]	file:
unbound_search	ltable.c	/^static lua_Unsigned unbound_search (Table *t, lua_Unsigned j) {$/;"	f	typeref:typename:lua_Unsigned	file:
undefgoto	lparser.c	/^static l_noret undefgoto (LexState *ls, Labeldesc *gt) {$/;"	f	typeref:typename:l_noret	file:
unmakemask	ldblib.c	/^static char *unmakemask (int mask, char *smask) {$/;"	f	typeref:typename:char *	file:
unpack	ltablib.c	/^static int unpack (lua_State *L) {$/;"	f	typeref:typename:int	file:
unpackint	lstrlib.c	/^static lua_Integer unpackint (lua_State *L, const char *str,$/;"	f	typeref:typename:lua_Integer	file:
unroll	ldo.c	/^static void unroll (lua_State *L, void *ud) {$/;"	f	typeref:typename:void	file:
upisopen	lfunc.h	/^#define upisopen(/;"	d
upval	lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	typeref:typename:lu_byte	file:
upvalname	ldebug.c	/^static const char *upvalname (Proto *p, int uv) {$/;"	f	typeref:typename:const char *	file:
upvals	lobject.h	/^  UpVal *upvals[1];  \/* list of upvalues *\/$/;"	m	struct:LClosure	typeref:typename:UpVal * [1]
upvalue	lobject.h	/^  TValue upvalue[1];  \/* list of upvalues *\/$/;"	m	struct:CClosure	typeref:typename:TValue[1]
upvalues	lobject.h	/^  Upvaldesc *upvalues;  \/* upvalue information *\/$/;"	m	struct:Proto	typeref:typename:Upvaldesc *
usage	luac.c	/^static void usage(const char* message)$/;"	f	typeref:typename:void	file:
user_	lobject.h	/^  union Value user_;  \/* user value *\/$/;"	m	struct:Udata	typeref:union:Value
utf8_decode	lutf8lib.c	/^static const char *utf8_decode (const char *o, int *val) {$/;"	f	typeref:typename:const char *	file:
utf8esc	llex.c	/^static void utf8esc (LexState *ls) {$/;"	f	typeref:typename:void	file:
utfchar	lutf8lib.c	/^static int utfchar (lua_State *L) {$/;"	f	typeref:typename:int	file:
utflen	lutf8lib.c	/^static int utflen (lua_State *L) {$/;"	f	typeref:typename:int	file:
uv	lobject.h	/^  Udata uv;$/;"	m	union:UUdata	typeref:typename:Udata
uvalue	lobject.h	/^#define uvalue(/;"	d
v	lfunc.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal	typeref:typename:TValue *
v	lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	typeref:typename:expdesc	file:
v	lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	typeref:typename:expdesc	file:
val_	lobject.h	/^#define val_(/;"	d
validop	lcode.c	/^static int validop (int op, TValue *v1, TValue *v2) {$/;"	f	typeref:typename:int	file:
valiswhite	lgc.c	/^#define valiswhite(/;"	d	file:
value	lfunc.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon73c29f13010a	typeref:typename:TValue
varinfo	ldebug.c	/^static const char *varinfo (lua_State *L, const TValue *o) {$/;"	f	typeref:typename:const char *	file:
varname	lobject.h	/^  TString *varname;$/;"	m	struct:LocVar	typeref:typename:TString *
version	lstate.h	/^  const lua_Number *version;  \/* pointer to version number *\/$/;"	m	struct:global_State	typeref:typename:const lua_Number *
vkisinreg	lparser.h	/^#define vkisinreg(/;"	d
vkisvar	lparser.h	/^#define vkisvar(/;"	d
vmbreak	lvm.c	/^#define vmbreak	/;"	d	file:
vmcase	lvm.c	/^#define vmcase(/;"	d	file:
vmdispatch	lvm.c	/^#define vmdispatch(/;"	d	file:
vmfetch	lvm.c	/^#define vmfetch(/;"	d	file:
vslen	lobject.h	/^#define vslen(/;"	d
vt	lparser.h	/^      lu_byte vt;  \/* whether 't' is register (VLOCAL) or upvalue (VUPVAL) *\/$/;"	m	struct:expdesc::__anonb080c5d4020a::__anonb080c5d40308	typeref:typename:lu_byte
weak	lstate.h	/^  GCObject *weak;  \/* list of tables with weak values *\/$/;"	m	struct:global_State	typeref:typename:GCObject *
wgkey	ltable.h	/^#define wgkey(/;"	d
what	lua.h	/^  const char *what;	\/* (S) 'Lua', 'C', 'main', 'tail' *\/$/;"	m	struct:lua_Debug	typeref:typename:const char *
whilestat	lparser.c	/^static void whilestat (LexState *ls, int line) {$/;"	f	typeref:typename:void	file:
white2gray	lgc.c	/^#define white2gray(/;"	d	file:
writer	ldump.c	/^  lua_Writer writer;$/;"	m	struct:__anon6f17f8b80108	typeref:typename:lua_Writer	file:
writer	lstrlib.c	/^static int writer (lua_State *L, const void *b, size_t size, void *B) {$/;"	f	typeref:typename:int	file:
writer	luac.c	/^static int writer(lua_State* L, const void* p, size_t size, void* u)$/;"	f	typeref:typename:int	file:
yindex	lparser.c	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f	typeref:typename:void	file:
z	ldo.c	/^  ZIO *z;$/;"	m	struct:SParser	typeref:typename:ZIO *	file:
z	llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState	typeref:typename:ZIO *
zgetc	lzio.h	/^#define zgetc(/;"	d
