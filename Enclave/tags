!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	dh/tweetnacl.cpp	/^sv A(gf o,const gf a,const gf b)$/;"	f
ADD_ASSIGN_OVERFLOW	Enclave_t.c	25;"	d	file:
AES_KEY_SIZE	Enclave.cpp	18;"	d	file:
ALLONES	lbitlib.cpp	37;"	d	file:
ALPHABIT	lctype.h	39;"	d
APR_ALIGN	test/apr_general.h	133;"	d
APR_ALIGN_DEFAULT	test/apr_general.h	137;"	d
APR_ALLOCATOR_H	test/apr_allocator.h	18;"	d
APR_ALLOCATOR_MAX_FREE_UNLIMITED	test/apr_allocator.h	65;"	d
APR_ALLOCATOR_USES_MMAP	test/apr_pools.cpp	32;"	d	file:
APR_ANONYMOUS	test/apr_errno.h	468;"	d
APR_ASCII_BLANK	test/apr_general.h	56;"	d
APR_ASCII_CR	test/apr_general.h	58;"	d
APR_ASCII_LF	test/apr_general.h	60;"	d
APR_ASCII_TAB	test/apr_general.h	62;"	d
APR_BADARG	test/apr_errno.h	459;"	d
APR_BADCH	test/apr_errno.h	457;"	d
APR_BEGIN_DECLS	test/apr.h	449;"	d
APR_BEGIN_DECLS	test/apr.h	452;"	d
APR_CHARSET_EBCDIC	test/apr.h	305;"	d
APR_CHILD_DONE	test/apr_errno.h	446;"	d
APR_CHILD_NOTDONE	test/apr_errno.h	448;"	d
APR_DECLARE	test/apr.h	490;"	d
APR_DECLARE	test/apr.h	522;"	d
APR_DECLARE	test/apr.h	526;"	d
APR_DECLARE	test/apr.h	530;"	d
APR_DECLARE_DATA	test/apr.h	519;"	d
APR_DECLARE_DATA	test/apr.h	524;"	d
APR_DECLARE_DATA	test/apr.h	528;"	d
APR_DECLARE_DATA	test/apr.h	532;"	d
APR_DECLARE_NONSTD	test/apr.h	503;"	d
APR_DECLARE_NONSTD	test/apr.h	523;"	d
APR_DECLARE_NONSTD	test/apr.h	527;"	d
APR_DECLARE_NONSTD	test/apr.h	531;"	d
APR_DETACH	test/apr_errno.h	442;"	d
APR_DSOPATH	test/apr.h	620;"	d
APR_EABOVEROOT	test/apr_errno.h	330;"	d
APR_EABSOLUTE	test/apr_errno.h	324;"	d
APR_EACCES	test/apr_errno.h	639;"	d
APR_EACCES	test/apr_errno.h	641;"	d
APR_EAFNOSUPPORT	test/apr_errno.h	831;"	d
APR_EAFNOSUPPORT	test/apr_errno.h	833;"	d
APR_EAGAIN	test/apr_errno.h	726;"	d
APR_EAGAIN	test/apr_errno.h	728;"	d
APR_EAGAIN	test/apr_errno.h	730;"	d
APR_EBADDATE	test/apr_errno.h	293;"	d
APR_EBADF	test/apr_errno.h	702;"	d
APR_EBADF	test/apr_errno.h	704;"	d
APR_EBADIP	test/apr_errno.h	317;"	d
APR_EBADMASK	test/apr_errno.h	319;"	d
APR_EBADPATH	test/apr_errno.h	332;"	d
APR_EBUSY	test/apr_errno.h	480;"	d
APR_ECONNABORTED	test/apr_errno.h	767;"	d
APR_ECONNABORTED	test/apr_errno.h	769;"	d
APR_ECONNREFUSED	test/apr_errno.h	749;"	d
APR_ECONNREFUSED	test/apr_errno.h	751;"	d
APR_ECONNRESET	test/apr_errno.h	774;"	d
APR_ECONNRESET	test/apr_errno.h	776;"	d
APR_EDSOOPEN	test/apr_errno.h	322;"	d
APR_EEXIST	test/apr_errno.h	646;"	d
APR_EEXIST	test/apr_errno.h	648;"	d
APR_EFTYPE	test/apr_errno.h	803;"	d
APR_EFTYPE	test/apr_errno.h	805;"	d
APR_EGENERAL	test/apr_errno.h	313;"	d
APR_EHOSTUNREACH	test/apr_errno.h	789;"	d
APR_EHOSTUNREACH	test/apr_errno.h	791;"	d
APR_EINCOMPLETE	test/apr_errno.h	328;"	d
APR_EINIT	test/apr_errno.h	474;"	d
APR_EINPROGRESS	test/apr_errno.h	756;"	d
APR_EINPROGRESS	test/apr_errno.h	758;"	d
APR_EINTR	test/apr_errno.h	735;"	d
APR_EINTR	test/apr_errno.h	737;"	d
APR_EINVAL	test/apr_errno.h	709;"	d
APR_EINVAL	test/apr_errno.h	711;"	d
APR_EINVALSOCK	test/apr_errno.h	295;"	d
APR_EMFILE	test/apr_errno.h	688;"	d
APR_EMFILE	test/apr_errno.h	690;"	d
APR_EMISMATCH	test/apr_errno.h	478;"	d
APR_ENAMETOOLONG	test/apr_errno.h	653;"	d
APR_ENAMETOOLONG	test/apr_errno.h	655;"	d
APR_END_DECLS	test/apr.h	450;"	d
APR_END_DECLS	test/apr.h	453;"	d
APR_ENETUNREACH	test/apr_errno.h	796;"	d
APR_ENETUNREACH	test/apr_errno.h	798;"	d
APR_ENFILE	test/apr_errno.h	695;"	d
APR_ENFILE	test/apr_errno.h	697;"	d
APR_ENODIR	test/apr_errno.h	301;"	d
APR_ENOENT	test/apr_errno.h	660;"	d
APR_ENOENT	test/apr_errno.h	662;"	d
APR_ENOLOCK	test/apr_errno.h	303;"	d
APR_ENOMEM	test/apr_errno.h	681;"	d
APR_ENOMEM	test/apr_errno.h	683;"	d
APR_ENOPOLL	test/apr_errno.h	305;"	d
APR_ENOPOOL	test/apr_errno.h	290;"	d
APR_ENOPROC	test/apr_errno.h	297;"	d
APR_ENOSHMAVAIL	test/apr_errno.h	315;"	d
APR_ENOSOCKET	test/apr_errno.h	307;"	d
APR_ENOSPC	test/apr_errno.h	674;"	d
APR_ENOSPC	test/apr_errno.h	676;"	d
APR_ENOSTAT	test/apr_errno.h	288;"	d
APR_ENOTDIR	test/apr_errno.h	667;"	d
APR_ENOTDIR	test/apr_errno.h	669;"	d
APR_ENOTEMPTY	test/apr_errno.h	824;"	d
APR_ENOTEMPTY	test/apr_errno.h	826;"	d
APR_ENOTENOUGHENTROPY	test/apr_errno.h	340;"	d
APR_ENOTHDKEY	test/apr_errno.h	311;"	d
APR_ENOTHREAD	test/apr_errno.h	309;"	d
APR_ENOTIME	test/apr_errno.h	299;"	d
APR_ENOTIMPL	test/apr_errno.h	476;"	d
APR_ENOTSOCK	test/apr_errno.h	742;"	d
APR_ENOTSOCK	test/apr_errno.h	744;"	d
APR_EOF	test/apr_errno.h	461;"	d
APR_EOL_STR	test/apr.h	605;"	d
APR_EOPNOTSUPP	test/apr_errno.h	838;"	d
APR_EOPNOTSUPP	test/apr_errno.h	840;"	d
APR_EPATHWILD	test/apr_errno.h	334;"	d
APR_EPIPE	test/apr_errno.h	810;"	d
APR_EPIPE	test/apr_errno.h	812;"	d
APR_EPROC_UNKNOWN	test/apr_errno.h	338;"	d
APR_ERANGE	test/apr_errno.h	845;"	d
APR_ERANGE	test/apr_errno.h	847;"	d
APR_ERELATIVE	test/apr_errno.h	326;"	d
APR_ERRNO_H	test/apr_errno.h	18;"	d
APR_ESPIPE	test/apr_errno.h	716;"	d
APR_ESPIPE	test/apr_errno.h	718;"	d
APR_ESYMNOTFOUND	test/apr_errno.h	336;"	d
APR_ETIMEDOUT	test/apr_errno.h	782;"	d
APR_ETIMEDOUT	test/apr_errno.h	784;"	d
APR_EXDEV	test/apr_errno.h	817;"	d
APR_EXDEV	test/apr_errno.h	819;"	d
APR_FILEBASED	test/apr_errno.h	470;"	d
APR_FILES_AS_SOCKETS	test/apr.h	301;"	d
APR_FROM_OS_ERROR	test/apr_errno.h	1028;"	d
APR_FROM_OS_ERROR	test/apr_errno.h	1147;"	d
APR_FROM_OS_ERROR	test/apr_errno.h	1214;"	d
APR_FROM_OS_ERROR	test/apr_errno.h	64;"	d
APR_FROM_OS_ERROR	test/apr_errno.h	854;"	d
APR_GENERAL_H	test/apr_general.h	18;"	d
APR_H	test/apr.h	19;"	d
APR_HASH_H	test/apr_hash.h	18;"	d
APR_HASH_KEY_STRING	test/apr_hash.h	47;"	d
APR_HAS_DSO	test/apr.h	286;"	d
APR_HAS_FCNTL_SERIALIZE	test/apr.h	248;"	d
APR_HAS_FLOCK_SERIALIZE	test/apr.h	245;"	d
APR_HAS_FORK	test/apr.h	283;"	d
APR_HAS_INLINE	test/apr.h	66;"	d
APR_HAS_INLINE	test/apr.h	69;"	d
APR_HAS_LARGE_FILES	test/apr.h	291;"	d
APR_HAS_LARGE_FILES	test/apr.h	569;"	d
APR_HAS_LARGE_FILES	test/apr.h	576;"	d
APR_HAS_LARGE_FILES	test/apr.h	582;"	d
APR_HAS_MMAP	test/apr.h	282;"	d
APR_HAS_OS_UUID	test/apr.h	293;"	d
APR_HAS_OTHER_CHILD	test/apr.h	285;"	d
APR_HAS_POSIXSEM_SERIALIZE	test/apr.h	247;"	d
APR_HAS_PROC_INVOKED	test/apr.h	289;"	d
APR_HAS_PROC_PTHREAD_SERIALIZE	test/apr.h	249;"	d
APR_HAS_RANDOM	test/apr.h	284;"	d
APR_HAS_SENDFILE	test/apr.h	281;"	d
APR_HAS_SHARED_MEMORY	test/apr.h	279;"	d
APR_HAS_SO_ACCEPTFILTER	test/apr.h	287;"	d
APR_HAS_SYSVSEM_SERIALIZE	test/apr.h	246;"	d
APR_HAS_THREADS	test/apr.h	280;"	d
APR_HAS_TIMEDLOCKS	test/apr.h	294;"	d
APR_HAS_UNICODE_FS	test/apr.h	288;"	d
APR_HAS_USER	test/apr.h	290;"	d
APR_HAS_XTHREAD_FILES	test/apr.h	292;"	d
APR_HAVE_ARPA_INET_H	test/apr.h	72;"	d
APR_HAVE_CONIO_H	test/apr.h	73;"	d
APR_HAVE_CORKABLE_TCP	test/apr.h	253;"	d
APR_HAVE_CRYPT_H	test/apr.h	74;"	d
APR_HAVE_CTYPE_H	test/apr.h	75;"	d
APR_HAVE_DIRENT_H	test/apr.h	76;"	d
APR_HAVE_ERRNO_H	test/apr.h	77;"	d
APR_HAVE_FCNTL_H	test/apr.h	78;"	d
APR_HAVE_GETRLIMIT	test/apr.h	254;"	d
APR_HAVE_INET_ADDR	test/apr.h	256;"	d
APR_HAVE_INET_NETWORK	test/apr.h	257;"	d
APR_HAVE_INTTYPES_H	test/apr.h	96;"	d
APR_HAVE_IN_ADDR	test/apr.h	255;"	d
APR_HAVE_IOVEC	test/apr.h	276;"	d
APR_HAVE_IO_H	test/apr.h	79;"	d
APR_HAVE_IPV6	test/apr.h	258;"	d
APR_HAVE_LIMITS_H	test/apr.h	80;"	d
APR_HAVE_MEMCHR	test/apr.h	272;"	d
APR_HAVE_MEMMOVE	test/apr.h	260;"	d
APR_HAVE_NETDB_H	test/apr.h	81;"	d
APR_HAVE_NETINET_IN_H	test/apr.h	82;"	d
APR_HAVE_NETINET_SCTP_H	test/apr.h	83;"	d
APR_HAVE_NETINET_SCTP_UIO_H	test/apr.h	84;"	d
APR_HAVE_NETINET_TCP_H	test/apr.h	85;"	d
APR_HAVE_PROCESS_H	test/apr.h	86;"	d
APR_HAVE_PTHREAD_H	test/apr.h	87;"	d
APR_HAVE_SA_STORAGE	test/apr.h	265;"	d
APR_HAVE_SCTP	test/apr.h	275;"	d
APR_HAVE_SEMAPHORE_H	test/apr.h	88;"	d
APR_HAVE_SETRLIMIT	test/apr.h	261;"	d
APR_HAVE_SHMEM_BEOS	test/apr.h	228;"	d
APR_HAVE_SHMEM_MMAP_ANON	test/apr.h	227;"	d
APR_HAVE_SHMEM_MMAP_SHM	test/apr.h	223;"	d
APR_HAVE_SHMEM_MMAP_TMP	test/apr.h	222;"	d
APR_HAVE_SHMEM_MMAP_ZERO	test/apr.h	224;"	d
APR_HAVE_SHMEM_SHMGET	test/apr.h	226;"	d
APR_HAVE_SHMEM_SHMGET_ANON	test/apr.h	225;"	d
APR_HAVE_SIGACTION	test/apr.h	262;"	d
APR_HAVE_SIGNAL_H	test/apr.h	89;"	d
APR_HAVE_SIGSUSPEND	test/apr.h	263;"	d
APR_HAVE_SIGWAIT	test/apr.h	264;"	d
APR_HAVE_SOCKADDR_UN	test/apr.h	259;"	d
APR_HAVE_STDARG_H	test/apr.h	90;"	d
APR_HAVE_STDINT_H	test/apr.h	91;"	d
APR_HAVE_STDIO_H	test/apr.h	92;"	d
APR_HAVE_STDLIB_H	test/apr.h	93;"	d
APR_HAVE_STRCASECMP	test/apr.h	266;"	d
APR_HAVE_STRDUP	test/apr.h	267;"	d
APR_HAVE_STRICMP	test/apr.h	268;"	d
APR_HAVE_STRINGS_H	test/apr.h	95;"	d
APR_HAVE_STRING_H	test/apr.h	94;"	d
APR_HAVE_STRNCASECMP	test/apr.h	269;"	d
APR_HAVE_STRNICMP	test/apr.h	270;"	d
APR_HAVE_STRSTR	test/apr.h	271;"	d
APR_HAVE_STRUCT_RLIMIT	test/apr.h	273;"	d
APR_HAVE_SYS_IOCTL_H	test/apr.h	97;"	d
APR_HAVE_SYS_SENDFILE_H	test/apr.h	98;"	d
APR_HAVE_SYS_SIGNAL_H	test/apr.h	99;"	d
APR_HAVE_SYS_SOCKET_H	test/apr.h	100;"	d
APR_HAVE_SYS_SOCKIO_H	test/apr.h	101;"	d
APR_HAVE_SYS_SYSLIMITS_H	test/apr.h	102;"	d
APR_HAVE_SYS_TIME_H	test/apr.h	103;"	d
APR_HAVE_SYS_TYPES_H	test/apr.h	104;"	d
APR_HAVE_SYS_UIO_H	test/apr.h	105;"	d
APR_HAVE_SYS_UN_H	test/apr.h	106;"	d
APR_HAVE_SYS_WAIT_H	test/apr.h	107;"	d
APR_HAVE_TIME_H	test/apr.h	108;"	d
APR_HAVE_UNION_SEMUN	test/apr.h	274;"	d
APR_HAVE_UNISTD_H	test/apr.h	109;"	d
APR_HAVE_WINDOWS_H	test/apr.h	110;"	d
APR_HAVE_WINSOCK2_H	test/apr.h	111;"	d
APR_IF_VALGRIND	test/apr_pools.cpp	43;"	d	file:
APR_INCHILD	test/apr_errno.h	438;"	d
APR_INCOMPLETE	test/apr_errno.h	452;"	d
APR_INLINE	test/apr.h	65;"	d
APR_INLINE	test/apr.h	68;"	d
APR_INPARENT	test/apr_errno.h	440;"	d
APR_INT16_MAX	test/apr.h	393;"	d
APR_INT16_MAX	test/apr.h	395;"	d
APR_INT16_MIN	test/apr.h	387;"	d
APR_INT16_MIN	test/apr.h	389;"	d
APR_INT32_MAX	test/apr.h	411;"	d
APR_INT32_MAX	test/apr.h	413;"	d
APR_INT32_MIN	test/apr.h	405;"	d
APR_INT32_MIN	test/apr.h	407;"	d
APR_INT64_C	test/apr.h	349;"	d
APR_INT64_C	test/apr.h	355;"	d
APR_INT64_C	test/apr.h	361;"	d
APR_INT64_C	test/apr.h	369;"	d
APR_INT64_MAX	test/apr.h	429;"	d
APR_INT64_MAX	test/apr.h	431;"	d
APR_INT64_MIN	test/apr.h	423;"	d
APR_INT64_MIN	test/apr.h	425;"	d
APR_INT64_T_FMT	test/apr.h	556;"	d
APR_INT64_T_FMT	test/apr.h	571;"	d
APR_INT64_T_FMT	test/apr.h	578;"	d
APR_INT64_T_FMT	test/apr.h	584;"	d
APR_IS_BIGENDIAN	test/apr.h	384;"	d
APR_IS_BIGENDIAN	test/apr.h	589;"	d
APR_IS_BIGENDIAN	test/apr.h	591;"	d
APR_IS_BIGENDIAN	test/apr.h	593;"	d
APR_KEYBASED	test/apr_errno.h	472;"	d
APR_MEMNODE_T_SIZE	test/apr_allocator.h	62;"	d
APR_NOTDETACH	test/apr_errno.h	444;"	d
APR_NOTFOUND	test/apr_errno.h	463;"	d
APR_OFFSET	test/apr_general.h	78;"	d
APR_OFFSET	test/apr_general.h	81;"	d
APR_OFFSET	test/apr_general.h	86;"	d
APR_OFFSET	test/apr_general.h	92;"	d
APR_OFFSETOF	test/apr_general.h	104;"	d
APR_OFFSETOF	test/apr_general.h	106;"	d
APR_OFF_T_FMT	test/apr.h	550;"	d
APR_OFF_T_FMT	test/apr.h	596;"	d
APR_OFF_T_FMT	test/apr.h	597;"	d
APR_OS2_STATUS	test/apr_errno.h	876;"	d
APR_OS_ERRSPACE_SIZE	test/apr_errno.h	123;"	d
APR_OS_START_CANONERR	test/apr_errno.h	174;"	d
APR_OS_START_EAIERR	test/apr_errno.h	180;"	d
APR_OS_START_ERROR	test/apr_errno.h	117;"	d
APR_OS_START_STATUS	test/apr_errno.h	136;"	d
APR_OS_START_SYSERR	test/apr_errno.h	185;"	d
APR_OS_START_USEERR	test/apr_errno.h	169;"	d
APR_OS_START_USERERR	test/apr_errno.h	164;"	d
APR_O_NONBLOCK_INHERITED	test/apr.h	318;"	d
APR_PATH_MAX	test/apr.h	619;"	d
APR_PID_T_FMT	test/apr.h	553;"	d
APR_POOLS_H	test/apr_pools.h	18;"	d
APR_POOL_DEBUG	test/apr_pools.h	141;"	d
APR_POOL_DEBUG_GENERAL	test/apr_pools.cpp	511;"	d	file:
APR_POOL_DEBUG_LIFETIME	test/apr_pools.cpp	513;"	d	file:
APR_POOL_DEBUG_OWNER	test/apr_pools.cpp	514;"	d	file:
APR_POOL_DEBUG_VERBOSE	test/apr_pools.cpp	512;"	d	file:
APR_POOL_DEBUG_VERBOSE_ALL	test/apr_pools.cpp	517;"	d	file:
APR_POOL_DEBUG_VERBOSE_ALLOC	test/apr_pools.cpp	515;"	d	file:
APR_POOL_DECLARE_ACCESSOR	test/apr_pools.h	79;"	d
APR_POOL_IMPLEMENT_ACCESSOR	test/apr_pools.h	89;"	d
APR_POOL__FILE_LINE__	test/apr_pools.h	143;"	d
APR_PROCATTR_USER_SET_REQUIRES_PASSWORD	test/apr.h	296;"	d
APR_PROCESS_LOCK_IS_GLOBAL	test/apr.h	251;"	d
APR_PROC_MUTEX_IS_GLOBAL	test/apr.h	602;"	d
APR_PSPRINTF_MIN_STRINGSIZE	test/apr_pools.cpp	1186;"	d	file:
APR_SIZEOF_VOIDP	test/apr.h	330;"	d
APR_SIZEOF_VOIDP	test/apr.h	348;"	d
APR_SIZEOF_VOIDP	test/apr.h	354;"	d
APR_SIZEOF_VOIDP	test/apr.h	360;"	d
APR_SIZEOF_VOIDP	test/apr.h	570;"	d
APR_SIZEOF_VOIDP	test/apr.h	577;"	d
APR_SIZEOF_VOIDP	test/apr.h	583;"	d
APR_SIZE_MAX	test/apr.h	440;"	d
APR_SIZE_T_FMT	test/apr.h	547;"	d
APR_SSIZE_T_FMT	test/apr.h	544;"	d
APR_STATUS_IS_ANONYMOUS	test/apr_errno.h	584;"	d
APR_STATUS_IS_BADARG	test/apr_errno.h	560;"	d
APR_STATUS_IS_BADCH	test/apr_errno.h	552;"	d
APR_STATUS_IS_CHILD_DONE	test/apr_errno.h	520;"	d
APR_STATUS_IS_CHILD_NOTDONE	test/apr_errno.h	527;"	d
APR_STATUS_IS_DETACH	test/apr_errno.h	506;"	d
APR_STATUS_IS_EABOVEROOT	test/apr_errno.h	412;"	d
APR_STATUS_IS_EABSOLUTE	test/apr_errno.h	406;"	d
APR_STATUS_IS_EACCES	test/apr_errno.h	1040;"	d
APR_STATUS_IS_EACCES	test/apr_errno.h	1158;"	d
APR_STATUS_IS_EACCES	test/apr_errno.h	1231;"	d
APR_STATUS_IS_EACCES	test/apr_errno.h	927;"	d
APR_STATUS_IS_EAFNOSUPPORT	test/apr_errno.h	1139;"	d
APR_STATUS_IS_EAFNOSUPPORT	test/apr_errno.h	1203;"	d
APR_STATUS_IS_EAFNOSUPPORT	test/apr_errno.h	1326;"	d
APR_STATUS_IS_EAFNOSUPPORT	test/apr_errno.h	992;"	d
APR_STATUS_IS_EAGAIN	test/apr_errno.h	1093;"	d
APR_STATUS_IS_EAGAIN	test/apr_errno.h	1171;"	d
APR_STATUS_IS_EAGAIN	test/apr_errno.h	1272;"	d
APR_STATUS_IS_EAGAIN	test/apr_errno.h	1274;"	d
APR_STATUS_IS_EAGAIN	test/apr_errno.h	1276;"	d
APR_STATUS_IS_EAGAIN	test/apr_errno.h	957;"	d
APR_STATUS_IS_EBADDATE	test/apr_errno.h	367;"	d
APR_STATUS_IS_EBADF	test/apr_errno.h	1080;"	d
APR_STATUS_IS_EBADF	test/apr_errno.h	1167;"	d
APR_STATUS_IS_EBADF	test/apr_errno.h	1264;"	d
APR_STATUS_IS_EBADF	test/apr_errno.h	950;"	d
APR_STATUS_IS_EBADIP	test/apr_errno.h	391;"	d
APR_STATUS_IS_EBADMASK	test/apr_errno.h	393;"	d
APR_STATUS_IS_EBADPATH	test/apr_errno.h	414;"	d
APR_STATUS_IS_EBUSY	test/apr_errno.h	628;"	d
APR_STATUS_IS_ECONNABORTED	test/apr_errno.h	1108;"	d
APR_STATUS_IS_ECONNABORTED	test/apr_errno.h	1182;"	d
APR_STATUS_IS_ECONNABORTED	test/apr_errno.h	1301;"	d
APR_STATUS_IS_ECONNABORTED	test/apr_errno.h	1304;"	d
APR_STATUS_IS_ECONNABORTED	test/apr_errno.h	969;"	d
APR_STATUS_IS_ECONNREFUSED	test/apr_errno.h	1104;"	d
APR_STATUS_IS_ECONNREFUSED	test/apr_errno.h	1178;"	d
APR_STATUS_IS_ECONNREFUSED	test/apr_errno.h	1285;"	d
APR_STATUS_IS_ECONNREFUSED	test/apr_errno.h	965;"	d
APR_STATUS_IS_ECONNRESET	test/apr_errno.h	1110;"	d
APR_STATUS_IS_ECONNRESET	test/apr_errno.h	1184;"	d
APR_STATUS_IS_ECONNRESET	test/apr_errno.h	1308;"	d
APR_STATUS_IS_ECONNRESET	test/apr_errno.h	971;"	d
APR_STATUS_IS_EDSOOPEN	test/apr_errno.h	400;"	d
APR_STATUS_IS_EDSOOPEN	test/apr_errno.h	403;"	d
APR_STATUS_IS_EEXIST	test/apr_errno.h	1051;"	d
APR_STATUS_IS_EEXIST	test/apr_errno.h	1159;"	d
APR_STATUS_IS_EEXIST	test/apr_errno.h	1233;"	d
APR_STATUS_IS_EEXIST	test/apr_errno.h	930;"	d
APR_STATUS_IS_EFTYPE	test/apr_errno.h	1125;"	d
APR_STATUS_IS_EFTYPE	test/apr_errno.h	1199;"	d
APR_STATUS_IS_EFTYPE	test/apr_errno.h	1317;"	d
APR_STATUS_IS_EFTYPE	test/apr_errno.h	983;"	d
APR_STATUS_IS_EGENERAL	test/apr_errno.h	387;"	d
APR_STATUS_IS_EHOSTUNREACH	test/apr_errno.h	1121;"	d
APR_STATUS_IS_EHOSTUNREACH	test/apr_errno.h	1194;"	d
APR_STATUS_IS_EHOSTUNREACH	test/apr_errno.h	1313;"	d
APR_STATUS_IS_EHOSTUNREACH	test/apr_errno.h	979;"	d
APR_STATUS_IS_EINCOMPLETE	test/apr_errno.h	410;"	d
APR_STATUS_IS_EINIT	test/apr_errno.h	606;"	d
APR_STATUS_IS_EINPROGRESS	test/apr_errno.h	1106;"	d
APR_STATUS_IS_EINPROGRESS	test/apr_errno.h	1180;"	d
APR_STATUS_IS_EINPROGRESS	test/apr_errno.h	1287;"	d
APR_STATUS_IS_EINPROGRESS	test/apr_errno.h	967;"	d
APR_STATUS_IS_EINTR	test/apr_errno.h	1100;"	d
APR_STATUS_IS_EINTR	test/apr_errno.h	1174;"	d
APR_STATUS_IS_EINTR	test/apr_errno.h	1281;"	d
APR_STATUS_IS_EINTR	test/apr_errno.h	961;"	d
APR_STATUS_IS_EINVAL	test/apr_errno.h	1083;"	d
APR_STATUS_IS_EINVAL	test/apr_errno.h	1168;"	d
APR_STATUS_IS_EINVAL	test/apr_errno.h	1266;"	d
APR_STATUS_IS_EINVAL	test/apr_errno.h	952;"	d
APR_STATUS_IS_EINVALSOCK	test/apr_errno.h	369;"	d
APR_STATUS_IS_EMFILE	test/apr_errno.h	1077;"	d
APR_STATUS_IS_EMFILE	test/apr_errno.h	1165;"	d
APR_STATUS_IS_EMFILE	test/apr_errno.h	1260;"	d
APR_STATUS_IS_EMFILE	test/apr_errno.h	947;"	d
APR_STATUS_IS_EMISMATCH	test/apr_errno.h	622;"	d
APR_STATUS_IS_ENAMETOOLONG	test/apr_errno.h	1054;"	d
APR_STATUS_IS_ENAMETOOLONG	test/apr_errno.h	1160;"	d
APR_STATUS_IS_ENAMETOOLONG	test/apr_errno.h	1235;"	d
APR_STATUS_IS_ENAMETOOLONG	test/apr_errno.h	935;"	d
APR_STATUS_IS_ENETDOWN	test/apr_errno.h	1198;"	d
APR_STATUS_IS_ENETUNREACH	test/apr_errno.h	1123;"	d
APR_STATUS_IS_ENETUNREACH	test/apr_errno.h	1196;"	d
APR_STATUS_IS_ENETUNREACH	test/apr_errno.h	1315;"	d
APR_STATUS_IS_ENETUNREACH	test/apr_errno.h	981;"	d
APR_STATUS_IS_ENFILE	test/apr_errno.h	1079;"	d
APR_STATUS_IS_ENFILE	test/apr_errno.h	1166;"	d
APR_STATUS_IS_ENFILE	test/apr_errno.h	1262;"	d
APR_STATUS_IS_ENFILE	test/apr_errno.h	949;"	d
APR_STATUS_IS_ENODIR	test/apr_errno.h	375;"	d
APR_STATUS_IS_ENOENT	test/apr_errno.h	1057;"	d
APR_STATUS_IS_ENOENT	test/apr_errno.h	1161;"	d
APR_STATUS_IS_ENOENT	test/apr_errno.h	1243;"	d
APR_STATUS_IS_ENOENT	test/apr_errno.h	1246;"	d
APR_STATUS_IS_ENOENT	test/apr_errno.h	938;"	d
APR_STATUS_IS_ENOLOCK	test/apr_errno.h	377;"	d
APR_STATUS_IS_ENOMEM	test/apr_errno.h	1071;"	d
APR_STATUS_IS_ENOMEM	test/apr_errno.h	1164;"	d
APR_STATUS_IS_ENOMEM	test/apr_errno.h	1258;"	d
APR_STATUS_IS_ENOMEM	test/apr_errno.h	946;"	d
APR_STATUS_IS_ENOPOLL	test/apr_errno.h	379;"	d
APR_STATUS_IS_ENOPOOL	test/apr_errno.h	365;"	d
APR_STATUS_IS_ENOPROC	test/apr_errno.h	371;"	d
APR_STATUS_IS_ENOSHMAVAIL	test/apr_errno.h	389;"	d
APR_STATUS_IS_ENOSOCKET	test/apr_errno.h	381;"	d
APR_STATUS_IS_ENOSPC	test/apr_errno.h	1069;"	d
APR_STATUS_IS_ENOSPC	test/apr_errno.h	1163;"	d
APR_STATUS_IS_ENOSPC	test/apr_errno.h	1252;"	d
APR_STATUS_IS_ENOSPC	test/apr_errno.h	1255;"	d
APR_STATUS_IS_ENOSPC	test/apr_errno.h	944;"	d
APR_STATUS_IS_ENOSTAT	test/apr_errno.h	359;"	d
APR_STATUS_IS_ENOTDIR	test/apr_errno.h	1062;"	d
APR_STATUS_IS_ENOTDIR	test/apr_errno.h	1162;"	d
APR_STATUS_IS_ENOTDIR	test/apr_errno.h	1249;"	d
APR_STATUS_IS_ENOTDIR	test/apr_errno.h	943;"	d
APR_STATUS_IS_ENOTEMPTY	test/apr_errno.h	1137;"	d
APR_STATUS_IS_ENOTEMPTY	test/apr_errno.h	1202;"	d
APR_STATUS_IS_ENOTEMPTY	test/apr_errno.h	1323;"	d
APR_STATUS_IS_ENOTEMPTY	test/apr_errno.h	989;"	d
APR_STATUS_IS_ENOTENOUGHENTROPY	test/apr_errno.h	429;"	d
APR_STATUS_IS_ENOTHDKEY	test/apr_errno.h	385;"	d
APR_STATUS_IS_ENOTHREAD	test/apr_errno.h	383;"	d
APR_STATUS_IS_ENOTIME	test/apr_errno.h	373;"	d
APR_STATUS_IS_ENOTIMPL	test/apr_errno.h	615;"	d
APR_STATUS_IS_ENOTSOCK	test/apr_errno.h	1102;"	d
APR_STATUS_IS_ENOTSOCK	test/apr_errno.h	1176;"	d
APR_STATUS_IS_ENOTSOCK	test/apr_errno.h	1283;"	d
APR_STATUS_IS_ENOTSOCK	test/apr_errno.h	963;"	d
APR_STATUS_IS_EOF	test/apr_errno.h	567;"	d
APR_STATUS_IS_EOPNOTSUPP	test/apr_errno.h	1141;"	d
APR_STATUS_IS_EOPNOTSUPP	test/apr_errno.h	1205;"	d
APR_STATUS_IS_EOPNOTSUPP	test/apr_errno.h	1328;"	d
APR_STATUS_IS_EOPNOTSUPP	test/apr_errno.h	994;"	d
APR_STATUS_IS_EPATHWILD	test/apr_errno.h	416;"	d
APR_STATUS_IS_EPIPE	test/apr_errno.h	1133;"	d
APR_STATUS_IS_EPIPE	test/apr_errno.h	1200;"	d
APR_STATUS_IS_EPIPE	test/apr_errno.h	1319;"	d
APR_STATUS_IS_EPIPE	test/apr_errno.h	984;"	d
APR_STATUS_IS_EPROC_UNKNOWN	test/apr_errno.h	427;"	d
APR_STATUS_IS_ERANGE	test/apr_errno.h	1143;"	d
APR_STATUS_IS_ERANGE	test/apr_errno.h	1207;"	d
APR_STATUS_IS_ERANGE	test/apr_errno.h	1331;"	d
APR_STATUS_IS_ERANGE	test/apr_errno.h	996;"	d
APR_STATUS_IS_ERELATIVE	test/apr_errno.h	408;"	d
APR_STATUS_IS_ESPIPE	test/apr_errno.h	1090;"	d
APR_STATUS_IS_ESPIPE	test/apr_errno.h	1169;"	d
APR_STATUS_IS_ESPIPE	test/apr_errno.h	1268;"	d
APR_STATUS_IS_ESPIPE	test/apr_errno.h	955;"	d
APR_STATUS_IS_ESYMNOTFOUND	test/apr_errno.h	421;"	d
APR_STATUS_IS_ESYMNOTFOUND	test/apr_errno.h	424;"	d
APR_STATUS_IS_ETIMEDOUT	test/apr_errno.h	1114;"	d
APR_STATUS_IS_ETIMEDOUT	test/apr_errno.h	1187;"	d
APR_STATUS_IS_ETIMEDOUT	test/apr_errno.h	1311;"	d
APR_STATUS_IS_ETIMEDOUT	test/apr_errno.h	974;"	d
APR_STATUS_IS_EXDEV	test/apr_errno.h	1135;"	d
APR_STATUS_IS_EXDEV	test/apr_errno.h	1201;"	d
APR_STATUS_IS_EXDEV	test/apr_errno.h	1321;"	d
APR_STATUS_IS_EXDEV	test/apr_errno.h	987;"	d
APR_STATUS_IS_FILEBASED	test/apr_errno.h	591;"	d
APR_STATUS_IS_INCHILD	test/apr_errno.h	492;"	d
APR_STATUS_IS_INCOMPLETE	test/apr_errno.h	542;"	d
APR_STATUS_IS_INPARENT	test/apr_errno.h	499;"	d
APR_STATUS_IS_KEYBASED	test/apr_errno.h	598;"	d
APR_STATUS_IS_NOTDETACH	test/apr_errno.h	513;"	d
APR_STATUS_IS_NOTFOUND	test/apr_errno.h	574;"	d
APR_STATUS_IS_TIMEUP	test/apr_errno.h	1117;"	d
APR_STATUS_IS_TIMEUP	test/apr_errno.h	1118;"	d
APR_STATUS_IS_TIMEUP	test/apr_errno.h	1190;"	d
APR_STATUS_IS_TIMEUP	test/apr_errno.h	1191;"	d
APR_STATUS_IS_TIMEUP	test/apr_errno.h	534;"	d
APR_STATUS_IS_TIMEUP	test/apr_errno.h	976;"	d
APR_STATUS_IS_TIMEUP	test/apr_errno.h	977;"	d
APR_STRINGIFY	test/apr_general.h	147;"	d
APR_STRINGIFY_HELPER	test/apr_general.h	149;"	d
APR_SUCCESS	test/apr_errno.h	225;"	d
APR_TCP_NODELAY_INHERITED	test/apr.h	314;"	d
APR_TCP_NOPUSH_FLAG	test/apr.h	310;"	d
APR_THREAD_FUNC	test/apr.h	465;"	d
APR_TIMEUP	test/apr_errno.h	450;"	d
APR_TO_OS_ERROR	test/apr_errno.h	1029;"	d
APR_TO_OS_ERROR	test/apr_errno.h	1148;"	d
APR_TO_OS_ERROR	test/apr_errno.h	1215;"	d
APR_TO_OS_ERROR	test/apr_errno.h	75;"	d
APR_TO_OS_ERROR	test/apr_errno.h	855;"	d
APR_UINT16_MAX	test/apr.h	399;"	d
APR_UINT16_MAX	test/apr.h	401;"	d
APR_UINT32_MAX	test/apr.h	417;"	d
APR_UINT32_MAX	test/apr.h	419;"	d
APR_UINT64_C	test/apr.h	350;"	d
APR_UINT64_C	test/apr.h	356;"	d
APR_UINT64_C	test/apr.h	362;"	d
APR_UINT64_C	test/apr.h	370;"	d
APR_UINT64_MAX	test/apr.h	435;"	d
APR_UINT64_MAX	test/apr.h	437;"	d
APR_UINT64_T_FMT	test/apr.h	559;"	d
APR_UINT64_T_FMT	test/apr.h	572;"	d
APR_UINT64_T_FMT	test/apr.h	579;"	d
APR_UINT64_T_FMT	test/apr.h	585;"	d
APR_UINT64_T_HEX_FMT	test/apr.h	562;"	d
APR_UINT64_T_HEX_FMT	test/apr.h	573;"	d
APR_UINT64_T_HEX_FMT	test/apr.h	580;"	d
APR_UINT64_T_HEX_FMT	test/apr.h	586;"	d
APR_USE_FCNTL_SERIALIZE	test/apr.h	241;"	d
APR_USE_FLOCK_SERIALIZE	test/apr.h	238;"	d
APR_USE_POSIXSEM_SERIALIZE	test/apr.h	240;"	d
APR_USE_PROC_PTHREAD_SERIALIZE	test/apr.h	242;"	d
APR_USE_PTHREAD_SERIALIZE	test/apr.h	243;"	d
APR_USE_SHMEM_BEOS	test/apr.h	236;"	d
APR_USE_SHMEM_MMAP_ANON	test/apr.h	235;"	d
APR_USE_SHMEM_MMAP_SHM	test/apr.h	231;"	d
APR_USE_SHMEM_MMAP_TMP	test/apr.h	230;"	d
APR_USE_SHMEM_MMAP_ZERO	test/apr.h	232;"	d
APR_USE_SHMEM_SHMGET	test/apr.h	234;"	d
APR_USE_SHMEM_SHMGET_ANON	test/apr.h	233;"	d
APR_USE_SYSVSEM_SERIALIZE	test/apr.h	239;"	d
APR_UTIL_ERRSPACE_SIZE	test/apr_errno.h	132;"	d
APR_UTIL_START_STATUS	test/apr_errno.h	141;"	d
APR_VALGRIND_NOACCESS	test/apr_pools.cpp	47;"	d	file:
APR_VALGRIND_UNDEFINED	test/apr_pools.cpp	49;"	d	file:
AUXMARK	loadlib.cpp	272;"	d	file:
AuxsetnodeT	ltable.cpp	/^} AuxsetnodeT;$/;"	t	typeref:struct:__anon24	file:
BASIC_STACK_SIZE	lstate.h	67;"	d
BITRK	lopcodes.h	134;"	d
BIT_ISCOLLECTABLE	lobject.h	63;"	d
BLACKBIT	lgc.h	80;"	d
BOUNDARY_INDEX	test/apr_pools.cpp	72;"	d	file:
BOUNDARY_INDEX	test/apr_pools.cpp	75;"	d	file:
BOUNDARY_SIZE	test/apr_pools.cpp	73;"	d	file:
BOUNDARY_SIZE	test/apr_pools.cpp	76;"	d	file:
BUFSIZE	Enclave.cpp	397;"	d	file:
BinOpr	lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BlockCnt	lparser.cpp	/^typedef struct BlockCnt {$/;"	s	file:
BlockCnt	lparser.cpp	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
CAP_POSITION	lstrlib.cpp	211;"	d	file:
CAP_UNFINISHED	lstrlib.cpp	210;"	d	file:
CClosure	lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CHAR	sgx_includes.h	/^typedef char CHAR;$/;"	t
CHECK_ENCLAVE_POINTER	Enclave_t.c	20;"	d	file:
CHECK_REF_POINTER	Enclave_t.c	10;"	d	file:
CHECK_UNIQUE_POINTER	Enclave_t.c	15;"	d	file:
CIST_FIN	lstate.h	124;"	d
CIST_FRESH	lstate.h	118;"	d
CIST_HOOKED	lstate.h	117;"	d
CIST_HOOKYIELD	lstate.h	122;"	d
CIST_LEQ	lstate.h	123;"	d
CIST_LUA	lstate.h	116;"	d
CIST_OAH	lstate.h	115;"	d
CIST_TAIL	lstate.h	121;"	d
CIST_YPCALL	lstate.h	120;"	d
CLIBS	loadlib.cpp	/^static const int CLIBS = 0;$/;"	v	file:
CLOCKS_PER_SEC	sgx_includes.h	10;"	d
CONST	sgx_includes.h	77;"	d
CREATE_ABC	lopcodes.h	116;"	d
CREATE_ABx	lopcodes.h	121;"	d
CREATE_Ax	lopcodes.h	125;"	d
CallInfo	lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallS	lapi.cpp	/^struct CallS {  \/* data to 'f_call' *\/$/;"	s	file:
Ch	dh/tweetnacl.cpp	/^static u64 Ch(u64 x,u64 y,u64 z) { return (x & y) ^ (~x & z); }$/;"	f	file:
Closure	lobject.h	/^typedef union Closure {$/;"	u
Closure	lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
ClosureHeader	lobject.h	/^  ClosureHeader;$/;"	m	struct:CClosure
ClosureHeader	lobject.h	/^  ClosureHeader;$/;"	m	struct:LClosure
ClosureHeader	lobject.h	443;"	d
CommonHeader	lobject.h	/^  CommonHeader;$/;"	m	struct:GCObject
CommonHeader	lobject.h	/^  CommonHeader;$/;"	m	struct:Proto
CommonHeader	lobject.h	/^  CommonHeader;$/;"	m	struct:TString
CommonHeader	lobject.h	/^  CommonHeader;$/;"	m	struct:Table
CommonHeader	lobject.h	/^  CommonHeader;$/;"	m	struct:Udata
CommonHeader	lobject.h	79;"	d
CommonHeader	lstate.h	/^  CommonHeader;$/;"	m	struct:lua_State
ConsControl	lparser.cpp	/^struct ConsControl {$/;"	s	file:
Content	dh/tools.cpp	/^typedef struct content Content;$/;"	t	typeref:struct:content	file:
Content	dh/tools.h	/^    typedef struct content Content;$/;"	t	typeref:struct:content
D	dh/tweetnacl.cpp	/^  D = {0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203},$/;"	v	file:
D2	dh/tweetnacl.cpp	/^  D2 = {0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406},$/;"	v	file:
DARWIN	test/apr.h	206;"	d
DARWIN	test/apr.h	208;"	d
DARWIN_10	test/apr.h	207;"	d
DARWIN_10	test/apr.h	209;"	d
DECLARE_HANDLE	sgx_includes.h	73;"	d
DESTROYED	test/apr_pools.cpp	591;"	d	file:
DIGITBIT	lctype.h	40;"	d
DLMSG	loadlib.cpp	228;"	d	file:
DumpBlock	ldump.cpp	/^static void DumpBlock (const void *b, size_t size, DumpState *D) {$/;"	f	file:
DumpByte	ldump.cpp	/^static void DumpByte (int y, DumpState *D) {$/;"	f	file:
DumpCode	ldump.cpp	/^static void DumpCode (const Proto *f, DumpState *D) {$/;"	f	file:
DumpConstants	ldump.cpp	/^static void DumpConstants (const Proto *f, DumpState *D) {$/;"	f	file:
DumpDebug	ldump.cpp	/^static void DumpDebug (const Proto *f, DumpState *D) {$/;"	f	file:
DumpFunction	ldump.cpp	/^static void DumpFunction (const Proto *f, TString *psource, DumpState *D) {$/;"	f	file:
DumpHeader	ldump.cpp	/^static void DumpHeader (DumpState *D) {$/;"	f	file:
DumpInt	ldump.cpp	/^static void DumpInt (int x, DumpState *D) {$/;"	f	file:
DumpInteger	ldump.cpp	/^static void DumpInteger (lua_Integer x, DumpState *D) {$/;"	f	file:
DumpLiteral	ldump.cpp	37;"	d	file:
DumpNumber	ldump.cpp	/^static void DumpNumber (lua_Number x, DumpState *D) {$/;"	f	file:
DumpProtos	ldump.cpp	/^static void DumpProtos (const Proto *f, DumpState *D) {$/;"	f	file:
DumpState	ldump.cpp	/^} DumpState;$/;"	t	typeref:struct:__anon4	file:
DumpString	ldump.cpp	/^static void DumpString (const TString *s, DumpState *D) {$/;"	f	file:
DumpUpvalues	ldump.cpp	/^static void DumpUpvalues (const Proto *f, DumpState *D) {$/;"	f	file:
DumpVar	ldump.cpp	49;"	d	file:
DumpVector	ldump.cpp	35;"	d	file:
Dyndata	lparser.h	/^typedef struct Dyndata {$/;"	s
Dyndata	lparser.h	/^} Dyndata;$/;"	t	typeref:struct:Dyndata
ENCLAVE_T_H__	Enclave_t.h	2;"	d
EOFMARK	lua.cpp	270;"	d	file:
EOZ	lzio.h	16;"	d
ERRFUNC	loadlib.cpp	360;"	d	file:
ERRLIB	loadlib.cpp	359;"	d	file:
ERRORSTACKSIZE	ldo.cpp	174;"	d	file:
EXTRA_STACK	lstate.h	64;"	d
FALSE	test/apr_general.h	48;"	d
FILE	sgx_includes.h	/^typedef struct _IO_FILE FILE;$/;"	t	typeref:struct:_IO_FILE
FINALIZEDBIT	lgc.h	81;"	d
FIRST_RESERVED	llex.h	14;"	d
FLAGS	lstrlib.cpp	900;"	d	file:
FOR	dh/tweetnacl.cpp	2;"	d	file:
Ftypes	lstrlib.cpp	/^typedef union Ftypes {$/;"	u	file:
Ftypes	lstrlib.cpp	/^} Ftypes;$/;"	t	typeref:union:Ftypes	file:
FuncState	lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
G	lstate.h	204;"	d
GCFINALIZECOST	lgc.cpp	45;"	d	file:
GCObject	lobject.h	/^struct GCObject {$/;"	s
GCObject	lobject.h	/^typedef struct GCObject GCObject;$/;"	t	typeref:struct:GCObject
GCSTEPSIZE	lgc.h	32;"	d
GCSWEEPCOST	lgc.cpp	39;"	d	file:
GCSWEEPMAX	lgc.cpp	42;"	d	file:
GCSatomic	lgc.h	40;"	d
GCScallfin	lgc.h	45;"	d
GCSinsideatomic	lgc.cpp	33;"	d	file:
GCSpause	lgc.h	46;"	d
GCSpropagate	lgc.h	39;"	d
GCSswpallgc	lgc.h	41;"	d
GCSswpend	lgc.h	44;"	d
GCSswpfinobj	lgc.h	42;"	d
GCSswptobefnz	lgc.h	43;"	d
GCTM	lgc.cpp	/^static void GCTM (lua_State *L, int propagateerrors) {$/;"	f	file:
GCUnion	lstate.h	/^union GCUnion {$/;"	u
GCdebt	lstate.h	/^  l_mem GCdebt;  \/* bytes allocated not yet compensated by the collector *\/$/;"	m	struct:global_State
GCestimate	lstate.h	/^  lu_mem GCestimate;  \/* an estimate of the non-garbage memory in use *\/$/;"	m	struct:global_State
GCmemtrav	lstate.h	/^  lu_mem GCmemtrav;  \/* memory traversed by the GC *\/$/;"	m	struct:global_State
GETARG_A	lopcodes.h	97;"	d
GETARG_Ax	lopcodes.h	109;"	d
GETARG_B	lopcodes.h	100;"	d
GETARG_Bx	lopcodes.h	106;"	d
GETARG_C	lopcodes.h	103;"	d
GETARG_sBx	lopcodes.h	112;"	d
GET_OPCODE	lopcodes.h	89;"	d
GMatchState	lstrlib.cpp	/^typedef struct GMatchState {$/;"	s	file:
GMatchState	lstrlib.cpp	/^} GMatchState;$/;"	t	typeref:struct:GMatchState	file:
GUARDPAGE_SIZE	test/apr_pools.cpp	81;"	d	file:
GUARDPAGE_SIZE	test/apr_pools.cpp	86;"	d	file:
HOOKKEY	ldblib.cpp	/^static const int HOOKKEY = 0;$/;"	v	file:
HWND	sgx_includes.h	/^DECLARE_HANDLE  (HWND);$/;"	v
Header	lstrlib.cpp	/^typedef struct Header {$/;"	s	file:
Header	lstrlib.cpp	/^} Header;$/;"	t	typeref:struct:Header	file:
I	dh/tweetnacl.cpp	/^  I = {0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83};$/;"	v	file:
IDLE	test/apr_pools.cpp	589;"	d	file:
INCL_DOS	test/apr.h	190;"	d
INCL_DOS	test/apr_errno.h	858;"	d
INCL_DOSERRORS	test/apr.h	191;"	d
INCL_DOSERRORS	test/apr_errno.h	857;"	d
INDEXK	lopcodes.h	140;"	d
IN_USE	test/apr_pools.cpp	590;"	d	file:
IOPREF_LEN	liolib.cpp	137;"	d	file:
IO_INPUT	liolib.cpp	138;"	d	file:
IO_OUTPUT	liolib.cpp	139;"	d	file:
IO_PREFIX	liolib.cpp	136;"	d	file:
ISK	lopcodes.h	137;"	d
IdxT	ltablib.cpp	/^typedef unsigned int IdxT;$/;"	t	file:
Instruction	llimits.h	/^typedef unsigned int Instruction;$/;"	t
Instruction	llimits.h	/^typedef unsigned long Instruction;$/;"	t
K	dh/tweetnacl.cpp	/^static const u64 K[80] = $/;"	v	file:
KGC_EMERGENCY	lstate.h	72;"	d
KGC_NORMAL	lstate.h	71;"	d
KOption	lstrlib.cpp	/^typedef enum KOption {$/;"	g	file:
KOption	lstrlib.cpp	/^} KOption;$/;"	t	typeref:enum:KOption	file:
Kchar	lstrlib.cpp	/^  Kchar,	\/* fixed-length strings *\/$/;"	e	enum:KOption	file:
Kfloat	lstrlib.cpp	/^  Kfloat,	\/* floating-point numbers *\/$/;"	e	enum:KOption	file:
Kint	lstrlib.cpp	/^  Kint,		\/* signed integers *\/$/;"	e	enum:KOption	file:
Knop	lstrlib.cpp	/^  Knop		\/* no-op (configuration or spaces) *\/$/;"	e	enum:KOption	file:
Kpaddalign	lstrlib.cpp	/^  Kpaddalign,	\/* padding for alignment *\/$/;"	e	enum:KOption	file:
Kpadding	lstrlib.cpp	/^  Kpadding,	\/* padding *\/$/;"	e	enum:KOption	file:
Kstring	lstrlib.cpp	/^  Kstring,	\/* strings with prefixed length *\/$/;"	e	enum:KOption	file:
Kuint	lstrlib.cpp	/^  Kuint,	\/* unsigned integers *\/$/;"	e	enum:KOption	file:
Kzstr	lstrlib.cpp	/^  Kzstr,	\/* zero-terminated strings *\/$/;"	e	enum:KOption	file:
L	dh/tweetnacl.cpp	/^static const u64 L[32] = {0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10};$/;"	v	file:
L	lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer
L	ldump.cpp	/^  lua_State *L;$/;"	m	struct:__anon4	file:
L	llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State
L	lstrlib.cpp	/^  lua_State *L;$/;"	m	struct:Header	file:
L	lstrlib.cpp	/^  lua_State *L;$/;"	m	struct:MatchState	file:
L	lundump.cpp	/^  lua_State *L;$/;"	m	struct:__anon26	file:
L	lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio
L32	dh/tweetnacl.cpp	/^static u32 L32(u32 x,int c) { return (x << c) | ((x&0xffffffff) >> (32 - c)); }$/;"	f	file:
LC_ALL	sgx_includes.h	9;"	d
LC_COLLATE	sgx_includes.h	7;"	d
LC_CTYPE	sgx_includes.h	4;"	d
LC_MONETARY	sgx_includes.h	8;"	d
LC_NUMERIC	sgx_includes.h	5;"	d
LC_TIME	sgx_includes.h	6;"	d
LClosure	lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LEVELS1	lauxlib.cpp	37;"	d	file:
LEVELS2	lauxlib.cpp	38;"	d	file:
LEintfloat	lvm.cpp	/^static int LEintfloat (lua_Integer i, lua_Number f) {$/;"	f	file:
LEnum	lvm.cpp	/^static int LEnum (const TValue *l, const TValue *r) {$/;"	f	file:
LFIELDS_PER_FLUSH	lopcodes.h	294;"	d
LG	lstate.cpp	/^typedef struct LG {$/;"	s	file:
LG	lstate.cpp	/^} LG;$/;"	t	typeref:struct:LG	file:
LHS_assign	lparser.cpp	/^struct LHS_assign {$/;"	s	file:
LIB_FAIL	loadlib.cpp	224;"	d	file:
LIB_FAIL	loadlib.cpp	225;"	d	file:
LIB_FAIL	loadlib.cpp	64;"	d	file:
LL	lobject.cpp	479;"	d	file:
LPCSTR	sgx_includes.h	/^typedef CONST CHAR *LPCSTR, *PCSTR;$/;"	t
LPCTSTR	sgx_includes.h	/^typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;$/;"	t
LPCUTSTR	sgx_includes.h	/^typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;$/;"	t
LStream	liolib.cpp	/^typedef luaL_Stream LStream;$/;"	t	file:
LTintfloat	lvm.cpp	/^static int LTintfloat (lua_Integer i, lua_Number f) {$/;"	f	file:
LTnum	lvm.cpp	/^static int LTnum (const TValue *l, const TValue *r) {$/;"	f	file:
LUAC_DATA	lundump.h	16;"	d
LUAC_FORMAT	lundump.h	23;"	d
LUAC_INT	lundump.h	18;"	d
LUAC_NUM	lundump.h	19;"	d
LUAC_VERSION	lundump.h	22;"	d
LUAI_BITSINT	luaconf.h	91;"	d
LUAI_BITSINT	luaconf.h	94;"	d
LUAI_DDEC	luaconf.h	285;"	d
LUAI_DDEF	luaconf.h	286;"	d
LUAI_FUNC	luaconf.h	280;"	d
LUAI_FUNC	luaconf.h	282;"	d
LUAI_GCMUL	lstate.cpp	36;"	d	file:
LUAI_GCPAUSE	lstate.cpp	32;"	d	file:
LUAI_HASHLIMIT	lstring.cpp	33;"	d	file:
LUAI_MAXCCALLS	llimits.h	153;"	d
LUAI_MAXSHORTLEN	llimits.h	177;"	d
LUAI_MAXSTACK	luaconf.h	729;"	d
LUAI_MAXSTACK	luaconf.h	731;"	d
LUAI_THROW	ldo.cpp	58;"	d	file:
LUAI_THROW	ldo.cpp	66;"	d	file:
LUAI_THROW	ldo.cpp	73;"	d	file:
LUAI_TRY	ldo.cpp	59;"	d	file:
LUAI_TRY	ldo.cpp	67;"	d	file:
LUAI_TRY	ldo.cpp	74;"	d	file:
LUAI_UACINT	luaconf.h	528;"	d
LUAI_UACNUMBER	luaconf.h	461;"	d
LUAI_UACNUMBER	luaconf.h	477;"	d
LUAI_UACNUMBER	luaconf.h	492;"	d
LUALIB_API	luaconf.h	260;"	d
LUAL_BUFFERSIZE	luaconf.h	759;"	d
LUAL_BUFFERSIZE	luaconf.h	761;"	d
LUAL_NUMSIZES	lauxlib.h	37;"	d
LUAL_PACKPADBYTE	lstrlib.cpp	1107;"	d	file:
LUAMOD_API	luaconf.h	261;"	d
LUA_API	luaconf.h	247;"	d
LUA_API	luaconf.h	249;"	d
LUA_API	luaconf.h	254;"	d
LUA_AUTHORS	lua.h	29;"	d
LUA_BITLIBNAME	lualib.h	38;"	d
LUA_C89_NUMBERS	luaconf.h	81;"	d
LUA_CDIR	luaconf.h	189;"	d
LUA_CDIR	luaconf.h	205;"	d
LUA_COLIBNAME	lualib.h	20;"	d
LUA_COMPAT_APIINTCASTS	luaconf.h	326;"	d
LUA_COMPAT_APIINTCASTS	luaconf.h	335;"	d
LUA_COMPAT_BITLIB	luaconf.h	314;"	d
LUA_COMPAT_IPAIRS	luaconf.h	319;"	d
LUA_COMPAT_LOADERS	luaconf.h	347;"	d
LUA_COMPAT_LOADSTRING	luaconf.h	369;"	d
LUA_COMPAT_LOG10	luaconf.h	363;"	d
LUA_COMPAT_MATHLIB	luaconf.h	309;"	d
LUA_COMPAT_MATHLIB	luaconf.h	334;"	d
LUA_COMPAT_MAXN	luaconf.h	374;"	d
LUA_COMPAT_MODULE	luaconf.h	392;"	d
LUA_COMPAT_UNPACK	luaconf.h	341;"	d
LUA_COPYRIGHT	lua.h	28;"	d
LUA_CORE	lapi.cpp	8;"	d	file:
LUA_CORE	lcode.cpp	8;"	d	file:
LUA_CORE	lctype.cpp	8;"	d	file:
LUA_CORE	ldebug.cpp	8;"	d	file:
LUA_CORE	ldo.cpp	8;"	d	file:
LUA_CORE	ldump.cpp	8;"	d	file:
LUA_CORE	lfunc.cpp	8;"	d	file:
LUA_CORE	lgc.cpp	8;"	d	file:
LUA_CORE	llex.cpp	8;"	d	file:
LUA_CORE	lmem.cpp	8;"	d	file:
LUA_CORE	lobject.cpp	8;"	d	file:
LUA_CORE	lopcodes.cpp	8;"	d	file:
LUA_CORE	lparser.cpp	8;"	d	file:
LUA_CORE	lstate.cpp	8;"	d	file:
LUA_CORE	lstring.cpp	8;"	d	file:
LUA_CORE	ltable.cpp	8;"	d	file:
LUA_CORE	ltm.cpp	8;"	d	file:
LUA_CORE	lundump.cpp	8;"	d	file:
LUA_CORE	lvm.cpp	8;"	d	file:
LUA_CORE	lzio.cpp	8;"	d	file:
LUA_CPATH_DEFAULT	luaconf.h	196;"	d
LUA_CPATH_DEFAULT	luaconf.h	210;"	d
LUA_CPATH_VAR	loadlib.cpp	268;"	d	file:
LUA_CSUBSEP	loadlib.cpp	43;"	d	file:
LUA_DBLIBNAME	lualib.h	44;"	d
LUA_DIRSEP	luaconf.h	221;"	d
LUA_DIRSEP	luaconf.h	223;"	d
LUA_DL_DLL	luaconf.h	56;"	d
LUA_ENV	llex.h	18;"	d
LUA_ERRERR	lua.h	55;"	d
LUA_ERRFILE	lauxlib.h	20;"	d
LUA_ERRGCMM	lua.h	54;"	d
LUA_ERRMEM	lua.h	53;"	d
LUA_ERRRUN	lua.h	51;"	d
LUA_ERRSYNTAX	lua.h	52;"	d
LUA_EXEC_DIR	luaconf.h	170;"	d
LUA_EXTRASPACE	luaconf.h	740;"	d
LUA_FILEHANDLE	lauxlib.h	190;"	d
LUA_FLOAT_DOUBLE	luaconf.h	115;"	d
LUA_FLOAT_FLOAT	luaconf.h	114;"	d
LUA_FLOAT_LONGDOUBLE	luaconf.h	116;"	d
LUA_FLOAT_TYPE	luaconf.h	127;"	d
LUA_FLOAT_TYPE	luaconf.h	134;"	d
LUA_FLOAT_TYPE	luaconf.h	147;"	d
LUA_FLOORN2I	lvm.h	36;"	d
LUA_GCCOLLECT	lua.h	305;"	d
LUA_GCCOUNT	lua.h	306;"	d
LUA_GCCOUNTB	lua.h	307;"	d
LUA_GCISRUNNING	lua.h	311;"	d
LUA_GCRESTART	lua.h	304;"	d
LUA_GCSETPAUSE	lua.h	309;"	d
LUA_GCSETSTEPMUL	lua.h	310;"	d
LUA_GCSTEP	lua.h	308;"	d
LUA_GCSTOP	lua.h	303;"	d
LUA_HOOKCALL	lua.h	403;"	d
LUA_HOOKCOUNT	lua.h	406;"	d
LUA_HOOKLINE	lua.h	405;"	d
LUA_HOOKRET	lua.h	404;"	d
LUA_HOOKTAILCALL	lua.h	407;"	d
LUA_IDSIZE	luaconf.h	748;"	d
LUA_IGMARK	loadlib.cpp	32;"	d	file:
LUA_INITVARVERSION	lua.cpp	40;"	d	file:
LUA_INIT_VAR	lua.cpp	37;"	d	file:
LUA_INTEGER	luaconf.h	544;"	d
LUA_INTEGER	luaconf.h	552;"	d
LUA_INTEGER	luaconf.h	564;"	d
LUA_INTEGER	luaconf.h	573;"	d
LUA_INTEGER_FMT	luaconf.h	526;"	d
LUA_INTEGER_FRMLEN	luaconf.h	545;"	d
LUA_INTEGER_FRMLEN	luaconf.h	553;"	d
LUA_INTEGER_FRMLEN	luaconf.h	565;"	d
LUA_INTEGER_FRMLEN	luaconf.h	574;"	d
LUA_INT_INT	luaconf.h	109;"	d
LUA_INT_LONG	luaconf.h	110;"	d
LUA_INT_LONGLONG	luaconf.h	111;"	d
LUA_INT_TYPE	luaconf.h	123;"	d
LUA_INT_TYPE	luaconf.h	125;"	d
LUA_INT_TYPE	luaconf.h	133;"	d
LUA_INT_TYPE	luaconf.h	143;"	d
LUA_IOLIBNAME	lualib.h	26;"	d
LUA_KCONTEXT	luaconf.h	662;"	d
LUA_KCONTEXT	luaconf.h	668;"	d
LUA_KCONTEXT	luaconf.h	669;"	d
LUA_LDIR	luaconf.h	188;"	d
LUA_LDIR	luaconf.h	204;"	d
LUA_LIB	lauxlib.cpp	8;"	d	file:
LUA_LIB	lbaselib.cpp	8;"	d	file:
LUA_LIB	lbitlib.cpp	8;"	d	file:
LUA_LIB	lcorolib.cpp	8;"	d	file:
LUA_LIB	ldblib.cpp	8;"	d	file:
LUA_LIB	linit.cpp	9;"	d	file:
LUA_LIB	liolib.cpp	8;"	d	file:
LUA_LIB	lmathlib.cpp	8;"	d	file:
LUA_LIB	loadlib.cpp	12;"	d	file:
LUA_LIB	loslib.cpp	8;"	d	file:
LUA_LIB	lstrlib.cpp	8;"	d	file:
LUA_LIB	ltablib.cpp	8;"	d	file:
LUA_LIB	lutf8lib.cpp	8;"	d	file:
LUA_LLE_FLAGS	loadlib.cpp	157;"	d	file:
LUA_LOADED_TABLE	lauxlib.h	24;"	d
LUA_LOADLIBNAME	lualib.h	47;"	d
LUA_LSUBSEP	loadlib.cpp	47;"	d	file:
LUA_MASKCALL	lua.h	413;"	d
LUA_MASKCOUNT	lua.h	416;"	d
LUA_MASKLINE	lua.h	415;"	d
LUA_MASKRET	lua.h	414;"	d
LUA_MATHLIBNAME	lualib.h	41;"	d
LUA_MAXCAPTURES	lstrlib.cpp	34;"	d	file:
LUA_MAXINPUT	lua.cpp	33;"	d	file:
LUA_MAXINTEGER	luaconf.h	547;"	d
LUA_MAXINTEGER	luaconf.h	555;"	d
LUA_MAXINTEGER	luaconf.h	567;"	d
LUA_MAXINTEGER	luaconf.h	576;"	d
LUA_MINBUFFER	llimits.h	205;"	d
LUA_MININTEGER	luaconf.h	548;"	d
LUA_MININTEGER	luaconf.h	556;"	d
LUA_MININTEGER	luaconf.h	568;"	d
LUA_MININTEGER	luaconf.h	577;"	d
LUA_MINSTACK	lua.h	81;"	d
LUA_MULTRET	lua.h	36;"	d
LUA_NBITS	lbitlib.cpp	28;"	d	file:
LUA_NOREF	lauxlib.h	77;"	d
LUA_NUMBER	luaconf.h	457;"	d
LUA_NUMBER	luaconf.h	473;"	d
LUA_NUMBER	luaconf.h	488;"	d
LUA_NUMBER_FMT	luaconf.h	464;"	d
LUA_NUMBER_FMT	luaconf.h	480;"	d
LUA_NUMBER_FMT	luaconf.h	495;"	d
LUA_NUMBER_FRMLEN	luaconf.h	463;"	d
LUA_NUMBER_FRMLEN	luaconf.h	479;"	d
LUA_NUMBER_FRMLEN	luaconf.h	494;"	d
LUA_NUMTAGS	lua.h	76;"	d
LUA_OFSEP	loadlib.cpp	55;"	d	file:
LUA_OK	lua.h	49;"	d
LUA_OPADD	lua.h	197;"	d
LUA_OPBAND	lua.h	204;"	d
LUA_OPBNOT	lua.h	210;"	d
LUA_OPBOR	lua.h	205;"	d
LUA_OPBXOR	lua.h	206;"	d
LUA_OPDIV	lua.h	202;"	d
LUA_OPEQ	lua.h	214;"	d
LUA_OPIDIV	lua.h	203;"	d
LUA_OPLE	lua.h	216;"	d
LUA_OPLT	lua.h	215;"	d
LUA_OPMOD	lua.h	200;"	d
LUA_OPMUL	lua.h	199;"	d
LUA_OPPOW	lua.h	201;"	d
LUA_OPSHL	lua.h	207;"	d
LUA_OPSHR	lua.h	208;"	d
LUA_OPSUB	lua.h	198;"	d
LUA_OPUNM	lua.h	209;"	d
LUA_OSLIBNAME	lualib.h	29;"	d
LUA_PATH_DEFAULT	luaconf.h	191;"	d
LUA_PATH_DEFAULT	luaconf.h	206;"	d
LUA_PATH_MARK	luaconf.h	169;"	d
LUA_PATH_SEP	luaconf.h	168;"	d
LUA_PATH_VAR	loadlib.cpp	264;"	d	file:
LUA_POF	loadlib.cpp	52;"	d	file:
LUA_PRELOAD_TABLE	lauxlib.h	28;"	d
LUA_PROGNAME	lua.cpp	29;"	d	file:
LUA_PROMPT	lua.cpp	24;"	d	file:
LUA_PROMPT2	lua.cpp	25;"	d	file:
LUA_QL	luaconf.h	772;"	d
LUA_QS	luaconf.h	773;"	d
LUA_REFNIL	lauxlib.h	78;"	d
LUA_REGISTRYINDEX	lua.h	44;"	d
LUA_RELEASE	lua.h	27;"	d
LUA_RIDX_GLOBALS	lua.h	86;"	d
LUA_RIDX_LAST	lua.h	87;"	d
LUA_RIDX_MAINTHREAD	lua.h	85;"	d
LUA_ROOT	luaconf.h	203;"	d
LUA_SHRDIR	luaconf.h	190;"	d
LUA_SIGNATURE	lua.h	33;"	d
LUA_STRFTIMEOPTIONS	loslib.cpp	45;"	d	file:
LUA_STRFTIMEOPTIONS	loslib.cpp	47;"	d	file:
LUA_STRFTIMEOPTIONS	loslib.cpp	49;"	d	file:
LUA_STRLIBNAME	lualib.h	32;"	d
LUA_TABLIBNAME	lualib.h	23;"	d
LUA_TBOOLEAN	lua.h	67;"	d
LUA_TCCL	lobject.h	49;"	d
LUA_TDEADKEY	lobject.h	23;"	d
LUA_TFUNCTION	lua.h	72;"	d
LUA_TLCF	lobject.h	48;"	d
LUA_TLCL	lobject.h	47;"	d
LUA_TLIGHTUSERDATA	lua.h	68;"	d
LUA_TLNGSTR	lobject.h	54;"	d
LUA_TMPNAMBUFSIZE	loslib.cpp	115;"	d	file:
LUA_TMPNAMBUFSIZE	loslib.cpp	130;"	d	file:
LUA_TMPNAMTEMPLATE	loslib.cpp	118;"	d	file:
LUA_TNIL	lua.h	66;"	d
LUA_TNONE	lua.h	64;"	d
LUA_TNUMBER	lua.h	69;"	d
LUA_TNUMFLT	lobject.h	58;"	d
LUA_TNUMINT	lobject.h	59;"	d
LUA_TOTALTAGS	lobject.h	28;"	d
LUA_TPROTO	lobject.h	22;"	d
LUA_TSHRSTR	lobject.h	53;"	d
LUA_TSTRING	lua.h	70;"	d
LUA_TTABLE	lua.h	71;"	d
LUA_TTHREAD	lua.h	74;"	d
LUA_TUSERDATA	lua.h	73;"	d
LUA_UNSIGNED	luaconf.h	537;"	d
LUA_USE_C89	luaconf.h	57;"	d
LUA_USE_CTYPE	lctype.h	23;"	d
LUA_USE_CTYPE	lctype.h	26;"	d
LUA_USE_DLOPEN	luaconf.h	63;"	d
LUA_USE_DLOPEN	luaconf.h	70;"	d
LUA_USE_POSIX	luaconf.h	62;"	d
LUA_USE_POSIX	luaconf.h	69;"	d
LUA_USE_READLINE	luaconf.h	64;"	d
LUA_USE_READLINE	luaconf.h	71;"	d
LUA_USE_WINDOWS	luaconf.h	51;"	d
LUA_UTF8LIBNAME	lualib.h	35;"	d
LUA_VDIR	luaconf.h	182;"	d
LUA_VERSION	lua.h	26;"	d
LUA_VERSION_MAJOR	lua.h	21;"	d
LUA_VERSION_MINOR	lua.h	22;"	d
LUA_VERSION_NUM	lua.h	23;"	d
LUA_VERSION_RELEASE	lua.h	24;"	d
LUA_VERSUFFIX	lualib.h	15;"	d
LUA_YIELD	lua.h	50;"	d
LX	lstate.cpp	/^typedef struct LX {$/;"	s	file:
LX	lstate.cpp	/^} LX;$/;"	t	typeref:struct:LX	file:
L_ESC	lstrlib.cpp	238;"	d	file:
L_MAXDATEFIELD	loslib.cpp	236;"	d	file:
L_MAXLENNUM	liolib.cpp	385;"	d	file:
L_MAXLENNUM	lobject.cpp	248;"	d	file:
L_MODEEXT	liolib.cpp	36;"	d	file:
L_NBFD	lstrlib.cpp	827;"	d	file:
L_RANDMAX	lmathlib.cpp	30;"	d	file:
L_RANDMAX	lmathlib.cpp	34;"	d	file:
L_STRFTIMEC89	loslib.cpp	34;"	d	file:
L_STRFTIMEC99	loslib.cpp	37;"	d	file:
L_STRFTIMEWIN	loslib.cpp	41;"	d	file:
L_Umaxalign	llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t
L_Umaxalign	llimits.h	/^} L_Umaxalign;$/;"	t	typeref:union:__anon9
L_tmpnam	sgx_includes.h	11;"	d
Labeldesc	lparser.h	/^typedef struct Labeldesc {$/;"	s
Labeldesc	lparser.h	/^} Labeldesc;$/;"	t	typeref:struct:Labeldesc
Labellist	lparser.h	/^typedef struct Labellist {$/;"	s
Labellist	lparser.h	/^} Labellist;$/;"	t	typeref:struct:Labellist
LexState	llex.h	/^typedef struct LexState {$/;"	s
LexState	llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LoadBlock	lundump.cpp	/^static void LoadBlock (LoadState *S, void *b, size_t size) {$/;"	f	file:
LoadByte	lundump.cpp	/^static lu_byte LoadByte (LoadState *S) {$/;"	f	file:
LoadCode	lundump.cpp	/^static void LoadCode (LoadState *S, Proto *f) {$/;"	f	file:
LoadConstants	lundump.cpp	/^static void LoadConstants (LoadState *S, Proto *f) {$/;"	f	file:
LoadDebug	lundump.cpp	/^static void LoadDebug (LoadState *S, Proto *f) {$/;"	f	file:
LoadF	lauxlib.cpp	/^typedef struct LoadF {$/;"	s	file:
LoadF	lauxlib.cpp	/^} LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadFunction	lundump.cpp	/^static void LoadFunction (LoadState *S, Proto *f, TString *psource) {$/;"	f	file:
LoadInt	lundump.cpp	/^static int LoadInt (LoadState *S) {$/;"	f	file:
LoadInteger	lundump.cpp	/^static lua_Integer LoadInteger (LoadState *S) {$/;"	f	file:
LoadNumber	lundump.cpp	/^static lua_Number LoadNumber (LoadState *S) {$/;"	f	file:
LoadProtos	lundump.cpp	/^static void LoadProtos (LoadState *S, Proto *f) {$/;"	f	file:
LoadS	lauxlib.cpp	/^typedef struct LoadS {$/;"	s	file:
LoadS	lauxlib.cpp	/^} LoadS;$/;"	t	typeref:struct:LoadS	file:
LoadState	lundump.cpp	/^} LoadState;$/;"	t	typeref:struct:__anon26	file:
LoadString	lundump.cpp	/^static TString *LoadString (LoadState *S) {$/;"	f	file:
LoadUpvalues	lundump.cpp	/^static void LoadUpvalues (LoadState *S, Proto *f) {$/;"	f	file:
LoadVar	lundump.cpp	57;"	d	file:
LoadVector	lundump.cpp	49;"	d	file:
LocVar	lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
M	dh/tweetnacl.cpp	/^sv M(gf o,const gf a,const gf b)$/;"	f
MASK	lctype.h	46;"	d
MASK0	lopcodes.h	83;"	d
MASK1	lopcodes.h	80;"	d
MAXABITS	ltable.cpp	46;"	d	file:
MAXALIGN	lstrlib.cpp	1136;"	d	file:
MAXARGLINE	liolib.cpp	337;"	d	file:
MAXARG_A	lopcodes.h	74;"	d
MAXARG_Ax	lopcodes.h	68;"	d
MAXARG_Ax	lopcodes.h	70;"	d
MAXARG_B	lopcodes.h	75;"	d
MAXARG_Bx	lopcodes.h	60;"	d
MAXARG_Bx	lopcodes.h	63;"	d
MAXARG_C	lopcodes.h	76;"	d
MAXARG_sBx	lopcodes.h	61;"	d
MAXARG_sBx	lopcodes.h	64;"	d
MAXASIZE	ltable.cpp	47;"	d	file:
MAXBY10	lobject.cpp	296;"	d	file:
MAXCCALLS	lstrlib.cpp	234;"	d	file:
MAXHBITS	ltable.cpp	55;"	d	file:
MAXINDEXRK	lopcodes.h	143;"	d
MAXINTSIZE	lstrlib.cpp	1111;"	d	file:
MAXLASTD	lobject.cpp	297;"	d	file:
MAXNUMBER2STR	lobject.cpp	365;"	d	file:
MAXREGS	lcode.cpp	33;"	d	file:
MAXSIGDIG	lobject.cpp	187;"	d	file:
MAXSIZE	lstrlib.cpp	48;"	d	file:
MAXTAGLOOP	lvm.cpp	35;"	d	file:
MAXUNICODE	lutf8lib.cpp	23;"	d	file:
MAXUPVAL	lfunc.h	29;"	d
MAXVARS	lparser.cpp	34;"	d	file:
MAX_FORMAT	lstrlib.cpp	905;"	d	file:
MAX_INDEX	test/apr_pools.cpp	67;"	d	file:
MAX_INT	llimits.h	51;"	d
MAX_ITEM	lstrlib.cpp	896;"	d	file:
MAX_LMEM	llimits.h	48;"	d
MAX_LUMEM	llimits.h	46;"	d
MAX_SIZE	llimits.h	42;"	d
MAX_SIZET	llimits.h	39;"	d
MAX_SIZET	lstrlib.cpp	46;"	d	file:
MC	lstrlib.cpp	1117;"	d	file:
MEMERRMSG	lstring.cpp	25;"	d	file:
MEM_ALLOC_SIZE	test/t.c	12;"	d	file:
MINSIZEARRAY	lmem.cpp	45;"	d	file:
MINSTRTABSIZE	llimits.h	188;"	d
MIN_ALLOC	test/apr_pools.cpp	66;"	d	file:
MYINT	lundump.h	21;"	d
Maj	dh/tweetnacl.cpp	/^static u64 Maj(u64 x,u64 y,u64 z) { return (x & y) ^ (x & z) ^ (y & z); }$/;"	f	file:
MatchState	lstrlib.cpp	/^typedef struct MatchState {$/;"	s	file:
MatchState	lstrlib.cpp	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
Mbuffer	lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
NB	lstrlib.cpp	1114;"	d	file:
NBITS	lvm.cpp	588;"	d	file:
NBM	lvm.cpp	47;"	d	file:
NILCONSTANT	lobject.h	120;"	d
NOIME	test/apr.h	143;"	d
NOMCX	test/apr.h	140;"	d
NONVALIDVALUE	lapi.cpp	41;"	d	file:
NOUSER	test/apr.h	137;"	d
NO_JUMP	lcode.h	20;"	d
NO_REG	lopcodes.h	153;"	d
NUM_OPCODES	lopcodes.h	237;"	d
NUM_RESERVED	llex.h	40;"	d
Node	lobject.h	/^typedef struct Node {$/;"	s
Node	lobject.h	/^} Node;$/;"	t	typeref:struct:Node
OPR_ADD	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_BAND	lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BNOT	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_BOR	lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BXOR	lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_CONCAT	lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	lcode.h	/^  OPR_DIV,$/;"	e	enum:BinOpr
OPR_EQ	lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_GE	lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_IDIV	lcode.h	/^  OPR_IDIV,$/;"	e	enum:BinOpr
OPR_LE	lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_LEN	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_MINUS	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_NOBINOPR	lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SHL	lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SHR	lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SUB	lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OP_ADD	lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon12
OP_BAND	lopcodes.h	/^OP_BAND,\/*	A B C	R(A) := RK(B) & RK(C)				*\/$/;"	e	enum:__anon12
OP_BNOT	lopcodes.h	/^OP_BNOT,\/*	A B	R(A) := ~R(B)					*\/$/;"	e	enum:__anon12
OP_BOR	lopcodes.h	/^OP_BOR,\/*	A B C	R(A) := RK(B) | RK(C)				*\/$/;"	e	enum:__anon12
OP_BXOR	lopcodes.h	/^OP_BXOR,\/*	A B C	R(A) := RK(B) ~ RK(C)				*\/$/;"	e	enum:__anon12
OP_CALL	lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon12
OP_CLOSURE	lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx])			*\/$/;"	e	enum:__anon12
OP_CONCAT	lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon12
OP_DIV	lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon12
OP_EQ	lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon12
OP_EXTRAARG	lopcodes.h	/^OP_EXTRAARG\/*	Ax	extra (larger) argument for previous opcode	*\/$/;"	e	enum:__anon12
OP_FORLOOP	lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon12
OP_FORPREP	lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon12
OP_GETTABLE	lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon12
OP_GETTABUP	lopcodes.h	/^OP_GETTABUP,\/*	A B C	R(A) := UpValue[B][RK(C)]			*\/$/;"	e	enum:__anon12
OP_GETUPVAL	lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon12
OP_IDIV	lopcodes.h	/^OP_IDIV,\/*	A B C	R(A) := RK(B) \/\/ RK(C)				*\/$/;"	e	enum:__anon12
OP_JMP	lopcodes.h	/^OP_JMP,\/*	A sBx	pc+=sBx; if (A) close all upvalues >= R(A - 1)	*\/$/;"	e	enum:__anon12
OP_LE	lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon12
OP_LEN	lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon12
OP_LOADBOOL	lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon12
OP_LOADK	lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon12
OP_LOADKX	lopcodes.h	/^OP_LOADKX,\/*	A 	R(A) := Kst(extra arg)				*\/$/;"	e	enum:__anon12
OP_LOADNIL	lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A), R(A+1), ..., R(A+B) := nil		*\/$/;"	e	enum:__anon12
OP_LT	lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon12
OP_MOD	lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon12
OP_MOVE	lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon12
OP_MUL	lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon12
OP_NEWTABLE	lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon12
OP_NOT	lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon12
OP_POW	lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon12
OP_RETURN	lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon12
OP_SELF	lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon12
OP_SETLIST	lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon12
OP_SETTABLE	lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon12
OP_SETTABUP	lopcodes.h	/^OP_SETTABUP,\/*	A B C	UpValue[A][RK(B)] := RK(C)			*\/$/;"	e	enum:__anon12
OP_SETUPVAL	lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon12
OP_SHL	lopcodes.h	/^OP_SHL,\/*	A B C	R(A) := RK(B) << RK(C)				*\/$/;"	e	enum:__anon12
OP_SHR	lopcodes.h	/^OP_SHR,\/*	A B C	R(A) := RK(B) >> RK(C)				*\/$/;"	e	enum:__anon12
OP_SUB	lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon12
OP_TAILCALL	lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon12
OP_TEST	lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/$/;"	e	enum:__anon12
OP_TESTSET	lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/$/;"	e	enum:__anon12
OP_TFORCALL	lopcodes.h	/^OP_TFORCALL,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));	*\/$/;"	e	enum:__anon12
OP_TFORLOOP	lopcodes.h	/^OP_TFORLOOP,\/*	A sBx	if R(A+1) ~= nil then { R(A)=R(A+1); pc += sBx }*\/$/;"	e	enum:__anon12
OP_UNM	lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon12
OP_VARARG	lopcodes.h	/^OP_VARARG,\/*	A B	R(A), R(A+1), ..., R(A+B-2) = vararg		*\/$/;"	e	enum:__anon12
OpArgK	lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgMask	lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgN	lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgR	lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgU	lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpCode	lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon12
OpMode	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	g
PAUSEADJ	lgc.cpp	59;"	d	file:
PCSTR	sgx_includes.h	/^typedef CONST CHAR *LPCSTR, *PCSTR;$/;"	t
PCTSTR	sgx_includes.h	/^typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;$/;"	t
PCUTSTR	sgx_includes.h	/^typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;$/;"	t
PI	lmathlib.cpp	22;"	d	file:
PI	lmathlib.cpp	23;"	d	file:
POOL_POISON_BYTE	test/apr_pools.cpp	1553;"	d	file:
POS	lobject.cpp	483;"	d	file:
POS_A	lopcodes.h	47;"	d
POS_Ax	lopcodes.h	51;"	d
POS_B	lopcodes.h	49;"	d
POS_Bx	lopcodes.h	50;"	d
POS_C	lopcodes.h	48;"	d
POS_OP	lopcodes.h	46;"	d
PRE	lobject.cpp	482;"	d	file:
PRINTBIT	lctype.h	41;"	d
Pfunc	ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t
Protect	lvm.cpp	747;"	d	file:
Proto	lobject.h	/^typedef struct Proto {$/;"	s
Proto	lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
R	dh/tweetnacl.cpp	/^static u64 R(u64 x,int c) { return (x >> c) | (x << (64 - c)); }$/;"	f	file:
RA	lvm.cpp	728;"	d	file:
RANLIMIT	ltablib.cpp	274;"	d	file:
RB	lvm.cpp	729;"	d	file:
RC	lvm.cpp	730;"	d	file:
RESERVED	llex.h	/^enum RESERVED {$/;"	g
RESERVEDSLOT	lbaselib.cpp	308;"	d	file:
RETS	lobject.cpp	481;"	d	file:
RKASK	lopcodes.h	147;"	d
RKB	lvm.cpp	731;"	d	file:
RKC	lvm.cpp	733;"	d	file:
RN	liolib.cpp	/^} RN;$/;"	t	typeref:struct:__anon7	file:
S	dh/tweetnacl.cpp	/^sv S(gf o,const gf a)$/;"	f
SEEK_CUR	sgx_includes.h	69;"	d
SEEK_END	sgx_includes.h	70;"	d
SEEK_SET	sgx_includes.h	71;"	d
SETARG_A	lopcodes.h	98;"	d
SETARG_Ax	lopcodes.h	110;"	d
SETARG_B	lopcodes.h	101;"	d
SETARG_Bx	lopcodes.h	107;"	d
SETARG_C	lopcodes.h	104;"	d
SETARG_sBx	lopcodes.h	113;"	d
SET_OPCODE	lopcodes.h	90;"	d
SGX_CAST	Enclave_t.h	14;"	d
SIZELENMOD	lstrlib.cpp	818;"	d	file:
SIZEOF_ALLOCATOR_T	test/apr_pools.cpp	137;"	d	file:
SIZEOF_DEBUG_NODE_T	test/apr_pools.cpp	541;"	d	file:
SIZEOF_POOL_T	test/apr_pools.cpp	597;"	d	file:
SIZETIMEFMT	loslib.cpp	280;"	d	file:
SIZE_A	lopcodes.h	41;"	d
SIZE_Ax	lopcodes.h	42;"	d
SIZE_B	lopcodes.h	39;"	d
SIZE_Bx	lopcodes.h	40;"	d
SIZE_C	lopcodes.h	38;"	d
SIZE_OP	lopcodes.h	44;"	d
SOCBASEERR	test/apr_errno.h	881;"	d
SOCEACCES	test/apr_errno.h	887;"	d
SOCEADDRINUSE	test/apr_errno.h	906;"	d
SOCEADDRNOTAVAIL	test/apr_errno.h	907;"	d
SOCEAFNOSUPPORT	test/apr_errno.h	905;"	d
SOCEALREADY	test/apr_errno.h	895;"	d
SOCEBADF	test/apr_errno.h	886;"	d
SOCECONNABORTED	test/apr_errno.h	911;"	d
SOCECONNREFUSED	test/apr_errno.h	919;"	d
SOCECONNRESET	test/apr_errno.h	912;"	d
SOCEDESTADDRREQ	test/apr_errno.h	897;"	d
SOCEFAULT	test/apr_errno.h	888;"	d
SOCEHOSTDOWN	test/apr_errno.h	922;"	d
SOCEHOSTUNREACH	test/apr_errno.h	923;"	d
SOCEINPROGRESS	test/apr_errno.h	894;"	d
SOCEINTR	test/apr_errno.h	884;"	d
SOCEINVAL	test/apr_errno.h	889;"	d
SOCEISCONN	test/apr_errno.h	914;"	d
SOCELOOP	test/apr_errno.h	920;"	d
SOCEMFILE	test/apr_errno.h	890;"	d
SOCEMSGSIZE	test/apr_errno.h	898;"	d
SOCENAMETOOLONG	test/apr_errno.h	921;"	d
SOCENETDOWN	test/apr_errno.h	908;"	d
SOCENETRESET	test/apr_errno.h	910;"	d
SOCENETUNREACH	test/apr_errno.h	909;"	d
SOCENOBUFS	test/apr_errno.h	913;"	d
SOCENOPROTOOPT	test/apr_errno.h	900;"	d
SOCENOTCONN	test/apr_errno.h	915;"	d
SOCENOTEMPTY	test/apr_errno.h	924;"	d
SOCENOTSOCK	test/apr_errno.h	896;"	d
SOCENXIO	test/apr_errno.h	885;"	d
SOCEOPNOTSUPP	test/apr_errno.h	903;"	d
SOCEOS2ERR	test/apr_errno.h	892;"	d
SOCEPERM	test/apr_errno.h	882;"	d
SOCEPFNOSUPPORT	test/apr_errno.h	904;"	d
SOCEPIPE	test/apr_errno.h	891;"	d
SOCEPROTONOSUPPORT	test/apr_errno.h	901;"	d
SOCEPROTOTYPE	test/apr_errno.h	899;"	d
SOCESHUTDOWN	test/apr_errno.h	916;"	d
SOCESOCKTNOSUPPORT	test/apr_errno.h	902;"	d
SOCESRCH	test/apr_errno.h	883;"	d
SOCETIMEDOUT	test/apr_errno.h	918;"	d
SOCETOOMANYREFS	test/apr_errno.h	917;"	d
SOCEWOULDBLOCK	test/apr_errno.h	893;"	d
SPACEBIT	lctype.h	42;"	d
SPACECHARS	lbaselib.cpp	46;"	d	file:
SPECIALS	lstrlib.cpp	239;"	d	file:
SParser	ldo.cpp	/^struct SParser {  \/* data to 'f_parser' *\/$/;"	s	file:
STEPMULADJ	lgc.cpp	52;"	d	file:
STRCACHE_M	llimits.h	199;"	d
STRCACHE_N	llimits.h	198;"	d
SW_HIDE	test/apr.h	152;"	d
SZINT	lstrlib.cpp	1120;"	d	file:
SemInfo	llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon8
Sigma0	dh/tweetnacl.cpp	/^static u64 Sigma0(u64 x) { return R(x,28) ^ R(x,34) ^ R(x,39); }$/;"	f	file:
Sigma1	dh/tweetnacl.cpp	/^static u64 Sigma1(u64 x) { return R(x,14) ^ R(x,18) ^ R(x,41); }$/;"	f	file:
StkId	lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t
TAB_L	ltablib.cpp	29;"	d	file:
TAB_R	ltablib.cpp	27;"	d	file:
TAB_RW	ltablib.cpp	30;"	d	file:
TAB_W	ltablib.cpp	28;"	d	file:
TIMEOUT_INTERVAL	test/apr_pools.cpp	97;"	d	file:
TIMEOUT_USECS	test/apr_pools.cpp	96;"	d	file:
TK_AND	llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_DBCOLON	llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_DO	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_ELSE	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_EQ	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_FALSE	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FLT	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_FOR	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_GOTO	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IDIV	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_IF	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_INT	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_LE	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_LOCAL	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_NE	llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_NIL	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_OR	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_SHL	llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_SHR	llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_STRING	llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_THEN	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TKey	lobject.h	/^typedef union TKey {$/;"	u
TKey	lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TMS	ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon25
TM_ADD	ltm.h	/^  TM_ADD,$/;"	e	enum:__anon25
TM_BAND	ltm.h	/^  TM_BAND,$/;"	e	enum:__anon25
TM_BNOT	ltm.h	/^  TM_BNOT,$/;"	e	enum:__anon25
TM_BOR	ltm.h	/^  TM_BOR,$/;"	e	enum:__anon25
TM_BXOR	ltm.h	/^  TM_BXOR,$/;"	e	enum:__anon25
TM_CALL	ltm.h	/^  TM_CALL,$/;"	e	enum:__anon25
TM_CONCAT	ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon25
TM_DIV	ltm.h	/^  TM_DIV,$/;"	e	enum:__anon25
TM_EQ	ltm.h	/^  TM_EQ,  \/* last tag method with fast access *\/$/;"	e	enum:__anon25
TM_GC	ltm.h	/^  TM_GC,$/;"	e	enum:__anon25
TM_IDIV	ltm.h	/^  TM_IDIV,$/;"	e	enum:__anon25
TM_INDEX	ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon25
TM_LE	ltm.h	/^  TM_LE,$/;"	e	enum:__anon25
TM_LEN	ltm.h	/^  TM_LEN,$/;"	e	enum:__anon25
TM_LT	ltm.h	/^  TM_LT,$/;"	e	enum:__anon25
TM_MOD	ltm.h	/^  TM_MOD,$/;"	e	enum:__anon25
TM_MODE	ltm.h	/^  TM_MODE,$/;"	e	enum:__anon25
TM_MUL	ltm.h	/^  TM_MUL,$/;"	e	enum:__anon25
TM_N	ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon25
TM_NEWINDEX	ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon25
TM_POW	ltm.h	/^  TM_POW,$/;"	e	enum:__anon25
TM_SHL	ltm.h	/^  TM_SHL,$/;"	e	enum:__anon25
TM_SHR	ltm.h	/^  TM_SHR,$/;"	e	enum:__anon25
TM_SUB	ltm.h	/^  TM_SUB,$/;"	e	enum:__anon25
TM_UNM	ltm.h	/^  TM_UNM,$/;"	e	enum:__anon25
TRUE	test/apr_general.h	52;"	d
TString	lobject.h	/^typedef struct TString {$/;"	s
TString	lobject.h	/^} TString;$/;"	t	typeref:struct:TString
TValue	lobject.h	/^} TValue;$/;"	t	typeref:struct:lua_TValue
TValuefields	lobject.h	/^    TValuefields;$/;"	m	struct:TKey::__anon11
TValuefields	lobject.h	/^  TValuefields;$/;"	m	struct:lua_TValue
TValuefields	lobject.h	110;"	d
TWEETNACL_H	dh/tweetnacl.h	2;"	d
Table	lobject.h	/^typedef struct Table {$/;"	s
Table	lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Token	llex.h	/^typedef struct Token {$/;"	s
Token	llex.h	/^} Token;$/;"	t	typeref:struct:Token
UBox	lauxlib.cpp	/^typedef struct UBox {$/;"	s	file:
UBox	lauxlib.cpp	/^} UBox;$/;"	t	typeref:struct:UBox	file:
UINT	sgx_includes.h	/^typedef unsigned int UINT;$/;"	t
UMM_BEST_FIT	umm_malloc.cpp	14;"	d	file:
UMM_BLOCK	umm_malloc.cpp	57;"	d	file:
UMM_BLOCKNO_MASK	umm_malloc.cpp	38;"	d	file:
UMM_CRITICAL_ENTRY	umm_malloc_cfg.h	84;"	d
UMM_CRITICAL_EXIT	umm_malloc_cfg.h	85;"	d
UMM_DATA	umm_malloc.cpp	63;"	d	file:
UMM_FREELIST_MASK	umm_malloc.cpp	37;"	d	file:
UMM_HEAP_INFO	umm_malloc.h	/^UMM_HEAP_INFO;$/;"	t	typeref:struct:UMM_HEAP_INFO_t
UMM_HEAP_INFO_t	umm_malloc.h	/^typedef struct UMM_HEAP_INFO_t {$/;"	s
UMM_H_ATTPACKPRE	umm_malloc_cfg.h	72;"	d
UMM_H_ATTPACKSUF	umm_malloc_cfg.h	73;"	d
UMM_MALLOC_CFG__HEAP_SIZE	umm_malloc_cfg.h	67;"	d
UMM_MALLOC_H	umm_malloc.h	8;"	d
UMM_NBLOCK	umm_malloc.cpp	59;"	d	file:
UMM_NFREE	umm_malloc.cpp	61;"	d	file:
UMM_NUMBLOCKS	umm_malloc.cpp	52;"	d	file:
UMM_PBLOCK	umm_malloc.cpp	60;"	d	file:
UMM_PFREE	umm_malloc.cpp	62;"	d	file:
UNARY_PRIORITY	lparser.cpp	1041;"	d	file:
UNUSED	llimits.h	106;"	d
UTF8BUFFSZ	lobject.h	531;"	d
UTF8PATT	lutf8lib.cpp	235;"	d	file:
UTString	lobject.h	/^typedef union UTString {$/;"	u
UTString	lobject.h	/^} UTString;$/;"	t	typeref:union:UTString
UUdata	lobject.h	/^typedef union UUdata {$/;"	u
UUdata	lobject.h	/^} UUdata;$/;"	t	typeref:union:UUdata
Udata	lobject.h	/^typedef struct Udata {$/;"	s
Udata	lobject.h	/^} Udata;$/;"	t	typeref:struct:Udata
UnOpr	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UpVal	lfunc.h	/^struct UpVal {$/;"	s
UpVal	lobject.h	/^typedef struct UpVal UpVal;$/;"	t	typeref:struct:UpVal
Upvaldesc	lobject.h	/^typedef struct Upvaldesc {$/;"	s
Upvaldesc	lobject.h	/^} Upvaldesc;$/;"	t	typeref:struct:Upvaldesc
VCALL	lparser.h	/^  VCALL,  \/* expression is a function call; info = instruction pc *\/$/;"	e	enum:__anon14
VFALSE	lparser.h	/^  VFALSE,  \/* constant false *\/$/;"	e	enum:__anon14
VINDEXED	lparser.h	/^  VINDEXED,  \/* indexed variable;$/;"	e	enum:__anon14
VJMP	lparser.h	/^  VJMP,  \/* expression is a test\/comparison;$/;"	e	enum:__anon14
VK	lparser.h	/^  VK,  \/* constant in 'k'; info = index of constant in 'k' *\/$/;"	e	enum:__anon14
VKFLT	lparser.h	/^  VKFLT,  \/* floating constant; nval = numerical float value *\/$/;"	e	enum:__anon14
VKINT	lparser.h	/^  VKINT,  \/* integer constant; nval = numerical integer value *\/$/;"	e	enum:__anon14
VLOCAL	lparser.h	/^  VLOCAL,  \/* local variable; info = local register *\/$/;"	e	enum:__anon14
VNIL	lparser.h	/^  VNIL,  \/* constant nil *\/$/;"	e	enum:__anon14
VNONRELOC	lparser.h	/^  VNONRELOC,  \/* expression has its value in a fixed register;$/;"	e	enum:__anon14
VRELOCABLE	lparser.h	/^  VRELOCABLE,  \/* expression can put result in any register;$/;"	e	enum:__anon14
VTRUE	lparser.h	/^  VTRUE,  \/* constant true *\/$/;"	e	enum:__anon14
VUPVAL	lparser.h	/^  VUPVAL,  \/* upvalue variable; info = index of upvalue in 'upvalues' *\/$/;"	e	enum:__anon14
VVARARG	lparser.h	/^  VVARARG  \/* vararg expression; info = instruction pc *\/$/;"	e	enum:__anon14
VVOID	lparser.h	/^  VVOID,  \/* when 'expdesc' describes the last expression a list,$/;"	e	enum:__anon14
Value	lobject.h	/^typedef union Value {$/;"	u
Value	lobject.h	/^} Value;$/;"	t	typeref:union:Value
Vardesc	lparser.h	/^typedef struct Vardesc {$/;"	s
Vardesc	lparser.h	/^} Vardesc;$/;"	t	typeref:struct:Vardesc
WEXITSTATUS	test/apr.h	612;"	d
WHITE0BIT	lgc.h	78;"	d
WHITE1BIT	lgc.h	79;"	d
WHITEBITS	lgc.h	84;"	d
WIN32_LEAN_AND_MEAN	test/apr.h	127;"	d
WTERMSIG	test/apr.h	613;"	d
X	dh/tweetnacl.cpp	/^  X = {0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169},$/;"	v	file:
XDIGITBIT	lctype.h	43;"	d
Y	dh/tweetnacl.cpp	/^  Y = {0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666},$/;"	v	file:
Z	dh/tweetnacl.cpp	/^sv Z(gf o,const gf a,const gf b)$/;"	f
Z	lundump.cpp	/^  ZIO *Z;$/;"	m	struct:__anon26	file:
ZIO	lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
Zio	lzio.h	/^struct Zio {$/;"	s
_0	dh/tweetnacl.cpp	/^  _0[16],$/;"	v	file:
_121665	dh/tweetnacl.cpp	/^  _121665 = {0xDB41,1},$/;"	v	file:
_9	dh/tweetnacl.cpp	/^  _9[32] = {9};$/;"	v	file:
_CRT_SECURE_NO_WARNINGS	lprefix.h	39;"	d
_ERRNO_T_DEFINED	sgx_includes.h	61;"	d
_FILE_DEFINED	sgx_includes.h	57;"	d
_FILE_OFFSET_BITS	lprefix.h	27;"	d
_IOFBF	sgx_includes.h	14;"	d
_IOLBF	sgx_includes.h	13;"	d
_IONBF	sgx_includes.h	12;"	d
_IO_FILE	sgx_includes.h	/^struct _IO_FILE {$/;"	s
_IO_backup_base	sgx_includes.h	/^  char *_IO_backup_base;  \/* Pointer to first valid character of backup area *\/$/;"	m	struct:_IO_FILE
_IO_buf_base	sgx_includes.h	/^  char* _IO_buf_base;	\/* Start of reserve area. *\/$/;"	m	struct:_IO_FILE
_IO_buf_end	sgx_includes.h	/^  char* _IO_buf_end;	\/* End of reserve area. *\/$/;"	m	struct:_IO_FILE
_IO_file_flags	sgx_includes.h	21;"	d
_IO_read_base	sgx_includes.h	/^  char* _IO_read_base;	\/* Start of putback+get area. *\/$/;"	m	struct:_IO_FILE
_IO_read_end	sgx_includes.h	/^  char* _IO_read_end;	\/* End of get area. *\/$/;"	m	struct:_IO_FILE
_IO_read_ptr	sgx_includes.h	/^  char* _IO_read_ptr;	\/* Current read pointer *\/$/;"	m	struct:_IO_FILE
_IO_save_base	sgx_includes.h	/^  char *_IO_save_base; \/* Pointer to start of non-current get area. *\/$/;"	m	struct:_IO_FILE
_IO_save_end	sgx_includes.h	/^  char *_IO_save_end; \/* Pointer to end of non-current get area. *\/$/;"	m	struct:_IO_FILE
_IO_write_base	sgx_includes.h	/^  char* _IO_write_base;	\/* Start of put area. *\/$/;"	m	struct:_IO_FILE
_IO_write_end	sgx_includes.h	/^  char* _IO_write_end;	\/* End of put area. *\/$/;"	m	struct:_IO_FILE
_IO_write_ptr	sgx_includes.h	/^  char* _IO_write_ptr;	\/* Current put pointer. *\/$/;"	m	struct:_IO_FILE
_LARGEFILE_SOURCE	lprefix.h	26;"	d
_O_BINARY	sgx_includes.h	66;"	d
_O_TEXT	sgx_includes.h	65;"	d
_SGX_INC_	sgx_includes.h	2;"	d
_UMM_MALLOC_CFG_H	umm_malloc_cfg.h	6;"	d
_WIN32_WINNT	test/apr.h	133;"	d
_XOPEN_SOURCE	lprefix.h	17;"	d
_XOPEN_SOURCE	lprefix.h	19;"	d
__HAVE_COLUMN	sgx_includes.h	46;"	d
__STDC_CONSTANT_MACROS	test/apr.h	174;"	d
__STDC_FORMAT_MACROS	test/apr.h	178;"	d
__attribute__	test/apr.h	63;"	d
_chain	sgx_includes.h	/^  struct _IO_FILE *_chain;$/;"	m	struct:_IO_FILE	typeref:struct:_IO_FILE::_IO_FILE
_cur_column	sgx_includes.h	/^  unsigned short _cur_column;$/;"	m	struct:_IO_FILE
_fileno	sgx_includes.h	/^  int _fileno;$/;"	m	struct:_IO_FILE
_flags	sgx_includes.h	/^  int _flags;		\/* High-order word is _IO_MAGIC; rest is flags. *\/$/;"	m	struct:_IO_FILE
_flags2	sgx_includes.h	/^  int _flags2;$/;"	m	struct:_IO_FILE
_markers	sgx_includes.h	/^  struct _IO_marker *_markers;$/;"	m	struct:_IO_FILE	typeref:struct:_IO_FILE::_IO_marker
_old_offset	sgx_includes.h	/^  long long int _old_offset; \/* This used to be _offset but it's too small.  *\/$/;"	m	struct:_IO_FILE
_shortbuf	sgx_includes.h	/^  char _shortbuf[1];$/;"	m	struct:_IO_FILE
_vtable_offset	sgx_includes.h	/^  signed char _vtable_offset;$/;"	m	struct:_IO_FILE
abort_fn	test/apr_pools.cpp	/^    apr_abortfunc_t       abort_fn;$/;"	m	struct:apr_pool_t	file:
active	test/apr_pools.cpp	/^    apr_memnode_t        *active;$/;"	m	struct:apr_pool_t	file:
actvar	lparser.h	/^  } actvar;$/;"	m	struct:Dyndata	typeref:struct:Dyndata::__anon17
add	dh/tweetnacl.cpp	/^sv add(gf p[4],gf q[4])$/;"	f
add1305	dh/tweetnacl.cpp	/^sv add1305(u32 *h,const u32 *c)$/;"	f
add_redzone	test/apr_pools.cpp	/^static int add_redzone(int (*flush_func)(apr_vformatter_buff_t *b),$/;"	f	file:
add_s	lstrlib.cpp	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
add_value	lstrlib.cpp	/^static void add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
addbuff	lstate.cpp	77;"	d	file:
adddigit	lstrlib.cpp	/^static lua_Number adddigit (char *buff, int n, lua_Number x) {$/;"	f	file:
addfield	ltablib.cpp	/^static void addfield (lua_State *L, luaL_Buffer *b, lua_Integer i) {$/;"	f	file:
addk	lcode.cpp	/^static int addk (FuncState *fs, TValue *key, TValue *v) {$/;"	f	file:
addlenmod	lstrlib.cpp	/^static void addlenmod (char *form, const char *lenmod) {$/;"	f	file:
addliteral	lstrlib.cpp	/^static void addliteral (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f	file:
addprototype	lparser.cpp	/^static Proto *addprototype (LexState *ls) {$/;"	f	file:
addquoted	lstrlib.cpp	/^static void addquoted (luaL_Buffer *b, const char *s, size_t len) {$/;"	f	file:
addreturn	lua.cpp	/^static int addreturn (lua_State *L) {$/;"	f	file:
addstr	lobject.cpp	485;"	d	file:
addtoclib	loadlib.cpp	/^static void addtoclib (lua_State *L, const char *path, void *plib) {$/;"	f	file:
adjust_assign	lparser.cpp	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f	file:
adjust_varargs	ldo.cpp	/^static StkId adjust_varargs (lua_State *L, Proto *p, int actual) {$/;"	f	file:
adjustlocalvars	lparser.cpp	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f	file:
adjustresults	lapi.h	17;"	d
allgc	lstate.h	/^  GCObject *allgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State
allocator	test/apr_pools.cpp	/^    apr_allocator_t      *allocator;$/;"	m	struct:apr_pool_t	file:
allocator_align	test/apr_pools.cpp	/^apr_size_t allocator_align(apr_size_t in_size)$/;"	f	file:
allocator_alloc	test/apr_pools.cpp	/^apr_memnode_t *allocator_alloc(apr_allocator_t *allocator, apr_size_t in_size)$/;"	f	file:
allocator_free	test/apr_pools.cpp	/^void allocator_free(apr_allocator_t *allocator, apr_memnode_t *node)$/;"	f	file:
allocsizenode	ltable.h	35;"	d
allowhook	lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State
allweak	lstate.h	/^  GCObject *allweak;  \/* list of all-weak tables *\/$/;"	m	struct:global_State
andaux	lbitlib.cpp	/^static lua_Unsigned andaux (lua_State *L) {$/;"	f	file:
api_check	llimits.h	101;"	d
api_checknelems	lapi.h	20;"	d
api_checkstackindex	lapi.cpp	57;"	d	file:
api_checkvalidindex	lapi.cpp	55;"	d	file:
api_incr_top	lapi.h	14;"	d
apr_abortfunc_t	test/apr_pools.h	/^typedef int (*apr_abortfunc_t)(int retcode);$/;"	t
apr_allocator_align	test/apr_pools.cpp	/^APR_DECLARE(apr_size_t) apr_allocator_align(apr_allocator_t *allocator,$/;"	f
apr_allocator_alloc	test/apr_pools.cpp	/^APR_DECLARE(apr_memnode_t *) apr_allocator_alloc(apr_allocator_t *allocator,$/;"	f
apr_allocator_create	test/apr_pools.cpp	/^APR_DECLARE(apr_status_t) apr_allocator_create(apr_allocator_t **allocator)$/;"	f
apr_allocator_destroy	test/apr_pools.cpp	/^APR_DECLARE(void) apr_allocator_destroy(apr_allocator_t *allocator)$/;"	f
apr_allocator_free	test/apr_pools.cpp	/^APR_DECLARE(void) apr_allocator_free(apr_allocator_t *allocator,$/;"	f
apr_allocator_max_free_set	test/apr_pools.cpp	/^APR_DECLARE(void) apr_allocator_max_free_set(apr_allocator_t *allocator,$/;"	f
apr_allocator_mutex_get	test/apr_pools.cpp	/^APR_DECLARE(apr_thread_mutex_t *) apr_allocator_mutex_get($/;"	f
apr_allocator_mutex_set	test/apr_pools.cpp	/^APR_DECLARE(void) apr_allocator_mutex_set(apr_allocator_t *allocator,$/;"	f
apr_allocator_owner_get	test/apr_pools.cpp	/^APR_DECLARE(apr_pool_t *) apr_allocator_owner_get(apr_allocator_t *allocator)$/;"	f
apr_allocator_owner_set	test/apr_pools.cpp	/^APR_DECLARE(void) apr_allocator_owner_set(apr_allocator_t *allocator,$/;"	f
apr_allocator_t	test/apr_allocator.h	/^typedef struct apr_allocator_t apr_allocator_t;$/;"	t	typeref:struct:apr_allocator_t
apr_allocator_t	test/apr_pools.cpp	/^struct apr_allocator_t {$/;"	s	file:
apr_app_initialize	test/start.cpp	/^APR_DECLARE(apr_status_t) apr_app_initialize(int *argc, $/;"	f
apr_byte_t	test/apr.h	/^typedef  unsigned char           apr_byte_t;$/;"	t
apr_get_netos_error	test/apr_errno.h	1036;"	d
apr_get_netos_error	test/apr_errno.h	1154;"	d
apr_get_netos_error	test/apr_errno.h	1222;"	d
apr_get_netos_error	test/apr_errno.h	871;"	d
apr_get_os_error	test/apr_errno.h	1031;"	d
apr_get_os_error	test/apr_errno.h	1150;"	d
apr_get_os_error	test/apr_errno.h	1217;"	d
apr_hash_do_callback_fn_t	test/apr_hash.h	/^typedef int (apr_hash_do_callback_fn_t)(void *rec, const void *key,$/;"	t
apr_hash_index_t	test/apr_hash.h	/^typedef struct apr_hash_index_t apr_hash_index_t;$/;"	t	typeref:struct:apr_hash_index_t
apr_hash_t	test/apr_hash.h	/^typedef struct apr_hash_t apr_hash_t;$/;"	t	typeref:struct:apr_hash_t
apr_hashfunc_t	test/apr_hash.h	/^typedef unsigned int (*apr_hashfunc_t)(const char *key, apr_ssize_t *klen);$/;"	t
apr_initialize	test/start.cpp	/^APR_DECLARE(apr_status_t) apr_initialize(void)$/;"	f
apr_int16_t	test/apr.h	/^typedef  short           apr_int16_t;$/;"	t
apr_int32_t	test/apr.h	/^typedef  int             apr_int32_t;$/;"	t
apr_int64_t	test/apr.h	/^ typedef  int64_t           apr_int64_t;$/;"	t
apr_int64_t	test/apr.h	/^ typedef  long            apr_int64_t;$/;"	t
apr_int64_t	test/apr.h	/^ typedef  long long            apr_int64_t;$/;"	t
apr_memnode_t	test/apr_allocator.h	/^struct apr_memnode_t {$/;"	s
apr_memnode_t	test/apr_allocator.h	/^typedef struct apr_memnode_t apr_memnode_t;$/;"	t	typeref:struct:apr_memnode_t
apr_off_t	test/apr.h	/^typedef  off_t           apr_off_t;$/;"	t
apr_palloc	test/apr_pools.cpp	/^APR_DECLARE(void *) apr_palloc(apr_pool_t *pool, apr_size_t in_size)$/;"	f
apr_palloc	test/apr_pools.cpp	/^APR_DECLARE(void *) apr_palloc(apr_pool_t *pool, apr_size_t size)$/;"	f
apr_palloc	test/apr_pools.cpp	2372;"	d	file:
apr_palloc	test/apr_pools.h	452;"	d
apr_palloc_debug	test/apr_pools.cpp	/^APR_DECLARE(void *) apr_palloc_debug(apr_pool_t *pool, apr_size_t size,$/;"	f
apr_pcalloc	test/apr_pools.cpp	/^APR_DECLARE(void *) apr_pcalloc(apr_pool_t *pool, apr_size_t size)$/;"	f
apr_pcalloc	test/apr_pools.cpp	2380;"	d	file:
apr_pcalloc	test/apr_pools.cpp	854;"	d	file:
apr_pcalloc	test/apr_pools.h	465;"	d
apr_pcalloc	test/apr_pools.h	481;"	d
apr_pcalloc_debug	test/apr_pools.cpp	/^APR_DECLARE(void *) apr_pcalloc_debug(apr_pool_t *pool, apr_size_t size,$/;"	f
apr_pool_abort_get	test/apr_pools.cpp	/^APR_DECLARE(apr_abortfunc_t) apr_pool_abort_get(apr_pool_t *pool)$/;"	f
apr_pool_abort_set	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_abort_set(apr_abortfunc_t abort_fn,$/;"	f
apr_pool_allocator_get	test/apr_pools.cpp	/^APR_DECLARE(apr_allocator_t *) apr_pool_allocator_get(apr_pool_t *pool)$/;"	f
apr_pool_check_integrity	test/apr_pools.cpp	/^static void apr_pool_check_integrity(apr_pool_t *pool)$/;"	f	file:
apr_pool_child_cleanup_set	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_child_cleanup_set(apr_pool_t *p, const void *data,$/;"	f
apr_pool_cleanup_for_exec	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_cleanup_for_exec(void)$/;"	f
apr_pool_cleanup_kill	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_cleanup_kill(apr_pool_t *p, const void *data,$/;"	f
apr_pool_cleanup_null	test/apr_pools.cpp	/^APR_DECLARE_NONSTD(apr_status_t) apr_pool_cleanup_null(void *data)$/;"	f
apr_pool_cleanup_register	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_cleanup_register(apr_pool_t *p, const void *data,$/;"	f
apr_pool_cleanup_run	test/apr_pools.cpp	/^APR_DECLARE(apr_status_t) apr_pool_cleanup_run(apr_pool_t *p, void *data,$/;"	f
apr_pool_clear	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_clear(apr_pool_t *pool)$/;"	f
apr_pool_clear	test/apr_pools.cpp	2388;"	d	file:
apr_pool_clear	test/apr_pools.h	385;"	d
apr_pool_clear_debug	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_clear_debug(apr_pool_t *pool,$/;"	f
apr_pool_create	test/apr_pools.h	318;"	d
apr_pool_create	test/apr_pools.h	322;"	d
apr_pool_create_core	test/apr_pools.h	336;"	d
apr_pool_create_core	test/apr_pools.h	343;"	d
apr_pool_create_core_ex	test/apr_pools.cpp	/^APR_DECLARE(apr_status_t) apr_pool_create_core_ex(apr_pool_t **newpool,$/;"	f
apr_pool_create_core_ex	test/apr_pools.cpp	2420;"	d	file:
apr_pool_create_core_ex	test/apr_pools.h	291;"	d
apr_pool_create_core_ex_debug	test/apr_pools.cpp	/^APR_DECLARE(apr_status_t) apr_pool_create_core_ex_debug(apr_pool_t **newpool,$/;"	f
apr_pool_create_ex	test/apr_pools.cpp	/^APR_DECLARE(apr_status_t) apr_pool_create_ex(apr_pool_t **newpool,$/;"	f
apr_pool_create_ex	test/apr_pools.cpp	2404;"	d	file:
apr_pool_create_ex	test/apr_pools.h	255;"	d
apr_pool_create_ex_debug	test/apr_pools.cpp	/^APR_DECLARE(apr_status_t) apr_pool_create_ex_debug(apr_pool_t **newpool,$/;"	f
apr_pool_create_unmanaged	test/apr_pools.h	339;"	d
apr_pool_create_unmanaged	test/apr_pools.h	345;"	d
apr_pool_create_unmanaged_ex	test/apr_pools.cpp	/^APR_DECLARE(apr_status_t) apr_pool_create_unmanaged_ex(apr_pool_t **newpool,$/;"	f
apr_pool_create_unmanaged_ex	test/apr_pools.cpp	2433;"	d	file:
apr_pool_create_unmanaged_ex	test/apr_pools.h	295;"	d
apr_pool_create_unmanaged_ex_debug	test/apr_pools.cpp	/^APR_DECLARE(apr_status_t) apr_pool_create_unmanaged_ex_debug(apr_pool_t **newpool,$/;"	f
apr_pool_destroy	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_destroy(apr_pool_t *pool)$/;"	f
apr_pool_destroy	test/apr_pools.cpp	2396;"	d	file:
apr_pool_destroy	test/apr_pools.h	415;"	d
apr_pool_destroy_debug	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_destroy_debug(apr_pool_t *pool,$/;"	f
apr_pool_find	test/apr_pools.cpp	/^APR_DECLARE(apr_pool_t *) apr_pool_find(const void *mem)$/;"	f
apr_pool_initialize	test/apr_pools.cpp	/^APR_DECLARE(apr_status_t) apr_pool_initialize(void)$/;"	f
apr_pool_is_ancestor	test/apr_pools.cpp	/^APR_DECLARE(int) apr_pool_is_ancestor(apr_pool_t *a, apr_pool_t *b)$/;"	f
apr_pool_is_child_of	test/apr_pools.cpp	/^static int apr_pool_is_child_of(apr_pool_t *pool, apr_pool_t *parent)$/;"	f	file:
apr_pool_join	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_join(apr_pool_t *p, apr_pool_t *sub)$/;"	f
apr_pool_join	test/apr_pools.h	798;"	d
apr_pool_join	test/apr_pools.h	800;"	d
apr_pool_lock	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_lock(apr_pool_t *pool, int flag)$/;"	f
apr_pool_lock	test/apr_pools.h	803;"	d
apr_pool_lock	test/apr_pools.h	805;"	d
apr_pool_log_event	test/apr_pools.cpp	/^static void apr_pool_log_event(apr_pool_t *pool, const char *event,$/;"	f	file:
apr_pool_num_bytes	test/apr_pools.cpp	/^APR_DECLARE(apr_size_t) apr_pool_num_bytes(apr_pool_t *pool, int recurse)$/;"	f
apr_pool_parent_get	test/apr_pools.cpp	/^APR_DECLARE(apr_pool_t *) apr_pool_parent_get(apr_pool_t *pool)$/;"	f
apr_pool_pre_cleanup_register	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_pre_cleanup_register(apr_pool_t *p, const void *data,$/;"	f
apr_pool_t	test/apr_pools.cpp	/^struct apr_pool_t {$/;"	s	file:
apr_pool_t	test/apr_pools.h	/^typedef struct apr_pool_t apr_pool_t;$/;"	t	typeref:struct:apr_pool_t
apr_pool_tag	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_tag(apr_pool_t *pool, const char *tag)$/;"	f
apr_pool_terminate	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_terminate(void)$/;"	f
apr_pool_walk_tree	test/apr_pools.cpp	/^static int apr_pool_walk_tree(apr_pool_t *pool,$/;"	f	file:
apr_pools_initialized	test/apr_pools.cpp	/^static apr_byte_t   apr_pools_initialized = 0;$/;"	v	file:
apr_set_netos_error	test/apr_errno.h	1037;"	d
apr_set_netos_error	test/apr_errno.h	1155;"	d
apr_set_netos_error	test/apr_errno.h	1223;"	d
apr_set_netos_error	test/apr_errno.h	872;"	d
apr_set_os_error	test/apr_errno.h	1032;"	d
apr_set_os_error	test/apr_errno.h	1151;"	d
apr_set_os_error	test/apr_errno.h	1218;"	d
apr_signum_t	test/apr_general.h	/^typedef int               apr_signum_t;$/;"	t
apr_size_t	test/apr.h	/^typedef  size_t          apr_size_t;$/;"	t
apr_ssize_t	test/apr.h	/^typedef  ssize_t         apr_ssize_t;$/;"	t
apr_status_t	test/apr_errno.h	/^typedef int apr_status_t;$/;"	t
apr_terminate	test/start.cpp	/^APR_DECLARE_NONSTD(void) apr_terminate(void)$/;"	f
apr_terminate2	test/start.cpp	/^APR_DECLARE(void) apr_terminate2(void)$/;"	f
apr_uint16_t	test/apr.h	/^typedef  unsigned short  apr_uint16_t;$/;"	t
apr_uint32_t	test/apr.h	/^typedef  unsigned int    apr_uint32_t;$/;"	t
apr_uint64_t	test/apr.h	/^ typedef  uint64_t          apr_uint64_t;$/;"	t
apr_uint64_t	test/apr.h	/^ typedef  unsigned long   apr_uint64_t;$/;"	t
apr_uint64_t	test/apr.h	/^ typedef  unsigned long long   apr_uint64_t;$/;"	t
apr_uintptr_t	test/apr.h	/^typedef  apr_uint32_t            apr_uintptr_t;$/;"	t
apr_uintptr_t	test/apr.h	/^typedef  apr_uint64_t            apr_uintptr_t;$/;"	t
apr_wait_t	test/apr.h	/^typedef int apr_wait_t;$/;"	t
apr_wait_t	test/apr.h	609;"	d
apr_wait_t	test/apr.h	611;"	d
argc	Enclave.cpp	/^int argc;                               \/* number of lua arguments                  *\/$/;"	v
argv	Enclave.cpp	/^char **argv;                            \/* the actual arguments of lua              *\/$/;"	v
arr	lparser.h	/^    Vardesc *arr;$/;"	m	struct:Dyndata::__anon17
arr	lparser.h	/^  Labeldesc *arr;  \/* array *\/$/;"	m	struct:Labellist
array	lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table
arrayindex	ltable.cpp	/^static unsigned int arrayindex (const TValue *key) {$/;"	f	file:
assignment	lparser.cpp	/^static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f	file:
atomic	lgc.cpp	/^static l_mem atomic (lua_State *L) {$/;"	f	file:
aux_close	liolib.cpp	/^static int aux_close (lua_State *L) {$/;"	f	file:
aux_getn	ltablib.cpp	33;"	d	file:
aux_lines	liolib.cpp	/^static void aux_lines (lua_State *L, int toclose) {$/;"	f	file:
aux_upvalue	lapi.cpp	/^static const char *aux_upvalue (StkId fi, int n, TValue **val,$/;"	f	file:
auxgetinfo	ldebug.cpp	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f	file:
auxgetstr	lapi.cpp	/^static int auxgetstr (lua_State *L, const TValue *t, const char *k) {$/;"	f	file:
auxresume	lcorolib.cpp	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f	file:
auxsetnode	ltable.cpp	/^static void auxsetnode (lua_State *L, void *ud) {$/;"	f	file:
auxsetstr	lapi.cpp	/^static void auxsetstr (lua_State *L, const TValue *t, const char *k) {$/;"	f	file:
auxsort	ltablib.cpp	/^static void auxsort (lua_State *L, IdxT lo, IdxT up,$/;"	f	file:
auxupvalue	ldblib.cpp	/^static int auxupvalue (lua_State *L, int get) {$/;"	f	file:
b	lauxlib.h	/^  char *b;  \/* buffer address *\/$/;"	m	struct:luaL_Buffer
b	ldo.cpp	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	file:
b	lobject.h	/^  int b;           \/* booleans *\/$/;"	m	union:Value
b_and	lbitlib.cpp	/^static int b_and (lua_State *L) {$/;"	f	file:
b_arshift	lbitlib.cpp	/^static int b_arshift (lua_State *L) {$/;"	f	file:
b_extract	lbitlib.cpp	/^static int b_extract (lua_State *L) {$/;"	f	file:
b_lrot	lbitlib.cpp	/^static int b_lrot (lua_State *L) {$/;"	f	file:
b_lshift	lbitlib.cpp	/^static int b_lshift (lua_State *L) {$/;"	f	file:
b_not	lbitlib.cpp	/^static int b_not (lua_State *L) {$/;"	f	file:
b_or	lbitlib.cpp	/^static int b_or (lua_State *L) {$/;"	f	file:
b_replace	lbitlib.cpp	/^static int b_replace (lua_State *L) {$/;"	f	file:
b_rot	lbitlib.cpp	/^static int b_rot (lua_State *L, lua_Integer d) {$/;"	f	file:
b_rrot	lbitlib.cpp	/^static int b_rrot (lua_State *L) {$/;"	f	file:
b_rshift	lbitlib.cpp	/^static int b_rshift (lua_State *L) {$/;"	f	file:
b_shift	lbitlib.cpp	/^static int b_shift (lua_State *L, lua_Unsigned r, lua_Integer i) {$/;"	f	file:
b_str2int	lbaselib.cpp	/^static const char *b_str2int (const char *s, int base, lua_Integer *pn) {$/;"	f	file:
b_test	lbitlib.cpp	/^static int b_test (lua_State *L) {$/;"	f	file:
b_xor	lbitlib.cpp	/^static int b_xor (lua_State *L) {$/;"	f	file:
base	lstate.h	/^      StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo::__anon18::__anon19
base_ci	lstate.h	/^  CallInfo base_ci;  \/* CallInfo for first level (C calling Lua) *\/$/;"	m	struct:lua_State
base_funcs	lbaselib.cpp	/^static const luaL_Reg base_funcs[] = {$/;"	v	file:
basehookcount	lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State
beginp	test/apr_pools.cpp	/^    void         *beginp[64];$/;"	m	struct:debug_node_t	file:
bindex	Enclave.cpp	/^int bindex = 0;$/;"	v
bit2mask	lgc.h	71;"	d
bitlib	lbitlib.cpp	/^static const luaL_Reg bitlib[] = {$/;"	v	file:
bitmask	lgc.h	70;"	d
bl	lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt
black2gray	lgc.cpp	71;"	d	file:
block	lparser.cpp	/^static void block (LexState *ls) {$/;"	f	file:
block_follow	lparser.cpp	/^static int block_follow (LexState *ls, int withuntil) {$/;"	f	file:
body	lparser.cpp	/^static void body (LexState *ls, expdesc *e, int ismethod, int line) {$/;"	f	file:
body	umm_malloc.cpp	/^   } body;$/;"	m	struct:umm_block_t	typeref:union:umm_block_t::__anon28	file:
boolK	lcode.cpp	/^static int boolK (FuncState *fs, int b) {$/;"	f	file:
boundary_index	test/apr_pools.cpp	/^static unsigned int boundary_index;$/;"	v	file:
boundary_size	test/apr_pools.cpp	/^static unsigned int boundary_size;$/;"	v	file:
box	lauxlib.cpp	/^  void *box;$/;"	m	struct:UBox	file:
boxgc	lauxlib.cpp	/^static int boxgc (lua_State *L) {$/;"	f	file:
breaklabel	lparser.cpp	/^static void breaklabel (LexState *ls) {$/;"	f	file:
bsize	lauxlib.cpp	/^  size_t bsize;$/;"	m	struct:UBox	file:
buff	lauxlib.cpp	/^  char buff[BUFSIZ];  \/* area for reading file *\/$/;"	m	struct:LoadF	file:
buff	ldo.cpp	/^  Mbuffer buff;  \/* dynamic structure used by the scanner *\/$/;"	m	struct:SParser	file:
buff	liolib.cpp	/^  char buff[L_MAXLENNUM + 1];  \/* +1 for ending '\\0' *\/$/;"	m	struct:__anon7	file:
buff	llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState
buff	lstrlib.cpp	/^  char buff[5 * sizeof(lua_Number)];  \/* enough for any float type *\/$/;"	m	union:Ftypes	file:
buffer	lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer
buffonstack	lauxlib.cpp	500;"	d	file:
buffsize	lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer
bvalue	lobject.h	176;"	d
byteoffset	lutf8lib.cpp	/^static int byteoffset (lua_State *L) {$/;"	f	file:
bytes	dh/tools.cpp	/^    unsigned char *bytes;$/;"	m	struct:content	file:
bytes	dh/tools.h	/^        unsigned char *bytes;$/;"	m	struct:content
bytes_to_hex	dh/tools.cpp	/^char * bytes_to_hex(unsigned char bytes[], int size) {$/;"	f
c	liolib.cpp	/^  int c;  \/* current character (look ahead) *\/$/;"	m	struct:__anon7	file:
c	lobject.h	/^  CClosure c;$/;"	m	union:Closure
c	lstate.h	/^    } c;$/;"	m	union:CallInfo::__anon18	typeref:struct:CallInfo::__anon18::__anon20
c	lstrlib.cpp	/^  char c;$/;"	m	struct:cD	file:
cD	lstrlib.cpp	/^struct cD {$/;"	s	file:
cache	lobject.h	/^  struct LClosure *cache;  \/* last-created closure with this prototype *\/$/;"	m	struct:Proto	typeref:struct:Proto::LClosure
callallpendingfinalizers	lgc.cpp	/^static void callallpendingfinalizers (lua_State *L) {$/;"	f	file:
callhook	ldo.cpp	/^static void callhook (lua_State *L, CallInfo *ci) {$/;"	f	file:
callstatus	lstate.h	/^  unsigned short callstatus;$/;"	m	struct:CallInfo
capture	lstrlib.cpp	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon21	file:
capture_to_close	lstrlib.cpp	/^static int capture_to_close (MatchState *ms) {$/;"	f	file:
car25519	dh/tweetnacl.cpp	/^sv car25519(gf o)$/;"	f
cast	llimits.h	111;"	d
cast_byte	llimits.h	114;"	d
cast_func	loadlib.cpp	115;"	d	file:
cast_func	loadlib.cpp	117;"	d	file:
cast_int	llimits.h	116;"	d
cast_num	llimits.h	115;"	d
cast_u	lstate.h	221;"	d
cast_uchar	llimits.h	117;"	d
cast_void	llimits.h	113;"	d
changewhite	lgc.h	98;"	d
check	lparser.cpp	/^static void check (LexState *ls, int c) {$/;"	f	file:
checkGC	lvm.cpp	749;"	d	file:
checkHeader	lundump.cpp	/^static void checkHeader (LoadState *S) {$/;"	f	file:
checkSizes	lgc.cpp	/^static void checkSizes (lua_State *L, global_State *g) {$/;"	f	file:
check_capture	lstrlib.cpp	/^static int check_capture (MatchState *ms, int l) {$/;"	f	file:
check_condition	lparser.cpp	118;"	d	file:
check_conflict	lparser.cpp	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f	file:
check_exp	llimits.h	85;"	d
check_exp	llimits.h	90;"	d
check_match	lparser.cpp	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f	file:
check_next1	llex.cpp	/^static int check_next1 (LexState *ls, int c) {$/;"	f	file:
check_next2	llex.cpp	/^static int check_next2 (LexState *ls, const char *set) {$/;"	f	file:
checkclib	loadlib.cpp	/^static void *checkclib (lua_State *L, const char *path) {$/;"	f	file:
checkconsistency	lgc.cpp	79;"	d	file:
checkdeadkey	lgc.cpp	76;"	d	file:
checkdp	lstrlib.cpp	/^static void checkdp (char *buff, int nb) {$/;"	f	file:
checkfield	ltablib.cpp	/^static int checkfield (lua_State *L, const char *key, int n) {$/;"	f	file:
checklimit	lparser.cpp	/^static void checklimit (FuncState *fs, int v, int l, const char *what) {$/;"	f	file:
checkliteral	lundump.cpp	/^static void checkliteral (LoadState *S, const char *s, const char *msg) {$/;"	f	file:
checkliveness	lobject.h	190;"	d
checkload	loadlib.cpp	/^static int checkload (lua_State *L, int stat, const char *filename) {$/;"	f	file:
checkmode	ldo.cpp	/^static void checkmode (lua_State *L, const char *mode, const char *x) {$/;"	f	file:
checkname	lparser.cpp	/^static void checkname (LexState *ls, expdesc *e) {$/;"	f	file:
checknext	lparser.cpp	/^static void checknext (LexState *ls, int c) {$/;"	f	file:
checkoption	loslib.cpp	/^static const char *checkoption (lua_State *L, const char *conv,$/;"	f	file:
checkrepeated	lparser.cpp	/^static void checkrepeated (FuncState *fs, Labellist *ll, TString *label) {$/;"	f	file:
checkresults	lapi.cpp	905;"	d	file:
checksize	lundump.cpp	234;"	d	file:
checkstack	ldblib.cpp	/^static void checkstack (lua_State *L, lua_State *L1, int n) {$/;"	f	file:
checkstackp	ldo.cpp	399;"	d	file:
checktab	ltablib.cpp	/^static void checktab (lua_State *L, int arg, int what) {$/;"	f	file:
checktag	lobject.h	140;"	d
checktype	lobject.h	141;"	d
checkunsigned	lbitlib.cpp	23;"	d	file:
checkupval	ldblib.cpp	/^static int checkupval (lua_State *L, int argf, int argnup) {$/;"	f	file:
chgfltvalue	lobject.h	201;"	d
chgivalue	lobject.h	207;"	d
child	test/apr_pools.cpp	/^    apr_pool_t           *child;$/;"	m	struct:apr_pool_t	file:
child_cleanup_fn	test/apr_pools.cpp	/^    apr_status_t (*child_cleanup_fn)(void *data);$/;"	m	struct:cleanup_t	file:
choosePivot	ltablib.cpp	/^static IdxT choosePivot (IdxT lo, IdxT up, unsigned int rnd) {$/;"	f	file:
ci	lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State
ci_func	ldebug.cpp	38;"	d	file:
cl	lstate.h	/^  union Closure cl;$/;"	m	union:GCUnion	typeref:union:GCUnion::Closure
clCvalue	lobject.h	173;"	d
clLvalue	lobject.h	172;"	d
classend	lstrlib.cpp	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f	file:
cleanup_pool_for_exec	test/apr_pools.cpp	/^static void cleanup_pool_for_exec(apr_pool_t *p)$/;"	f	file:
cleanup_t	test/apr_pools.cpp	/^struct cleanup_t {$/;"	s	file:
cleanup_t	test/apr_pools.cpp	/^typedef struct cleanup_t cleanup_t;$/;"	t	typeref:struct:cleanup_t	file:
cleanups	test/apr_pools.cpp	/^    cleanup_t            *cleanups;$/;"	m	struct:apr_pool_t	file:
clearerr	Enclave.cpp	/^clearerr(FILE *stream)$/;"	f
clearkeys	lgc.cpp	/^static void clearkeys (global_State *g, GCObject *l, GCObject *f) {$/;"	f	file:
clearvalues	lgc.cpp	/^static void clearvalues (global_State *g, GCObject *l, GCObject *f) {$/;"	f	file:
client_public_key	Enclave.cpp	/^unsigned char client_public_key[crypto_box_PUBLICKEYBYTES];$/;"	v
clock	Enclave.cpp	/^clock()$/;"	f
close_func	lparser.cpp	/^static void close_func (LexState *ls) {$/;"	f	file:
close_pending_open_files	Enclave.cpp	/^close_pending_open_files(void)$/;"	f
close_state	lstate.cpp	/^static void close_state (lua_State *L) {$/;"	f	file:
closef	lauxlib.h	/^  lua_CFunction closef;  \/* to close stream (NULL for closed streams) *\/$/;"	m	struct:luaL_Stream
closegoto	lparser.cpp	/^static void closegoto (LexState *ls, int g, Labeldesc *label) {$/;"	f	file:
closelistfield	lparser.cpp	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
clvalue	lobject.h	171;"	d
co_funcs	lcorolib.cpp	/^static const luaL_Reg co_funcs[] = {$/;"	v	file:
code	lobject.h	/^  Instruction *code;  \/* opcodes *\/$/;"	m	struct:Proto
code_decrypt	Enclave.cpp	/^code_decrypt(char *str, int len)$/;"	f
code_loadbool	lcode.cpp	/^static int code_loadbool (FuncState *fs, int A, int b, int jump) {$/;"	f	file:
code_to_execute	Enclave.cpp	/^std::string code_to_execute = "";$/;"	v
codebinexpval	lcode.cpp	/^static void codebinexpval (FuncState *fs, OpCode op,$/;"	f	file:
codeclosure	lparser.cpp	/^static void codeclosure (LexState *ls, expdesc *v) {$/;"	f	file:
codecomp	lcode.cpp	/^static void codecomp (FuncState *fs, BinOpr opr, expdesc *e1, expdesc *e2) {$/;"	f	file:
codeextraarg	lcode.cpp	/^static int codeextraarg (FuncState *fs, int a) {$/;"	f	file:
codenot	lcode.cpp	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f	file:
codepoint	lutf8lib.cpp	/^static int codepoint (lua_State *L) {$/;"	f	file:
codestring	lparser.cpp	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f	file:
codeunexpval	lcode.cpp	/^static void codeunexpval (FuncState *fs, OpCode op, expdesc *e, int line) {$/;"	f	file:
collectargs	lua.cpp	/^static int collectargs (char **argv, int *first) {$/;"	f	file:
collectvalidlines	ldebug.cpp	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f	file:
computesizes	ltable.cpp	/^static unsigned int computesizes (unsigned int nums[], unsigned int *pna) {$/;"	f	file:
cond	lparser.cpp	/^static int cond (LexState *ls) {$/;"	f	file:
condchangemem	llimits.h	317;"	d
condchangemem	llimits.h	319;"	d
condjump	lcode.cpp	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C) {$/;"	f	file:
condmovestack	llimits.h	309;"	d
condmovestack	llimits.h	312;"	d
constfolding	lcode.cpp	/^static int constfolding (FuncState *fs, int op, expdesc *e1,$/;"	f	file:
constructor	lparser.cpp	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f	file:
content	dh/tools.cpp	/^struct content {$/;"	s	file:
content	dh/tools.h	/^    struct content {$/;"	s
convergeephemerons	lgc.cpp	/^static void convergeephemerons (global_State *g) {$/;"	f	file:
copy2buff	lvm.cpp	/^static void copy2buff (StkId top, int n, char *buff) {$/;"	f	file:
copywithendian	lstrlib.cpp	/^static void copywithendian (volatile char *dest, volatile const char *src,$/;"	f	file:
core	dh/tweetnacl.cpp	/^sv core(u8 *out,const u8 *in,const u8 *k,const u8 *c,int h)$/;"	f
correctstack	ldo.cpp	/^static void correctstack (lua_State *L, TValue *oldstack) {$/;"	f	file:
count	Enclave.cpp	/^int count = 0;                          \/* index for arguments                      *\/  $/;"	v
counter	Enclave.cpp	/^int counter = -1;$/;"	v
countint	ltable.cpp	/^static int countint (const TValue *key, unsigned int *nums) {$/;"	f	file:
createargtable	lua.cpp	/^static void createargtable (lua_State *L, char **argv, int argc, int script) {$/;"	f	file:
createclibstable	loadlib.cpp	/^static void createclibstable (lua_State *L) {$/;"	f	file:
createmeta	liolib.cpp	/^static void createmeta (lua_State *L) {$/;"	f	file:
createmetatable	lstrlib.cpp	/^static void createmetatable (lua_State *L) {$/;"	f	file:
createsearcherstable	loadlib.cpp	/^static void createsearcherstable (lua_State *L) {$/;"	f	file:
createstdfile	liolib.cpp	/^static void createstdfile (lua_State *L, FILE *f, const char *k,$/;"	f	file:
createstrobj	lstring.cpp	/^static TString *createstrobj (lua_State *L, size_t l, int tag, unsigned int h) {$/;"	f	file:
creation_flags	test/apr_pools.cpp	/^    apr_uint32_t          creation_flags;$/;"	m	struct:apr_pool_t	file:
crypto_auth	dh/tweetnacl.h	4;"	d
crypto_auth_BYTES	dh/tweetnacl.h	6;"	d
crypto_auth_IMPLEMENTATION	dh/tweetnacl.h	8;"	d
crypto_auth_KEYBYTES	dh/tweetnacl.h	7;"	d
crypto_auth_PRIMITIVE	dh/tweetnacl.h	3;"	d
crypto_auth_VERSION	dh/tweetnacl.h	9;"	d
crypto_auth_hmacsha512256	dh/tweetnacl.h	15;"	d
crypto_auth_hmacsha512256_BYTES	dh/tweetnacl.h	17;"	d
crypto_auth_hmacsha512256_IMPLEMENTATION	dh/tweetnacl.h	20;"	d
crypto_auth_hmacsha512256_KEYBYTES	dh/tweetnacl.h	18;"	d
crypto_auth_hmacsha512256_VERSION	dh/tweetnacl.h	19;"	d
crypto_auth_hmacsha512256_tweet_BYTES	dh/tweetnacl.h	10;"	d
crypto_auth_hmacsha512256_tweet_KEYBYTES	dh/tweetnacl.h	11;"	d
crypto_auth_hmacsha512256_tweet_VERSION	dh/tweetnacl.h	14;"	d
crypto_auth_hmacsha512256_verify	dh/tweetnacl.h	16;"	d
crypto_auth_verify	dh/tweetnacl.h	5;"	d
crypto_box	dh/tweetnacl.cpp	/^int crypto_box(u8 *c,const u8 *m,u64 d,const u8 *n,const u8 *y,const u8 *x)$/;"	f
crypto_box	dh/tweetnacl.h	22;"	d
crypto_box_BEFORENMBYTES	dh/tweetnacl.h	30;"	d
crypto_box_BOXZEROBYTES	dh/tweetnacl.h	33;"	d
crypto_box_IMPLEMENTATION	dh/tweetnacl.h	34;"	d
crypto_box_NONCEBYTES	dh/tweetnacl.h	31;"	d
crypto_box_PRIMITIVE	dh/tweetnacl.h	21;"	d
crypto_box_PUBLICKEYBYTES	dh/tweetnacl.h	28;"	d
crypto_box_SECRETKEYBYTES	dh/tweetnacl.h	29;"	d
crypto_box_VERSION	dh/tweetnacl.h	35;"	d
crypto_box_ZEROBYTES	dh/tweetnacl.h	32;"	d
crypto_box_afternm	dh/tweetnacl.cpp	/^int crypto_box_afternm(u8 *c,const u8 *m,u64 d,const u8 *n,const u8 *k)$/;"	f
crypto_box_afternm	dh/tweetnacl.h	26;"	d
crypto_box_beforenm	dh/tweetnacl.cpp	/^int crypto_box_beforenm(u8 *k,const u8 *y,const u8 *x)$/;"	f
crypto_box_beforenm	dh/tweetnacl.h	25;"	d
crypto_box_curve25519xsalsa20poly1305	dh/tweetnacl.h	49;"	d
crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES	dh/tweetnacl.h	57;"	d
crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES	dh/tweetnacl.h	60;"	d
crypto_box_curve25519xsalsa20poly1305_IMPLEMENTATION	dh/tweetnacl.h	62;"	d
crypto_box_curve25519xsalsa20poly1305_NONCEBYTES	dh/tweetnacl.h	58;"	d
crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES	dh/tweetnacl.h	55;"	d
crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES	dh/tweetnacl.h	56;"	d
crypto_box_curve25519xsalsa20poly1305_VERSION	dh/tweetnacl.h	61;"	d
crypto_box_curve25519xsalsa20poly1305_ZEROBYTES	dh/tweetnacl.h	59;"	d
crypto_box_curve25519xsalsa20poly1305_afternm	dh/tweetnacl.h	53;"	d
crypto_box_curve25519xsalsa20poly1305_beforenm	dh/tweetnacl.h	52;"	d
crypto_box_curve25519xsalsa20poly1305_keypair	dh/tweetnacl.h	51;"	d
crypto_box_curve25519xsalsa20poly1305_open	dh/tweetnacl.h	50;"	d
crypto_box_curve25519xsalsa20poly1305_open_afternm	dh/tweetnacl.h	54;"	d
crypto_box_curve25519xsalsa20poly1305_tweet_BEFORENMBYTES	dh/tweetnacl.h	38;"	d
crypto_box_curve25519xsalsa20poly1305_tweet_BOXZEROBYTES	dh/tweetnacl.h	41;"	d
crypto_box_curve25519xsalsa20poly1305_tweet_NONCEBYTES	dh/tweetnacl.h	39;"	d
crypto_box_curve25519xsalsa20poly1305_tweet_PUBLICKEYBYTES	dh/tweetnacl.h	36;"	d
crypto_box_curve25519xsalsa20poly1305_tweet_SECRETKEYBYTES	dh/tweetnacl.h	37;"	d
crypto_box_curve25519xsalsa20poly1305_tweet_VERSION	dh/tweetnacl.h	48;"	d
crypto_box_curve25519xsalsa20poly1305_tweet_ZEROBYTES	dh/tweetnacl.h	40;"	d
crypto_box_keypair	dh/tweetnacl.cpp	/^int crypto_box_keypair(u8 *y,u8 *x)$/;"	f
crypto_box_keypair	dh/tweetnacl.h	24;"	d
crypto_box_open	dh/tweetnacl.cpp	/^int crypto_box_open(u8 *m,const u8 *c,u64 d,const u8 *n,const u8 *y,const u8 *x)$/;"	f
crypto_box_open	dh/tweetnacl.h	23;"	d
crypto_box_open_afternm	dh/tweetnacl.cpp	/^int crypto_box_open_afternm(u8 *m,const u8 *c,u64 d,const u8 *n,const u8 *k)$/;"	f
crypto_box_open_afternm	dh/tweetnacl.h	27;"	d
crypto_core	dh/tweetnacl.h	64;"	d
crypto_core_CONSTBYTES	dh/tweetnacl.h	68;"	d
crypto_core_IMPLEMENTATION	dh/tweetnacl.h	69;"	d
crypto_core_INPUTBYTES	dh/tweetnacl.h	66;"	d
crypto_core_KEYBYTES	dh/tweetnacl.h	67;"	d
crypto_core_OUTPUTBYTES	dh/tweetnacl.h	65;"	d
crypto_core_PRIMITIVE	dh/tweetnacl.h	63;"	d
crypto_core_VERSION	dh/tweetnacl.h	70;"	d
crypto_core_hsalsa20	dh/tweetnacl.cpp	/^int crypto_core_hsalsa20(u8 *out,const u8 *in,const u8 *k,const u8 *c)$/;"	f
crypto_core_hsalsa20	dh/tweetnacl.h	90;"	d
crypto_core_hsalsa20_CONSTBYTES	dh/tweetnacl.h	94;"	d
crypto_core_hsalsa20_IMPLEMENTATION	dh/tweetnacl.h	96;"	d
crypto_core_hsalsa20_INPUTBYTES	dh/tweetnacl.h	92;"	d
crypto_core_hsalsa20_KEYBYTES	dh/tweetnacl.h	93;"	d
crypto_core_hsalsa20_OUTPUTBYTES	dh/tweetnacl.h	91;"	d
crypto_core_hsalsa20_VERSION	dh/tweetnacl.h	95;"	d
crypto_core_hsalsa20_tweet_CONSTBYTES	dh/tweetnacl.h	87;"	d
crypto_core_hsalsa20_tweet_INPUTBYTES	dh/tweetnacl.h	85;"	d
crypto_core_hsalsa20_tweet_KEYBYTES	dh/tweetnacl.h	86;"	d
crypto_core_hsalsa20_tweet_OUTPUTBYTES	dh/tweetnacl.h	84;"	d
crypto_core_hsalsa20_tweet_VERSION	dh/tweetnacl.h	89;"	d
crypto_core_salsa20	dh/tweetnacl.cpp	/^int crypto_core_salsa20(u8 *out,const u8 *in,const u8 *k,const u8 *c)$/;"	f
crypto_core_salsa20	dh/tweetnacl.h	77;"	d
crypto_core_salsa20_CONSTBYTES	dh/tweetnacl.h	81;"	d
crypto_core_salsa20_IMPLEMENTATION	dh/tweetnacl.h	83;"	d
crypto_core_salsa20_INPUTBYTES	dh/tweetnacl.h	79;"	d
crypto_core_salsa20_KEYBYTES	dh/tweetnacl.h	80;"	d
crypto_core_salsa20_OUTPUTBYTES	dh/tweetnacl.h	78;"	d
crypto_core_salsa20_VERSION	dh/tweetnacl.h	82;"	d
crypto_core_salsa20_tweet_CONSTBYTES	dh/tweetnacl.h	74;"	d
crypto_core_salsa20_tweet_INPUTBYTES	dh/tweetnacl.h	72;"	d
crypto_core_salsa20_tweet_KEYBYTES	dh/tweetnacl.h	73;"	d
crypto_core_salsa20_tweet_OUTPUTBYTES	dh/tweetnacl.h	71;"	d
crypto_core_salsa20_tweet_VERSION	dh/tweetnacl.h	76;"	d
crypto_hash	dh/tweetnacl.cpp	/^int crypto_hash(u8 *out,const u8 *m,u64 n)$/;"	f
crypto_hash	dh/tweetnacl.h	122;"	d
crypto_hash_BYTES	dh/tweetnacl.h	123;"	d
crypto_hash_IMPLEMENTATION	dh/tweetnacl.h	124;"	d
crypto_hash_PRIMITIVE	dh/tweetnacl.h	121;"	d
crypto_hash_VERSION	dh/tweetnacl.h	125;"	d
crypto_hash_sha256	dh/tweetnacl.h	136;"	d
crypto_hash_sha256_BYTES	dh/tweetnacl.h	137;"	d
crypto_hash_sha256_IMPLEMENTATION	dh/tweetnacl.h	139;"	d
crypto_hash_sha256_VERSION	dh/tweetnacl.h	138;"	d
crypto_hash_sha256_tweet_BYTES	dh/tweetnacl.h	133;"	d
crypto_hash_sha256_tweet_VERSION	dh/tweetnacl.h	135;"	d
crypto_hash_sha512	dh/tweetnacl.h	129;"	d
crypto_hash_sha512_BYTES	dh/tweetnacl.h	130;"	d
crypto_hash_sha512_IMPLEMENTATION	dh/tweetnacl.h	132;"	d
crypto_hash_sha512_VERSION	dh/tweetnacl.h	131;"	d
crypto_hash_sha512_tweet_BYTES	dh/tweetnacl.h	126;"	d
crypto_hash_sha512_tweet_VERSION	dh/tweetnacl.h	128;"	d
crypto_hashblocks	dh/tweetnacl.cpp	/^int crypto_hashblocks(u8 *x,const u8 *m,u64 n)$/;"	f
crypto_hashblocks	dh/tweetnacl.h	98;"	d
crypto_hashblocks_BLOCKBYTES	dh/tweetnacl.h	100;"	d
crypto_hashblocks_IMPLEMENTATION	dh/tweetnacl.h	101;"	d
crypto_hashblocks_PRIMITIVE	dh/tweetnacl.h	97;"	d
crypto_hashblocks_STATEBYTES	dh/tweetnacl.h	99;"	d
crypto_hashblocks_VERSION	dh/tweetnacl.h	102;"	d
crypto_hashblocks_sha256	dh/tweetnacl.h	116;"	d
crypto_hashblocks_sha256_BLOCKBYTES	dh/tweetnacl.h	118;"	d
crypto_hashblocks_sha256_IMPLEMENTATION	dh/tweetnacl.h	120;"	d
crypto_hashblocks_sha256_STATEBYTES	dh/tweetnacl.h	117;"	d
crypto_hashblocks_sha256_VERSION	dh/tweetnacl.h	119;"	d
crypto_hashblocks_sha256_tweet_BLOCKBYTES	dh/tweetnacl.h	113;"	d
crypto_hashblocks_sha256_tweet_STATEBYTES	dh/tweetnacl.h	112;"	d
crypto_hashblocks_sha256_tweet_VERSION	dh/tweetnacl.h	115;"	d
crypto_hashblocks_sha512	dh/tweetnacl.h	107;"	d
crypto_hashblocks_sha512_BLOCKBYTES	dh/tweetnacl.h	109;"	d
crypto_hashblocks_sha512_IMPLEMENTATION	dh/tweetnacl.h	111;"	d
crypto_hashblocks_sha512_STATEBYTES	dh/tweetnacl.h	108;"	d
crypto_hashblocks_sha512_VERSION	dh/tweetnacl.h	110;"	d
crypto_hashblocks_sha512_tweet_BLOCKBYTES	dh/tweetnacl.h	104;"	d
crypto_hashblocks_sha512_tweet_STATEBYTES	dh/tweetnacl.h	103;"	d
crypto_hashblocks_sha512_tweet_VERSION	dh/tweetnacl.h	106;"	d
crypto_onetimeauth	dh/tweetnacl.cpp	/^int crypto_onetimeauth(u8 *out,const u8 *m,u64 n,const u8 *k)$/;"	f
crypto_onetimeauth	dh/tweetnacl.h	141;"	d
crypto_onetimeauth_BYTES	dh/tweetnacl.h	143;"	d
crypto_onetimeauth_IMPLEMENTATION	dh/tweetnacl.h	145;"	d
crypto_onetimeauth_KEYBYTES	dh/tweetnacl.h	144;"	d
crypto_onetimeauth_PRIMITIVE	dh/tweetnacl.h	140;"	d
crypto_onetimeauth_VERSION	dh/tweetnacl.h	146;"	d
crypto_onetimeauth_poly1305	dh/tweetnacl.h	152;"	d
crypto_onetimeauth_poly1305_BYTES	dh/tweetnacl.h	154;"	d
crypto_onetimeauth_poly1305_IMPLEMENTATION	dh/tweetnacl.h	157;"	d
crypto_onetimeauth_poly1305_KEYBYTES	dh/tweetnacl.h	155;"	d
crypto_onetimeauth_poly1305_VERSION	dh/tweetnacl.h	156;"	d
crypto_onetimeauth_poly1305_tweet_BYTES	dh/tweetnacl.h	147;"	d
crypto_onetimeauth_poly1305_tweet_KEYBYTES	dh/tweetnacl.h	148;"	d
crypto_onetimeauth_poly1305_tweet_VERSION	dh/tweetnacl.h	151;"	d
crypto_onetimeauth_poly1305_verify	dh/tweetnacl.h	153;"	d
crypto_onetimeauth_verify	dh/tweetnacl.cpp	/^int crypto_onetimeauth_verify(const u8 *h,const u8 *m,u64 n,const u8 *k)$/;"	f
crypto_onetimeauth_verify	dh/tweetnacl.h	142;"	d
crypto_scalarmult	dh/tweetnacl.cpp	/^int crypto_scalarmult(u8 *q,const u8 *n,const u8 *p)$/;"	f
crypto_scalarmult	dh/tweetnacl.h	159;"	d
crypto_scalarmult_BYTES	dh/tweetnacl.h	161;"	d
crypto_scalarmult_IMPLEMENTATION	dh/tweetnacl.h	163;"	d
crypto_scalarmult_PRIMITIVE	dh/tweetnacl.h	158;"	d
crypto_scalarmult_SCALARBYTES	dh/tweetnacl.h	162;"	d
crypto_scalarmult_VERSION	dh/tweetnacl.h	164;"	d
crypto_scalarmult_base	dh/tweetnacl.cpp	/^int crypto_scalarmult_base(u8 *q,const u8 *n)$/;"	f
crypto_scalarmult_base	dh/tweetnacl.h	160;"	d
crypto_scalarmult_curve25519	dh/tweetnacl.h	170;"	d
crypto_scalarmult_curve25519_BYTES	dh/tweetnacl.h	172;"	d
crypto_scalarmult_curve25519_IMPLEMENTATION	dh/tweetnacl.h	175;"	d
crypto_scalarmult_curve25519_SCALARBYTES	dh/tweetnacl.h	173;"	d
crypto_scalarmult_curve25519_VERSION	dh/tweetnacl.h	174;"	d
crypto_scalarmult_curve25519_base	dh/tweetnacl.h	171;"	d
crypto_scalarmult_curve25519_tweet_BYTES	dh/tweetnacl.h	165;"	d
crypto_scalarmult_curve25519_tweet_SCALARBYTES	dh/tweetnacl.h	166;"	d
crypto_scalarmult_curve25519_tweet_VERSION	dh/tweetnacl.h	169;"	d
crypto_secretbox	dh/tweetnacl.cpp	/^int crypto_secretbox(u8 *c,const u8 *m,u64 d,const u8 *n,const u8 *k)$/;"	f
crypto_secretbox	dh/tweetnacl.h	177;"	d
crypto_secretbox_BOXZEROBYTES	dh/tweetnacl.h	182;"	d
crypto_secretbox_IMPLEMENTATION	dh/tweetnacl.h	183;"	d
crypto_secretbox_KEYBYTES	dh/tweetnacl.h	179;"	d
crypto_secretbox_NONCEBYTES	dh/tweetnacl.h	180;"	d
crypto_secretbox_PRIMITIVE	dh/tweetnacl.h	176;"	d
crypto_secretbox_VERSION	dh/tweetnacl.h	184;"	d
crypto_secretbox_ZEROBYTES	dh/tweetnacl.h	181;"	d
crypto_secretbox_open	dh/tweetnacl.cpp	/^int crypto_secretbox_open(u8 *m,const u8 *c,u64 d,const u8 *n,const u8 *k)$/;"	f
crypto_secretbox_open	dh/tweetnacl.h	178;"	d
crypto_secretbox_xsalsa20poly1305	dh/tweetnacl.h	192;"	d
crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES	dh/tweetnacl.h	197;"	d
crypto_secretbox_xsalsa20poly1305_IMPLEMENTATION	dh/tweetnacl.h	199;"	d
crypto_secretbox_xsalsa20poly1305_KEYBYTES	dh/tweetnacl.h	194;"	d
crypto_secretbox_xsalsa20poly1305_NONCEBYTES	dh/tweetnacl.h	195;"	d
crypto_secretbox_xsalsa20poly1305_VERSION	dh/tweetnacl.h	198;"	d
crypto_secretbox_xsalsa20poly1305_ZEROBYTES	dh/tweetnacl.h	196;"	d
crypto_secretbox_xsalsa20poly1305_open	dh/tweetnacl.h	193;"	d
crypto_secretbox_xsalsa20poly1305_tweet_BOXZEROBYTES	dh/tweetnacl.h	188;"	d
crypto_secretbox_xsalsa20poly1305_tweet_KEYBYTES	dh/tweetnacl.h	185;"	d
crypto_secretbox_xsalsa20poly1305_tweet_NONCEBYTES	dh/tweetnacl.h	186;"	d
crypto_secretbox_xsalsa20poly1305_tweet_VERSION	dh/tweetnacl.h	191;"	d
crypto_secretbox_xsalsa20poly1305_tweet_ZEROBYTES	dh/tweetnacl.h	187;"	d
crypto_sign	dh/tweetnacl.cpp	/^int crypto_sign(u8 *sm,u64 *smlen,const u8 *m,u64 n,const u8 *sk)$/;"	f
crypto_sign	dh/tweetnacl.h	201;"	d
crypto_sign_BYTES	dh/tweetnacl.h	204;"	d
crypto_sign_IMPLEMENTATION	dh/tweetnacl.h	207;"	d
crypto_sign_PRIMITIVE	dh/tweetnacl.h	200;"	d
crypto_sign_PUBLICKEYBYTES	dh/tweetnacl.h	205;"	d
crypto_sign_SECRETKEYBYTES	dh/tweetnacl.h	206;"	d
crypto_sign_VERSION	dh/tweetnacl.h	208;"	d
crypto_sign_ed25519	dh/tweetnacl.h	216;"	d
crypto_sign_ed25519_BYTES	dh/tweetnacl.h	219;"	d
crypto_sign_ed25519_IMPLEMENTATION	dh/tweetnacl.h	223;"	d
crypto_sign_ed25519_PUBLICKEYBYTES	dh/tweetnacl.h	220;"	d
crypto_sign_ed25519_SECRETKEYBYTES	dh/tweetnacl.h	221;"	d
crypto_sign_ed25519_VERSION	dh/tweetnacl.h	222;"	d
crypto_sign_ed25519_keypair	dh/tweetnacl.h	218;"	d
crypto_sign_ed25519_open	dh/tweetnacl.h	217;"	d
crypto_sign_ed25519_tweet_BYTES	dh/tweetnacl.h	209;"	d
crypto_sign_ed25519_tweet_PUBLICKEYBYTES	dh/tweetnacl.h	210;"	d
crypto_sign_ed25519_tweet_SECRETKEYBYTES	dh/tweetnacl.h	211;"	d
crypto_sign_ed25519_tweet_VERSION	dh/tweetnacl.h	215;"	d
crypto_sign_keypair	dh/tweetnacl.cpp	/^int crypto_sign_keypair(u8 *pk, u8 *sk)$/;"	f
crypto_sign_keypair	dh/tweetnacl.h	203;"	d
crypto_sign_open	dh/tweetnacl.cpp	/^int crypto_sign_open(u8 *m,u64 *mlen,const u8 *sm,u64 n,const u8 *pk)$/;"	f
crypto_sign_open	dh/tweetnacl.h	202;"	d
crypto_stream	dh/tweetnacl.cpp	/^int crypto_stream(u8 *c,u64 d,const u8 *n,const u8 *k)$/;"	f
crypto_stream	dh/tweetnacl.h	225;"	d
crypto_stream_IMPLEMENTATION	dh/tweetnacl.h	229;"	d
crypto_stream_KEYBYTES	dh/tweetnacl.h	227;"	d
crypto_stream_NONCEBYTES	dh/tweetnacl.h	228;"	d
crypto_stream_PRIMITIVE	dh/tweetnacl.h	224;"	d
crypto_stream_VERSION	dh/tweetnacl.h	230;"	d
crypto_stream_salsa20	dh/tweetnacl.cpp	/^int crypto_stream_salsa20(u8 *c,u64 d,const u8 *n,const u8 *k)$/;"	f
crypto_stream_salsa20	dh/tweetnacl.h	247;"	d
crypto_stream_salsa20_IMPLEMENTATION	dh/tweetnacl.h	252;"	d
crypto_stream_salsa20_KEYBYTES	dh/tweetnacl.h	249;"	d
crypto_stream_salsa20_NONCEBYTES	dh/tweetnacl.h	250;"	d
crypto_stream_salsa20_VERSION	dh/tweetnacl.h	251;"	d
crypto_stream_salsa20_tweet_KEYBYTES	dh/tweetnacl.h	242;"	d
crypto_stream_salsa20_tweet_NONCEBYTES	dh/tweetnacl.h	243;"	d
crypto_stream_salsa20_tweet_VERSION	dh/tweetnacl.h	246;"	d
crypto_stream_salsa20_xor	dh/tweetnacl.cpp	/^int crypto_stream_salsa20_xor(u8 *c,const u8 *m,u64 b,const u8 *n,const u8 *k)$/;"	f
crypto_stream_salsa20_xor	dh/tweetnacl.h	248;"	d
crypto_stream_xor	dh/tweetnacl.cpp	/^int crypto_stream_xor(u8 *c,const u8 *m,u64 d,const u8 *n,const u8 *k)$/;"	f
crypto_stream_xor	dh/tweetnacl.h	226;"	d
crypto_stream_xsalsa20	dh/tweetnacl.h	236;"	d
crypto_stream_xsalsa20_IMPLEMENTATION	dh/tweetnacl.h	241;"	d
crypto_stream_xsalsa20_KEYBYTES	dh/tweetnacl.h	238;"	d
crypto_stream_xsalsa20_NONCEBYTES	dh/tweetnacl.h	239;"	d
crypto_stream_xsalsa20_VERSION	dh/tweetnacl.h	240;"	d
crypto_stream_xsalsa20_tweet_KEYBYTES	dh/tweetnacl.h	231;"	d
crypto_stream_xsalsa20_tweet_NONCEBYTES	dh/tweetnacl.h	232;"	d
crypto_stream_xsalsa20_tweet_VERSION	dh/tweetnacl.h	235;"	d
crypto_stream_xsalsa20_xor	dh/tweetnacl.h	237;"	d
crypto_verify	dh/tweetnacl.h	254;"	d
crypto_verify_16	dh/tweetnacl.cpp	/^int crypto_verify_16(const u8 *x,const u8 *y)$/;"	f
crypto_verify_16	dh/tweetnacl.h	261;"	d
crypto_verify_16_BYTES	dh/tweetnacl.h	262;"	d
crypto_verify_16_IMPLEMENTATION	dh/tweetnacl.h	264;"	d
crypto_verify_16_VERSION	dh/tweetnacl.h	263;"	d
crypto_verify_16_tweet_BYTES	dh/tweetnacl.h	258;"	d
crypto_verify_16_tweet_VERSION	dh/tweetnacl.h	260;"	d
crypto_verify_32	dh/tweetnacl.cpp	/^int crypto_verify_32(const u8 *x,const u8 *y)$/;"	f
crypto_verify_32	dh/tweetnacl.h	268;"	d
crypto_verify_32_BYTES	dh/tweetnacl.h	269;"	d
crypto_verify_32_IMPLEMENTATION	dh/tweetnacl.h	271;"	d
crypto_verify_32_VERSION	dh/tweetnacl.h	270;"	d
crypto_verify_32_tweet_BYTES	dh/tweetnacl.h	265;"	d
crypto_verify_32_tweet_VERSION	dh/tweetnacl.h	267;"	d
crypto_verify_BYTES	dh/tweetnacl.h	255;"	d
crypto_verify_IMPLEMENTATION	dh/tweetnacl.h	256;"	d
crypto_verify_PRIMITIVE	dh/tweetnacl.h	253;"	d
crypto_verify_VERSION	dh/tweetnacl.h	257;"	d
cswap	dh/tweetnacl.cpp	/^sv cswap(gf p[4],gf q[4],u8 b)$/;"	f
ctb	lobject.h	66;"	d
ctx	lstate.h	/^      lua_KContext ctx;  \/* context info. in case of yields *\/$/;"	m	struct:CallInfo::__anon18::__anon20
currIsNewline	llex.cpp	36;"	d	file:
currency_symbol	sgx_includes.h	/^   char *currency_symbol;$/;"	m	struct:lconv
current	llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState
current_free_index	test/apr_pools.cpp	/^    apr_size_t        current_free_index;$/;"	m	struct:apr_allocator_t	file:
currentline	ldebug.cpp	/^static int currentline (CallInfo *ci) {$/;"	f	file:
currentline	lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug
currentpc	ldebug.cpp	/^static int currentpc (CallInfo *ci) {$/;"	f	file:
currentwhite	lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State
cvt2num	lvm.h	24;"	d
cvt2num	lvm.h	26;"	d
cvt2str	lvm.h	17;"	d
cvt2str	lvm.h	19;"	d
d	lstrlib.cpp	/^  double d;$/;"	m	union:Ftypes	file:
d	lstrlib.cpp	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon23	file:
data	ldump.cpp	/^  void *data;$/;"	m	struct:__anon4	file:
data	lzio.h	/^  void *data;			\/* additional data *\/$/;"	m	struct:Zio
data	test/apr_pools.cpp	/^    const void *data;$/;"	m	struct:cleanup_t	file:
data	umm_malloc.cpp	/^      unsigned char data[4];$/;"	m	union:umm_block_t::__anon28	file:
db_debug	ldblib.cpp	/^static int db_debug (lua_State *L) {$/;"	f	file:
db_gethook	ldblib.cpp	/^static int db_gethook (lua_State *L) {$/;"	f	file:
db_getinfo	ldblib.cpp	/^static int db_getinfo (lua_State *L) {$/;"	f	file:
db_getlocal	ldblib.cpp	/^static int db_getlocal (lua_State *L) {$/;"	f	file:
db_getmetatable	ldblib.cpp	/^static int db_getmetatable (lua_State *L) {$/;"	f	file:
db_getregistry	ldblib.cpp	/^static int db_getregistry (lua_State *L) {$/;"	f	file:
db_getupvalue	ldblib.cpp	/^static int db_getupvalue (lua_State *L) {$/;"	f	file:
db_getuservalue	ldblib.cpp	/^static int db_getuservalue (lua_State *L) {$/;"	f	file:
db_sethook	ldblib.cpp	/^static int db_sethook (lua_State *L) {$/;"	f	file:
db_setlocal	ldblib.cpp	/^static int db_setlocal (lua_State *L) {$/;"	f	file:
db_setmetatable	ldblib.cpp	/^static int db_setmetatable (lua_State *L) {$/;"	f	file:
db_setupvalue	ldblib.cpp	/^static int db_setupvalue (lua_State *L) {$/;"	f	file:
db_setuservalue	ldblib.cpp	/^static int db_setuservalue (lua_State *L) {$/;"	f	file:
db_traceback	ldblib.cpp	/^static int db_traceback (lua_State *L) {$/;"	f	file:
db_upvalueid	ldblib.cpp	/^static int db_upvalueid (lua_State *L) {$/;"	f	file:
db_upvaluejoin	ldblib.cpp	/^static int db_upvaluejoin (lua_State *L) {$/;"	f	file:
dblib	ldblib.cpp	/^static const luaL_Reg dblib[] = {$/;"	v	file:
deadvalue	lobject.h	179;"	d
debug_node_t	test/apr_pools.cpp	/^struct debug_node_t {$/;"	s	file:
debug_node_t	test/apr_pools.cpp	/^typedef struct debug_node_t debug_node_t;$/;"	t	typeref:struct:debug_node_t	file:
decimal_point	sgx_includes.h	/^   char *decimal_point;$/;"	m	struct:lconv
decrypt	dh/sample.cpp	/^decrypt(Content encrypted_buffer, unsigned char *client_public_key, unsigned char *server_secret_key)$/;"	f
digit	lstrlib.cpp	/^static int digit (int c) { return '0' <= c && c <= '9'; }$/;"	f	file:
discharge2anyreg	lcode.cpp	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f	file:
discharge2reg	lcode.cpp	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
dischargejpc	lcode.cpp	/^static void dischargejpc (FuncState *fs) {$/;"	f	file:
dl64	dh/tweetnacl.cpp	/^static u64 dl64(const u8 *x)$/;"	f	file:
doREPL	lua.cpp	/^static void doREPL (lua_State *L) {$/;"	f	file:
docall	lua.cpp	/^static int docall (lua_State *L, int narg, int nres) {$/;"	f	file:
dochunk	lua.cpp	/^static int dochunk (lua_State *L, int status) {$/;"	f	file:
dofile	lua.cpp	/^static int dofile (lua_State *L, const char *name) {$/;"	f	file:
dofilecont	lbaselib.cpp	/^static int dofilecont (lua_State *L, int d1, lua_KContext d2) {$/;"	f	file:
dojump	lvm.cpp	738;"	d	file:
dolibrary	lua.cpp	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f	file:
donextjump	lvm.cpp	744;"	d	file:
dooptions	loadlib.cpp	/^static void dooptions (lua_State *L, int n) {$/;"	f	file:
dostring	lua.cpp	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f	file:
dothecall	lgc.cpp	/^static void dothecall (lua_State *L, void *ud) {$/;"	f	file:
dummy	lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for 'local' udata *\/$/;"	m	union:UUdata
dummy	lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:UTString
dummy	lstrlib.cpp	/^  int dummy;$/;"	m	union:__anon22	file:
dummynode	ltable.cpp	75;"	d	file:
dummynode_	ltable.cpp	/^static const Node dummynode_ = {$/;"	v	file:
dyd	ldo.cpp	/^  Dyndata dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:SParser	file:
dyd	llex.h	/^  struct Dyndata *dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:LexState	typeref:struct:LexState::Dyndata
ecall_add_client_pkey	Enclave.cpp	/^ecall_add_client_pkey(unsigned char *client_key, int k)$/;"	f
ecall_add_code	Enclave.cpp	/^ecall_add_code(char *code, int buffer_size)$/;"	f
ecall_add_code_encrypted	Enclave.cpp	/^ecall_add_code_encrypted(void *code, int bs)$/;"	f
ecall_addr	Enclave_t.c	/^	struct {void* ecall_addr; uint8_t is_priv; uint8_t is_switchless;} ecall_table[11];$/;"	m	struct:__anon1::__anon2	file:
ecall_encrypt	Enclave.cpp	/^ecall_encrypt(char *str, int len, int id)$/;"	f
ecall_end_execution	Enclave.cpp	/^ecall_end_execution()$/;"	f
ecall_execute	Enclave.cpp	/^ecall_execute(int id)$/;"	f
ecall_extra_args	Enclave.cpp	/^ecall_extra_args(size_t mode, size_t vm_has_input, int kca)$/;"	f
ecall_gen_pkeys	Enclave.cpp	/^ecall_gen_pkeys(void)$/;"	f
ecall_get_server_pkey	Enclave.cpp	/^ecall_get_server_pkey(unsigned char *key, int k)$/;"	f
ecall_init	Enclave.cpp	/^ecall_init(int arg, int use_pool, int flm, int svi, FILE *stdi, FILE *stdo, FILE *stde)$/;"	f
ecall_push_arg	Enclave.cpp	/^ecall_push_arg(char *arg, unsigned long len)$/;"	f
ecall_send_aes_key	Enclave.cpp	/^ecall_send_aes_key(int id)$/;"	f
ecall_table	Enclave_t.c	/^	struct {void* ecall_addr; uint8_t is_priv; uint8_t is_switchless;} ecall_table[11];$/;"	m	struct:__anon1	typeref:struct:__anon1::__anon2	file:
encrypt	dh/sample.cpp	/^encrypt(unsigned char *string, size_t ks, unsigned char *server_public_key, unsigned char *client_secret_key)$/;"	f
encrypted_mode	Enclave.cpp	/^int encrypted_mode = 0;                 \/* are we using encryption                  *\/$/;"	v
end_capture	lstrlib.cpp	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f	file:
end_execution	Enclave.cpp	/^int end_execution = 0;                  \/* clients request end of execution         *\/$/;"	v
endp	test/apr_allocator.h	/^    char          *endp;            \/**< pointer to end of free memory *\/$/;"	m	struct:apr_memnode_t
endp	test/apr_pools.cpp	/^    void         *endp[64];$/;"	m	struct:debug_node_t	file:
endpc	lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar
enterblock	lparser.cpp	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isloop) {$/;"	f	file:
enterlevel	lparser.cpp	/^static void enterlevel (LexState *ls) {$/;"	f	file:
entersweep	lgc.cpp	/^static void entersweep (lua_State *L) {$/;"	f	file:
entry_table	Enclave_t.c	/^	uint8_t entry_table[36][11];$/;"	m	struct:__anon3	file:
envn	llex.h	/^  TString *envn;  \/* environment variable name *\/$/;"	m	struct:LexState
ephemeron	lstate.h	/^  GCObject *ephemeron;  \/* list of ephemeron tables (weak keys) *\/$/;"	m	struct:global_State
eqshrstr	lstring.h	33;"	d
eqstr	lparser.cpp	42;"	d	file:
errfile	lauxlib.cpp	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f	file:
errfunc	lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State
errno_t	sgx_includes.h	/^typedef int errno_t;$/;"	t
error	dh/tools.cpp	/^void error(int code, const char message[]) {$/;"	f
error	lundump.cpp	/^static l_noret error(LoadState *S, const char *why) {$/;"	f	file:
errorJmp	lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp
error_expected	lparser.cpp	/^static l_noret error_expected (LexState *ls, int token) {$/;"	f	file:
errorf	dh/tools.cpp	/^void errorf(int code, const char message[], char arg[]) {$/;"	f
errorlimit	lparser.cpp	/^static l_noret errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f	file:
errorstatus	ldo.cpp	38;"	d	file:
esccheck	llex.cpp	/^static void esccheck (LexState *ls, int c, const char *msg) {$/;"	f	file:
event	lua.h	/^  int event;$/;"	m	struct:lua_Debug
executable_code_vector	Enclave.cpp	/^std::vector<std::string> executable_code_vector;    \/* the code is stored in a vector, and executed *\/ $/;"	v
exit	Enclave.cpp	/^exit(int status_)$/;"	f
exp1	lparser.cpp	/^static int exp1 (LexState *ls) {$/;"	f	file:
exp2reg	lcode.cpp	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
expdesc	lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expkind	lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon14
explist	lparser.cpp	/^static int explist (LexState *ls, expdesc *v) {$/;"	f	file:
expr	lparser.cpp	/^static void expr (LexState *ls, expdesc *v) {$/;"	f	file:
exprstat	lparser.cpp	/^static void exprstat (LexState *ls) {$/;"	f	file:
extra	lobject.h	/^  lu_byte extra;  \/* reserved words for short strings; "has hash" for longs *\/$/;"	m	struct:TString
extra	lstate.h	/^  ptrdiff_t extra;$/;"	m	struct:CallInfo
extra_	lstate.cpp	/^  lu_byte extra_[LUA_EXTRASPACE];$/;"	m	struct:LX	file:
f	lauxlib.cpp	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:LoadF	file:
f	lauxlib.h	/^  FILE *f;  \/* stream (NULL for incompletely created streams) *\/$/;"	m	struct:luaL_Stream
f	liolib.cpp	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:__anon7	file:
f	lobject.h	/^  lua_CFunction f; \/* light C functions *\/$/;"	m	union:Value
f	lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure
f	lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState
f	lparser.h	/^  int f;  \/* patch list of 'exit when false' *\/$/;"	m	struct:expdesc
f	lstrlib.cpp	/^  float f;$/;"	m	union:Ftypes	file:
f_call	lapi.cpp	/^static void f_call (lua_State *L, void *ud) {$/;"	f	file:
f_close	liolib.cpp	/^static int f_close (lua_State *L) {$/;"	f	file:
f_flush	liolib.cpp	/^static int f_flush (lua_State *L) {$/;"	f	file:
f_gc	liolib.cpp	/^static int f_gc (lua_State *L) {$/;"	f	file:
f_lines	liolib.cpp	/^static int f_lines (lua_State *L) {$/;"	f	file:
f_luaopen	lstate.cpp	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f	file:
f_parser	ldo.cpp	/^static void f_parser (lua_State *L, void *ud) {$/;"	f	file:
f_read	liolib.cpp	/^static int f_read (lua_State *L) {$/;"	f	file:
f_seek	liolib.cpp	/^static int f_seek (lua_State *L) {$/;"	f	file:
f_setvbuf	liolib.cpp	/^static int f_setvbuf (lua_State *L) {$/;"	f	file:
f_tostring	liolib.cpp	/^static int f_tostring (lua_State *L) {$/;"	f	file:
f_write	liolib.cpp	/^static int f_write (lua_State *L) {$/;"	f	file:
fasttm	ltm.h	51;"	d
fchecksize	lundump.cpp	/^static void fchecksize (LoadState *S, size_t size, const char *tname) {$/;"	f	file:
fclose	Enclave.cpp	/^fclose(FILE *ptr)$/;"	f
feof	Enclave.cpp	/^feof(FILE *stream)$/;"	f
ferror	Enclave.cpp	/^ferror(FILE *stream)$/;"	f
fflush	Enclave.cpp	/^fflush(FILE *ptr)$/;"	f
fgets	Enclave.cpp	/^fgets(char *str, int n, FILE *fd)$/;"	f
field	lparser.cpp	/^static void field (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
fieldargs	lbitlib.cpp	/^static int fieldargs (lua_State *L, int farg, int *width) {$/;"	f	file:
fieldsel	lparser.cpp	/^static void fieldsel (LexState *ls, expdesc *v) {$/;"	f	file:
file_line	test/apr_pools.cpp	/^    const char           *file_line;$/;"	m	struct:apr_pool_t	file:
file_stderr	test/apr_pools.cpp	/^static apr_file_t *file_stderr = NULL;$/;"	v	file:
filterpc	ldebug.cpp	/^static int filterpc (int pc, int jmptarget) {$/;"	f	file:
findfield	lauxlib.cpp	/^static int findfield (lua_State *L, int objidx, int level) {$/;"	f	file:
findfile	loadlib.cpp	/^static const char *findfile (lua_State *L, const char *name,$/;"	f	file:
findgotos	lparser.cpp	/^static void findgotos (LexState *ls, Labeldesc *lb) {$/;"	f	file:
findindex	ltable.cpp	/^static unsigned int findindex (lua_State *L, Table *t, StkId key) {$/;"	f	file:
findlabel	lparser.cpp	/^static int findlabel (LexState *ls, int g) {$/;"	f	file:
findlast	lgc.cpp	/^static GCObject **findlast (GCObject **p) {$/;"	f	file:
findloader	loadlib.cpp	/^static void findloader (lua_State *L, const char *name) {$/;"	f	file:
findlocal	ldebug.cpp	/^static const char *findlocal (lua_State *L, CallInfo *ci, int n,$/;"	f	file:
findpcall	ldo.cpp	/^static CallInfo *findpcall (lua_State *L) {$/;"	f	file:
findsetreg	ldebug.cpp	/^static int findsetreg (Proto *p, int lastpc, int reg) {$/;"	f	file:
findvararg	ldebug.cpp	/^static const char *findvararg (CallInfo *ci, int n, StkId *pos) {$/;"	f	file:
finishCcall	ldo.cpp	/^static void finishCcall (lua_State *L, int status) {$/;"	f	file:
finishpcall	lbaselib.cpp	/^static int finishpcall (lua_State *L, int status, lua_KContext extra) {$/;"	f	file:
finobj	lstate.h	/^  GCObject *finobj;  \/* list of collectable objects with finalizers *\/$/;"	m	struct:global_State
first_avail	test/apr_allocator.h	/^    char          *first_avail;     \/**< pointer to first free memory *\/$/;"	m	struct:apr_memnode_t
firstgoto	lparser.cpp	/^  int firstgoto;  \/* index of first pending goto in this block *\/$/;"	m	struct:BlockCnt	file:
firstlabel	lparser.cpp	/^  int firstlabel;  \/* index of first label in this block *\/$/;"	m	struct:BlockCnt	file:
firstlocal	lparser.h	/^  int firstlocal;  \/* index of first local var (in Dyndata array) *\/$/;"	m	struct:FuncState
fixedgc	lstate.h	/^  GCObject *fixedgc;  \/* list of objects not to be collected *\/$/;"	m	struct:global_State
fixjump	lcode.cpp	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f	file:
flags	lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/$/;"	m	struct:Table
flib	liolib.cpp	/^static const luaL_Reg flib[] = {$/;"	v	file:
fltvalue	lobject.h	164;"	d
fopen	Enclave.cpp	/^fopen(const char *filename, const char *mode)$/;"	f
forbody	lparser.cpp	/^static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {$/;"	f	file:
forlimit	lvm.cpp	/^static int forlimit (const TValue *obj, lua_Integer *p, lua_Integer step,$/;"	f	file:
forlist	lparser.cpp	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f	file:
fornum	lparser.cpp	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f	file:
forstat	lparser.cpp	/^static void forstat (LexState *ls, int line) {$/;"	f	file:
fprintf	Enclave.cpp	/^fprintf(FILE *file, const char* fmt, ...)$/;"	f
fputs	Enclave.cpp	/^fputs(const char *str, FILE *stream)$/;"	f
frac_digits	sgx_includes.h	/^   char frac_digits;$/;"	m	struct:lconv
fread	Enclave.cpp	/^fread(void *ptr, size_t size, size_t nmemb, FILE *stream)$/;"	f
frealloc	lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State
free	test/apr_pools.cpp	/^    apr_memnode_t      *free[MAX_INDEX];$/;"	m	struct:apr_allocator_t	file:
free	umm_malloc.cpp	/^      umm_ptr free;$/;"	m	union:umm_block_t::__anon28	file:
freeBlocks	umm_malloc.h	/^   unsigned short int freeBlocks; $/;"	m	struct:UMM_HEAP_INFO_t
freeEntries	umm_malloc.h	/^   unsigned short int freeEntries; $/;"	m	struct:UMM_HEAP_INFO_t
freeLclosure	lgc.cpp	/^static void freeLclosure (lua_State *L, LClosure *cl) {$/;"	f	file:
free_cleanups	test/apr_pools.cpp	/^    cleanup_t            *free_cleanups;$/;"	m	struct:apr_pool_t	file:
free_index	test/apr_allocator.h	/^    apr_uint32_t   free_index;      \/**< how much free *\/$/;"	m	struct:apr_memnode_t
freeexp	lcode.cpp	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f	file:
freeexps	lcode.cpp	/^static void freeexps (FuncState *fs, expdesc *e1, expdesc *e2) {$/;"	f	file:
freelist	lauxlib.cpp	593;"	d	file:
freeobj	lgc.cpp	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f	file:
freereg	lcode.cpp	/^static void freereg (FuncState *fs, int reg) {$/;"	f	file:
freereg	lparser.h	/^  lu_byte freereg;  \/* first free register *\/$/;"	m	struct:FuncState
freestack	lstate.cpp	/^static void freestack (lua_State *L) {$/;"	f	file:
freopen	Enclave.cpp	/^freopen(const char *filename, const char *mode, FILE *stream)$/;"	f
fromstate	lstate.cpp	70;"	d	file:
fs	llex.h	/^  struct FuncState *fs;  \/* current function (parser) *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState
fseek	Enclave.cpp	/^fseek(FILE *stream, long int offset, int whence)$/;"	f
ftell	Enclave.cpp	/^ftell(FILE *stream)$/;"	f
func	lapi.cpp	/^  StkId func;$/;"	m	struct:CallS	file:
func	lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg
func	lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo
funcargs	lparser.cpp	/^static void funcargs (LexState *ls, expdesc *f, int line) {$/;"	f	file:
funcinfo	ldebug.cpp	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f	file:
funcname	lparser.cpp	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f	file:
funcnamefromcode	ldebug.cpp	/^static const char *funcnamefromcode (lua_State *L, CallInfo *ci,$/;"	f	file:
funcs	lutf8lib.cpp	/^static const luaL_Reg funcs[] = {$/;"	v	file:
funcstat	lparser.cpp	/^static void funcstat (LexState *ls, int line) {$/;"	f	file:
fvalue	lobject.h	174;"	d
fwrite	Enclave.cpp	/^fwrite(const void *buffer, size_t size, size_t cont, FILE *fd)$/;"	f
g	lstate.cpp	/^  global_State g;$/;"	m	struct:LG	file:
g_dyn_entry_table	Enclave_t.c	/^} g_dyn_entry_table = {$/;"	v	typeref:struct:__anon3
g_ecall_table	Enclave_t.c	/^} g_ecall_table = {$/;"	v	typeref:struct:__anon1
g_iofile	liolib.cpp	/^static int g_iofile (lua_State *L, const char *f, const char *mode) {$/;"	f	file:
g_read	liolib.cpp	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f	file:
g_write	liolib.cpp	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f	file:
gc	lobject.h	/^  GCObject *gc;    \/* collectable objects *\/$/;"	m	union:Value
gc	lstate.h	/^  GCObject gc;  \/* common header *\/$/;"	m	union:GCUnion
gcfinnum	lstate.h	/^  unsigned int gcfinnum;  \/* number of finalizers to call in each GC step *\/$/;"	m	struct:global_State
gckind	lstate.h	/^  lu_byte gckind;  \/* kind of GC running *\/$/;"	m	struct:global_State
gclist	lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto
gclist	lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table
gclist	lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State
gco2ccl	lstate.h	228;"	d
gco2cl	lstate.h	229;"	d
gco2lcl	lstate.h	227;"	d
gco2p	lstate.h	232;"	d
gco2t	lstate.h	231;"	d
gco2th	lstate.h	233;"	d
gco2ts	lstate.h	224;"	d
gco2u	lstate.h	226;"	d
gcpause	lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State
gcrunning	lstate.h	/^  lu_byte gcrunning;  \/* true if GC is running *\/$/;"	m	struct:global_State
gcstate	lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State
gcstepmul	lstate.h	/^  int gcstepmul;  \/* GC 'granularity' *\/$/;"	m	struct:global_State
gctm	loadlib.cpp	/^static int gctm (lua_State *L) {$/;"	f	file:
gcvalue	lobject.h	167;"	d
generic_reader	lbaselib.cpp	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getBMode	lopcodes.h	284;"	d
getCMode	lopcodes.h	285;"	d
getF	lauxlib.cpp	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getOpMode	lopcodes.h	283;"	d
getS	lauxlib.cpp	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
get_prompt	lua.cpp	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f	file:
getarg	lopcodes.h	93;"	d
getbinopr	lparser.cpp	/^static BinOpr getbinopr (int op) {$/;"	f	file:
getboolfield	loslib.cpp	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f	file:
getc	Enclave.cpp	/^getc(FILE *stream)$/;"	f
getc_buffer	Enclave.cpp	/^char *getc_buffer = NULL;$/;"	v
getcached	lvm.cpp	/^static LClosure *getcached (Proto *p, UpVal **encup, StkId base) {$/;"	f	file:
getco	lcorolib.cpp	/^static lua_State *getco (lua_State *L) {$/;"	f	file:
getdebt	lgc.cpp	/^static l_mem getdebt (global_State *g) {$/;"	f	file:
getdetails	lstrlib.cpp	/^static KOption getdetails (Header *h, size_t totalsize,$/;"	f	file:
getenv	Enclave.cpp	/^getenv(const char *name)$/;"	f
getfield	loslib.cpp	/^static int getfield (lua_State *L, const char *key, int d, int delta) {$/;"	f	file:
getfreepos	ltable.cpp	/^static Node *getfreepos (Table *t) {$/;"	f	file:
getfuncline	ldebug.h	16;"	d
getfuncname	ldebug.cpp	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f	file:
getgeneric	ltable.cpp	/^static const TValue *getgeneric (Table *t, const TValue *key) {$/;"	f	file:
gethexa	llex.cpp	/^static int gethexa (LexState *ls) {$/;"	f	file:
getinstruction	lcode.h	44;"	d
getiofile	liolib.cpp	/^static FILE *getiofile (lua_State *L, const char *findex) {$/;"	f	file:
getjump	lcode.cpp	/^static int getjump (FuncState *fs, int pc) {$/;"	f	file:
getjumpcontrol	lcode.cpp	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f	file:
getlocvar	lparser.cpp	/^static LocVar *getlocvar (FuncState *fs, int i) {$/;"	f	file:
getnum	lstrlib.cpp	/^static int getnum (const char **fmt, int df) {$/;"	f	file:
getnumlimit	lstrlib.cpp	/^static int getnumlimit (Header *h, const char **fmt, int df) {$/;"	f	file:
getoah	lstate.h	130;"	d
getobjname	ldebug.cpp	/^static const char *getobjname (Proto *p, int lastpc, int reg,$/;"	f	file:
getoption	lstrlib.cpp	/^static KOption getoption (Header *h, const char **fmt, int *size) {$/;"	f	file:
getproto	lobject.h	468;"	d
getstr	lobject.h	328;"	d
gettableProtected	lvm.cpp	774;"	d	file:
getthread	ldblib.cpp	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f	file:
gettotalbytes	lstate.h	242;"	d
getudatamem	lobject.h	368;"	d
getunopr	lparser.cpp	/^static UnOpr getunopr (int op) {$/;"	f	file:
getupvalname	ldebug.cpp	/^static const char *getupvalname (CallInfo *ci, const TValue *o,$/;"	f	file:
getupvalref	lapi.cpp	/^static UpVal **getupvalref (lua_State *L, int fidx, int n, LClosure **pf) {$/;"	f	file:
getuservalue	lobject.h	377;"	d
gf	dh/tweetnacl.cpp	/^typedef i64 gf[16];$/;"	t	file:
gf0	dh/tweetnacl.cpp	/^  gf0,$/;"	v	file:
gf1	dh/tweetnacl.cpp	/^  gf1 = {1},$/;"	v	file:
gfasttm	ltm.h	48;"	d
gid_t	test/apr.h	/^typedef  int         gid_t;$/;"	t
gkey	ltable.h	19;"	d
globalL	lua.cpp	/^static lua_State *globalL = NULL;$/;"	v	file:
global_State	lstate.h	/^typedef struct global_State {$/;"	s
global_State	lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
global_allocator	test/apr_pools.cpp	/^static apr_allocator_t *global_allocator = NULL;$/;"	v	file:
global_pool	test/apr_pools.cpp	/^static apr_pool_t  *global_pool = NULL;$/;"	v	file:
gmatch	lstrlib.cpp	/^static int gmatch (lua_State *L) {$/;"	f	file:
gmatch_aux	lstrlib.cpp	/^static int gmatch_aux (lua_State *L) {$/;"	f	file:
gmtime	Enclave.cpp	/^gmtime(const long int *timer)$/;"	f
gnext	ltable.h	15;"	d
gnode	ltable.h	13;"	d
gnodelast	lgc.cpp	107;"	d	file:
gotostat	lparser.cpp	/^static void gotostat (LexState *ls, int pc) {$/;"	f	file:
gray	lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State
gray2black	lgc.h	99;"	d
grayagain	lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State
grouping	sgx_includes.h	/^   char *grouping;  $/;"	m	struct:lconv
growstack	lapi.cpp	/^static void growstack (lua_State *L, void *ud) {$/;"	f	file:
gt	lparser.h	/^  Labellist gt;  \/* list of pending gotos *\/$/;"	m	struct:Dyndata
gval	ltable.h	14;"	d
h	llex.h	/^  Table *h;  \/* to avoid collection\/reuse strings *\/$/;"	m	struct:LexState
h	lstate.h	/^  struct Table h;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Table
handle_luainit	lua.cpp	/^static int handle_luainit (lua_State *L) {$/;"	f	file:
handle_script	lua.cpp	/^static int handle_script (lua_State *L, char **argv) {$/;"	f	file:
has_E	lua.cpp	439;"	d	file:
has_e	lua.cpp	438;"	d	file:
has_error	lua.cpp	435;"	d	file:
has_i	lua.cpp	436;"	d	file:
has_v	lua.cpp	437;"	d	file:
hash	lobject.h	/^  unsigned int hash;$/;"	m	struct:TString
hash	lstate.h	/^  TString **hash;$/;"	m	struct:stringtable
hash	test/apr_hash.h	/^APR_POOL_DECLARE_ACCESSOR(hash);$/;"	v
hashboolean	ltable.cpp	61;"	d	file:
hashint	ltable.cpp	62;"	d	file:
hashmod	ltable.cpp	69;"	d	file:
hashpointer	ltable.cpp	72;"	d	file:
hashpow2	ltable.cpp	58;"	d	file:
hashstr	ltable.cpp	60;"	d	file:
hasjumps	lcode.cpp	36;"	d	file:
hasmultret	lparser.cpp	37;"	d	file:
header	umm_malloc.cpp	/^   } header;$/;"	m	struct:umm_block_t	typeref:union:umm_block_t::__anon27	file:
heapInfo	umm_malloc.cpp	/^UMM_HEAP_INFO heapInfo;$/;"	v
hi	test/apr_hash.h	/^APR_DECLARE(apr_hash_index_t *) apr_hash_next(apr_hash_index_t *hi);$/;"	v
hi	test/apr_hash.h	/^APR_DECLARE(apr_ssize_t) apr_hash_this_key_len(apr_hash_index_t *hi);$/;"	v
hi	test/apr_hash.h	/^APR_DECLARE(const void*) apr_hash_this_key(apr_hash_index_t *hi);$/;"	v
hi	test/apr_hash.h	/^APR_DECLARE(void*) apr_hash_this_val(apr_hash_index_t *hi);$/;"	v
hnext	lobject.h	/^    struct TString *hnext;  \/* linked list for hash table *\/$/;"	m	union:TString::__anon10	typeref:struct:TString::__anon10::TString
hook	lstate.h	/^  volatile lua_Hook hook;$/;"	m	struct:lua_State
hookcount	lstate.h	/^  int hookcount;$/;"	m	struct:lua_State
hookf	ldblib.cpp	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f	file:
ht	test/apr_hash.h	/^APR_DECLARE(unsigned int) apr_hash_count(apr_hash_t *ht);$/;"	v
ht	test/apr_hash.h	/^APR_DECLARE(void) apr_hash_clear(apr_hash_t *ht);$/;"	v
hvalue	lobject.h	175;"	d
i	llex.h	/^  lua_Integer i;$/;"	m	union:__anon8
i	llimits.h	/^  lua_Integer i;$/;"	m	union:__anon9
i	lobject.h	/^  lua_Integer i;   \/* integer numbers *\/$/;"	m	union:Value
i	lstrlib.cpp	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon23	file:
i64	dh/tweetnacl.cpp	/^typedef long long i64;$/;"	t	file:
iABC	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAsBx	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAx	lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
i_ci	lua.h	/^  struct CallInfo *i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	typeref:struct:lua_Debug::CallInfo
i_key	lobject.h	/^  TKey i_key;$/;"	m	struct:Node
i_val	lobject.h	/^  TValue i_val;$/;"	m	struct:Node
idx	lobject.h	/^  lu_byte idx;  \/* index of upvalue (in stack or in outer function's list) *\/$/;"	m	struct:Upvaldesc
idx	lparser.h	/^      short idx;  \/* index (R\/K) *\/$/;"	m	struct:expdesc::__anon15::__anon16
idx	lparser.h	/^  short idx;  \/* variable index in stack *\/$/;"	m	struct:Vardesc
ifstat	lparser.cpp	/^static void ifstat (LexState *ls, int line) {$/;"	f	file:
in_use	test/apr_pools.cpp	/^    volatile apr_uint32_t in_use;$/;"	m	struct:apr_pool_t	file:
in_use_by	test/apr_pools.cpp	/^    apr_os_thread_t       in_use_by;$/;"	m	struct:apr_pool_t	file:
in_use_string	test/apr_pools.cpp	/^static const char * const in_use_string[] = { "idle", "in use", "destroyed" };$/;"	v	file:
inclinenumber	llex.cpp	/^static void inclinenumber (LexState *ls) {$/;"	f	file:
incomplete	lua.cpp	/^static int incomplete (lua_State *L, int status) {$/;"	f	file:
ind	lparser.h	/^    } ind;$/;"	m	union:expdesc::__anon15	typeref:struct:expdesc::__anon15::__anon16
index	test/apr_allocator.h	/^    apr_uint32_t   index;           \/**< size *\/$/;"	m	struct:apr_memnode_t
index	test/apr_pools.cpp	/^    apr_size_t    index;$/;"	m	struct:debug_node_t	file:
index2addr	lapi.cpp	/^static TValue *index2addr (lua_State *L, int idx) {$/;"	f	file:
info	lparser.h	/^    int info;  \/* for generic use *\/$/;"	m	union:expdesc::__anon15
init	lstrlib.cpp	/^    const char *init;$/;"	m	struct:MatchState::__anon21	file:
init_exp	lparser.cpp	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f	file:
init_registry	lstate.cpp	/^static void init_registry (lua_State *L, global_State *g) {$/;"	f	file:
initb	lauxlib.h	/^  char initb[LUAL_BUFFERSIZE];  \/* initial buffer *\/$/;"	m	struct:luaL_Buffer
initheader	lstrlib.cpp	/^static void initheader (lua_State *L, Header *h) {$/;"	f	file:
initialized	test/start.cpp	/^static int initialized = 0;$/;"	v	file:
instack	lobject.h	/^  lu_byte instack;  \/* whether it is in stack (register) *\/$/;"	m	struct:Upvaldesc
int_curr_symbol	sgx_includes.h	/^   char *int_curr_symbol;$/;"	m	struct:lconv
int_frac_digits	sgx_includes.h	/^   char int_frac_digits;$/;"	m	struct:lconv
intarith	lobject.cpp	/^static lua_Integer intarith (lua_State *L, int op, lua_Integer v1,$/;"	f	file:
internshrstr	lstring.cpp	/^static TString *internshrstr (lua_State *L, const char *str, size_t l) {$/;"	f	file:
interror	lauxlib.cpp	/^static void interror (lua_State *L, int arg) {$/;"	f	file:
intop	lvm.h	46;"	d
inv25519	dh/tweetnacl.cpp	/^sv inv25519(gf o,const gf i)$/;"	f
invalidateTMcache	ltable.h	27;"	d
io_close	liolib.cpp	/^static int io_close (lua_State *L) {$/;"	f	file:
io_fclose	liolib.cpp	/^static int io_fclose (lua_State *L) {$/;"	f	file:
io_flush	liolib.cpp	/^static int io_flush (lua_State *L) {$/;"	f	file:
io_input	liolib.cpp	/^static int io_input (lua_State *L) {$/;"	f	file:
io_lines	liolib.cpp	/^static int io_lines (lua_State *L) {$/;"	f	file:
io_noclose	liolib.cpp	/^static int io_noclose (lua_State *L) {$/;"	f	file:
io_open	liolib.cpp	/^static int io_open (lua_State *L) {$/;"	f	file:
io_output	liolib.cpp	/^static int io_output (lua_State *L) {$/;"	f	file:
io_pclose	liolib.cpp	/^static int io_pclose (lua_State *L) {$/;"	f	file:
io_popen	liolib.cpp	/^static int io_popen (lua_State *L) {$/;"	f	file:
io_read	liolib.cpp	/^static int io_read (lua_State *L) {$/;"	f	file:
io_readline	liolib.cpp	/^static int io_readline (lua_State *L) {$/;"	f	file:
io_tmpfile	liolib.cpp	/^static int io_tmpfile (lua_State *L) {$/;"	f	file:
io_type	liolib.cpp	/^static int io_type (lua_State *L) {$/;"	f	file:
io_write	liolib.cpp	/^static int io_write (lua_State *L) {$/;"	f	file:
iolib	liolib.cpp	/^static const luaL_Reg iolib[] = {$/;"	v	file:
ipairsaux	lbaselib.cpp	/^static int ipairsaux (lua_State *L) {$/;"	f	file:
isLfunction	lobject.h	466;"	d
isLua	lstate.h	126;"	d
is_priv	Enclave_t.c	/^	struct {void* ecall_addr; uint8_t is_priv; uint8_t is_switchless;} ecall_table[11];$/;"	m	struct:__anon1::__anon2	file:
is_switchless	Enclave_t.c	/^	struct {void* ecall_addr; uint8_t is_priv; uint8_t is_switchless;} ecall_table[11];$/;"	m	struct:__anon1::__anon2	file:
is_valid_path	Enclave.cpp	/^is_valid_path(const char *filename)$/;"	f
is_vararg	lobject.h	/^  lu_byte is_vararg;$/;"	m	struct:Proto
isblack	lgc.h	88;"	d
iscleared	lgc.cpp	/^static int iscleared (global_State *g, const TValue *o) {$/;"	f	file:
isclosed	liolib.cpp	147;"	d	file:
iscollectable	lobject.h	184;"	d
iscont	lutf8lib.cpp	25;"	d	file:
isdead	lgc.h	96;"	d
isdeadm	lgc.h	95;"	d
isdummy	ltable.h	31;"	d
isemptystr	lvm.cpp	457;"	d	file:
isgray	lgc.h	89;"	d
isinstack	ldebug.cpp	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f	file:
isintwups	lfunc.h	22;"	d
islittle	lstrlib.cpp	/^  int islittle;$/;"	m	struct:Header	file:
isloop	lparser.cpp	/^  lu_byte isloop;  \/* true if 'block' is a loop *\/$/;"	m	struct:BlockCnt	file:
isneg	lobject.cpp	/^static int isneg (const char **s) {$/;"	f	file:
ispseudo	lapi.cpp	47;"	d	file:
isreserved	lstring.h	27;"	d
isstackindex	lapi.cpp	53;"	d	file:
issweepphase	lgc.h	49;"	d
istailcall	lua.h	/^  char istailcall;	\/* (t) *\/$/;"	m	struct:lua_Debug
isupvalue	lapi.cpp	50;"	d	file:
isvalid	lapi.cpp	44;"	d	file:
isvararg	lua.h	/^  char isvararg;        \/* (u) *\/$/;"	m	struct:lua_Debug
iswhite	lgc.h	87;"	d
iter_aux	lutf8lib.cpp	/^static int iter_aux (lua_State *L) {$/;"	f	file:
iter_codes	lutf8lib.cpp	/^static int iter_codes (lua_State *L) {$/;"	f	file:
iv	dh/tweetnacl.cpp	/^static const u8 iv[64] = {$/;"	v	file:
ival	lparser.h	/^    lua_Integer ival;    \/* for VKINT *\/$/;"	m	union:expdesc::__anon15
ivalue	lobject.h	163;"	d
joined	test/apr_pools.cpp	/^    apr_pool_t           *joined; \/* the caller has guaranteed that this pool$/;"	m	struct:apr_pool_t	file:
jpc	lparser.h	/^  int jpc;  \/* list of pending jumps to 'pc' *\/$/;"	m	struct:FuncState
jumponcond	lcode.cpp	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f	file:
k	lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto
k	lparser.h	/^  expkind k;$/;"	m	struct:expdesc
k	lstate.h	/^      lua_KFunction k;  \/* continuation in case of yields *\/$/;"	m	struct:CallInfo::__anon18::__anon20
keep_active_connection	Enclave.cpp	/^int keep_active_connection = 0;         \/* single vm instance, useful for globals   *\/$/;"	v
keepinvariant	lgc.h	61;"	d
keyfromval	ltable.h	39;"	d
kname	ldebug.cpp	/^static void kname (Proto *p, int pc, int c, const char **name) {$/;"	f	file:
l	llimits.h	/^  long l;$/;"	m	union:__anon9
l	lobject.h	/^  LClosure l;$/;"	m	union:Closure
l	lstate.cpp	/^  LX l;$/;"	m	struct:LG	file:
l	lstate.cpp	/^  lua_State l;$/;"	m	struct:LX	file:
l	lstate.h	/^    } l;$/;"	m	union:CallInfo::__anon18	typeref:struct:CallInfo::__anon18::__anon19
l_G	lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State
l_alloc	lauxlib.cpp	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f	file:
l_castS2U	llimits.h	122;"	d
l_castU2S	llimits.h	131;"	d
l_checkmode	liolib.cpp	/^static int l_checkmode (const char *mode) {$/;"	f	file:
l_checktime	loslib.cpp	/^static time_t l_checktime (lua_State *L, int arg) {$/;"	f	file:
l_floor	luaconf.h	434;"	d
l_fseek	liolib.cpp	110;"	d	file:
l_fseek	liolib.cpp	118;"	d	file:
l_fseek	liolib.cpp	125;"	d	file:
l_ftell	liolib.cpp	111;"	d	file:
l_ftell	liolib.cpp	119;"	d	file:
l_ftell	liolib.cpp	126;"	d	file:
l_getc	liolib.cpp	86;"	d	file:
l_getc	liolib.cpp	90;"	d	file:
l_gmtime	loslib.cpp	86;"	d	file:
l_gmtime	loslib.cpp	92;"	d	file:
l_hashfloat	ltable.cpp	/^static int l_hashfloat (lua_Number n) {$/;"	f	file:
l_inspectstat	lauxlib.cpp	261;"	d	file:
l_inspectstat	lauxlib.cpp	267;"	d	file:
l_intfitsf	lvm.cpp	59;"	d	file:
l_isfalse	lobject.h	181;"	d
l_localtime	loslib.cpp	87;"	d	file:
l_localtime	loslib.cpp	93;"	d	file:
l_lockfile	liolib.cpp	87;"	d	file:
l_lockfile	liolib.cpp	91;"	d	file:
l_mathlim	luaconf.h	459;"	d
l_mathlim	luaconf.h	475;"	d
l_mathlim	luaconf.h	490;"	d
l_mathop	luaconf.h	466;"	d
l_mathop	luaconf.h	482;"	d
l_mathop	luaconf.h	497;"	d
l_mathop	luaconf.h	649;"	d
l_mathop	luaconf.h	651;"	d
l_mem	llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t
l_mem	llimits.h	/^typedef long l_mem;$/;"	t
l_mem	llimits.h	/^typedef ptrdiff_t l_mem;$/;"	t
l_message	lua.cpp	/^static void l_message (const char *pname, const char *msg) {$/;"	f	file:
l_noret	llimits.h	139;"	d
l_noret	llimits.h	141;"	d
l_noret	llimits.h	143;"	d
l_pclose	liolib.cpp	60;"	d	file:
l_pclose	liolib.cpp	65;"	d	file:
l_pclose	liolib.cpp	74;"	d	file:
l_popen	liolib.cpp	59;"	d	file:
l_popen	liolib.cpp	64;"	d	file:
l_popen	liolib.cpp	70;"	d	file:
l_print	lua.cpp	/^static void l_print (lua_State *L) {$/;"	f	file:
l_pushtime	loslib.cpp	67;"	d	file:
l_rand	lmathlib.cpp	28;"	d	file:
l_rand	lmathlib.cpp	32;"	d	file:
l_randomizePivot	ltablib.cpp	/^static unsigned int l_randomizePivot (void) {$/;"	f	file:
l_registry	lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State
l_seeknum	liolib.cpp	112;"	d	file:
l_seeknum	liolib.cpp	120;"	d	file:
l_seeknum	liolib.cpp	127;"	d	file:
l_setbit	lgc.h	72;"	d
l_sprintf	luaconf.h	606;"	d
l_sprintf	luaconf.h	608;"	d
l_srand	lmathlib.cpp	29;"	d	file:
l_srand	lmathlib.cpp	33;"	d	file:
l_str2d	lobject.cpp	/^static const char *l_str2d (const char *s, lua_Number *result) {$/;"	f	file:
l_str2dloc	lobject.cpp	/^static const char *l_str2dloc (const char *s, lua_Number *result, int mode) {$/;"	f	file:
l_str2int	lobject.cpp	/^static const char *l_str2int (const char *s, lua_Integer *result) {$/;"	f	file:
l_strcmp	lvm.cpp	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f	file:
l_timet	loslib.cpp	66;"	d	file:
l_uacInt	llimits.h	/^typedef LUAI_UACINT l_uacInt;$/;"	t
l_uacNumber	llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t
l_unlockfile	liolib.cpp	88;"	d	file:
l_unlockfile	liolib.cpp	92;"	d	file:
label	lparser.h	/^  Labellist label;   \/* list of active labels *\/$/;"	m	struct:Dyndata
labelstat	lparser.cpp	/^static void labelstat (LexState *ls, TString *label, int line) {$/;"	f	file:
labs	Enclave.cpp	/^labs (long int i)$/;"	f
laction	lua.cpp	/^static void laction (int i) {$/;"	f	file:
lapi_c	lapi.cpp	7;"	d	file:
lapi_h	lapi.h	8;"	d
lastfree	lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table
lastlevel	lauxlib.cpp	/^static int lastlevel (lua_State *L) {$/;"	f	file:
lastline	llex.h	/^  int lastline;  \/* line of last token 'consumed' *\/$/;"	m	struct:LexState
lastlinedefined	lobject.h	/^  int lastlinedefined;  \/* debug information  *\/$/;"	m	struct:Proto
lastlinedefined	lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lastlistfield	lparser.cpp	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
lastmatch	lstrlib.cpp	/^  const char *lastmatch;  \/* end of last match *\/$/;"	m	struct:GMatchState	file:
lasttarget	lparser.h	/^  int lasttarget;   \/* 'label' of last 'jump label' *\/$/;"	m	struct:FuncState
lauxlib_c	lauxlib.cpp	7;"	d	file:
lauxlib_h	lauxlib.h	9;"	d
lbaselib_c	lbaselib.cpp	7;"	d	file:
lbitlib_c	lbitlib.cpp	7;"	d	file:
lcode_c	lcode.cpp	7;"	d	file:
lcode_h	lcode.h	8;"	d
lconv	lua.h	/^typedef struct lconv lconv;$/;"	t	typeref:struct:lconv
lconv	sgx_includes.h	/^struct lconv {$/;"	s
lcorolib_c	lcorolib.cpp	7;"	d	file:
lctype_c	lctype.cpp	7;"	d	file:
lctype_h	lctype.h	8;"	d
ld32	dh/tweetnacl.cpp	/^static u32 ld32(const u8 *x)$/;"	f	file:
ldblib_c	ldblib.cpp	7;"	d	file:
ldebug_c	ldebug.cpp	7;"	d	file:
ldebug_h	ldebug.h	8;"	d
ldo_c	ldo.cpp	7;"	d	file:
ldo_h	ldo.h	8;"	d
ldump_c	ldump.cpp	7;"	d	file:
leaveblock	lparser.cpp	/^static void leaveblock (FuncState *fs) {$/;"	f	file:
leavelevel	lparser.cpp	338;"	d	file:
left	lparser.cpp	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon13	file:
len	Enclave.cpp	/^size_t len = 0;$/;"	v
len	lobject.h	/^  size_t len;  \/* number of bytes *\/$/;"	m	struct:Udata
len	lstrlib.cpp	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon21	file:
level	lstrlib.cpp	/^  unsigned char level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	file:
lexerror	llex.cpp	/^static l_noret lexerror (LexState *ls, const char *msg, int token) {$/;"	f	file:
lfunc_c	lfunc.cpp	7;"	d	file:
lfunc_h	lfunc.h	8;"	d
lgc_c	lgc.cpp	7;"	d	file:
lgc_h	lgc.h	8;"	d
libsize	lauxlib.cpp	/^static int libsize (const luaL_Reg *l) {$/;"	f	file:
line	lparser.h	/^  int line;  \/* line where it appeared *\/$/;"	m	struct:Labeldesc
linedefined	lobject.h	/^  int linedefined;  \/* debug information  *\/$/;"	m	struct:Proto
linedefined	lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lineinfo	lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines (debug information) *\/$/;"	m	struct:Proto
linenumber	llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState
linit_c	linit.cpp	8;"	d	file:
linkgclist	lgc.cpp	113;"	d	file:
liolib_c	liolib.cpp	7;"	d	file:
lisdigit	lctype.h	59;"	d
lisdigit	lctype.h	85;"	d
lislalnum	lctype.h	58;"	d
lislalnum	lctype.h	84;"	d
lislalpha	lctype.h	57;"	d
lislalpha	lctype.h	83;"	d
lisprint	lctype.h	61;"	d
lisprint	lctype.h	87;"	d
lisspace	lctype.h	60;"	d
lisspace	lctype.h	86;"	d
list_insert	test/apr_pools.cpp	682;"	d	file:
list_remove	test/apr_pools.cpp	690;"	d	file:
listfield	lparser.cpp	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
lisxdigit	lctype.h	62;"	d
lisxdigit	lctype.h	88;"	d
little	lstrlib.cpp	/^  char little;  \/* true iff machine is little endian *\/$/;"	m	union:__anon22	file:
ll_funcs	loadlib.cpp	/^static const luaL_Reg ll_funcs[] = {$/;"	v	file:
ll_loadlib	loadlib.cpp	/^static int ll_loadlib (lua_State *L) {$/;"	f	file:
ll_module	loadlib.cpp	/^static int ll_module (lua_State *L) {$/;"	f	file:
ll_require	loadlib.cpp	/^static int ll_require (lua_State *L) {$/;"	f	file:
ll_searchpath	loadlib.cpp	/^static int ll_searchpath (lua_State *L) {$/;"	f	file:
ll_seeall	loadlib.cpp	/^static int ll_seeall (lua_State *L) {$/;"	f	file:
llex	llex.cpp	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
llex_c	llex.cpp	7;"	d	file:
llex_h	llex.h	8;"	d
llimits_h	llimits.h	8;"	d
lmathlib_c	lmathlib.cpp	7;"	d	file:
lmem_c	lmem.cpp	7;"	d	file:
lmem_h	lmem.h	8;"	d
lmemfind	lstrlib.cpp	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f	file:
lmod	lobject.h	514;"	d
lnglen	lobject.h	/^    size_t lnglen;  \/* length for long strings *\/$/;"	m	union:TString::__anon10
load_aux	lbaselib.cpp	/^static int load_aux (lua_State *L, int status, int envidx) {$/;"	f	file:
loadedlibs	linit.cpp	/^static const luaL_Reg loadedlibs[] = {$/;"	v	file:
loadfunc	loadlib.cpp	/^static int loadfunc (lua_State *L, const char *filename, const char *modname) {$/;"	f	file:
loadlib_c	loadlib.cpp	11;"	d	file:
loadline	lua.cpp	/^static int loadline (lua_State *L) {$/;"	f	file:
lobject_c	lobject.cpp	7;"	d	file:
lobject_h	lobject.h	9;"	d
localeconv	Enclave.cpp	/^localeconv(void)$/;"	f
localfunc	lparser.cpp	/^static void localfunc (LexState *ls) {$/;"	f	file:
localstat	lparser.cpp	/^static void localstat (LexState *ls) {$/;"	f	file:
localtime	Enclave.cpp	/^localtime(const long int *timer)$/;"	f
locvars	lobject.h	/^  LocVar *locvars;  \/* information about local variables (debug information) *\/$/;"	m	struct:Proto
lookahead	llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState
lookforfunc	loadlib.cpp	/^static int lookforfunc (lua_State *L, const char *path, const char *sym) {$/;"	f	file:
lopcodes_c	lopcodes.cpp	7;"	d	file:
lopcodes_h	lopcodes.h	8;"	d
loslib_c	loslib.cpp	7;"	d	file:
lparser_c	lparser.cpp	7;"	d	file:
lparser_h	lparser.h	8;"	d
lprefix_h	lprefix.h	8;"	d
ls	lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState
lsizenode	lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of 'node' array *\/$/;"	m	struct:Table
lstate_c	lstate.cpp	7;"	d	file:
lstate_h	lstate.h	8;"	d
lstop	lua.cpp	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f	file:
lstring_c	lstring.cpp	7;"	d	file:
lstring_h	lstring.h	8;"	d
lstrlib_c	lstrlib.cpp	7;"	d	file:
lsys_load	loadlib.cpp	/^static void *lsys_load (lua_State *L, const char *path, int seeglb) {$/;"	f	file:
lsys_sym	loadlib.cpp	/^static lua_CFunction lsys_sym (lua_State *L, void *lib, const char *sym) {$/;"	f	file:
lsys_unloadlib	loadlib.cpp	/^static void lsys_unloadlib (void *lib) {$/;"	f	file:
ltable_c	ltable.cpp	7;"	d	file:
ltable_h	ltable.h	8;"	d
ltablib_c	ltablib.cpp	7;"	d	file:
ltm_c	ltm.cpp	7;"	d	file:
ltm_h	ltm.h	8;"	d
ltolower	lctype.h	67;"	d
ltolower	lctype.h	90;"	d
lu_byte	llimits.h	/^typedef unsigned char lu_byte;$/;"	t
lu_mem	llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t
lu_mem	llimits.h	/^typedef size_t lu_mem;$/;"	t
lu_mem	llimits.h	/^typedef unsigned long lu_mem;$/;"	t
luaB_assert	lbaselib.cpp	/^static int luaB_assert (lua_State *L) {$/;"	f	file:
luaB_auxwrap	lcorolib.cpp	/^static int luaB_auxwrap (lua_State *L) {$/;"	f	file:
luaB_cocreate	lcorolib.cpp	/^static int luaB_cocreate (lua_State *L) {$/;"	f	file:
luaB_collectgarbage	lbaselib.cpp	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f	file:
luaB_coresume	lcorolib.cpp	/^static int luaB_coresume (lua_State *L) {$/;"	f	file:
luaB_corunning	lcorolib.cpp	/^static int luaB_corunning (lua_State *L) {$/;"	f	file:
luaB_costatus	lcorolib.cpp	/^static int luaB_costatus (lua_State *L) {$/;"	f	file:
luaB_cowrap	lcorolib.cpp	/^static int luaB_cowrap (lua_State *L) {$/;"	f	file:
luaB_dofile	lbaselib.cpp	/^static int luaB_dofile (lua_State *L) {$/;"	f	file:
luaB_error	lbaselib.cpp	/^static int luaB_error (lua_State *L) {$/;"	f	file:
luaB_getmetatable	lbaselib.cpp	/^static int luaB_getmetatable (lua_State *L) {$/;"	f	file:
luaB_ipairs	lbaselib.cpp	/^static int luaB_ipairs (lua_State *L) {$/;"	f	file:
luaB_load	lbaselib.cpp	/^static int luaB_load (lua_State *L) {$/;"	f	file:
luaB_loadfile	lbaselib.cpp	/^static int luaB_loadfile (lua_State *L) {$/;"	f	file:
luaB_next	lbaselib.cpp	/^static int luaB_next (lua_State *L) {$/;"	f	file:
luaB_pairs	lbaselib.cpp	/^static int luaB_pairs (lua_State *L) {$/;"	f	file:
luaB_pcall	lbaselib.cpp	/^static int luaB_pcall (lua_State *L) {$/;"	f	file:
luaB_print	lbaselib.cpp	/^static int luaB_print (lua_State *L) {$/;"	f	file:
luaB_rawequal	lbaselib.cpp	/^static int luaB_rawequal (lua_State *L) {$/;"	f	file:
luaB_rawget	lbaselib.cpp	/^static int luaB_rawget (lua_State *L) {$/;"	f	file:
luaB_rawlen	lbaselib.cpp	/^static int luaB_rawlen (lua_State *L) {$/;"	f	file:
luaB_rawset	lbaselib.cpp	/^static int luaB_rawset (lua_State *L) {$/;"	f	file:
luaB_select	lbaselib.cpp	/^static int luaB_select (lua_State *L) {$/;"	f	file:
luaB_setmetatable	lbaselib.cpp	/^static int luaB_setmetatable (lua_State *L) {$/;"	f	file:
luaB_tonumber	lbaselib.cpp	/^static int luaB_tonumber (lua_State *L) {$/;"	f	file:
luaB_tostring	lbaselib.cpp	/^static int luaB_tostring (lua_State *L) {$/;"	f	file:
luaB_type	lbaselib.cpp	/^static int luaB_type (lua_State *L) {$/;"	f	file:
luaB_xpcall	lbaselib.cpp	/^static int luaB_xpcall (lua_State *L) {$/;"	f	file:
luaB_yield	lcorolib.cpp	/^static int luaB_yield (lua_State *L) {$/;"	f	file:
luaB_yieldable	lcorolib.cpp	/^static int luaB_yieldable (lua_State *L) {$/;"	f	file:
luaC_barrier	lgc.h	118;"	d
luaC_barrier_	lgc.cpp	/^void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {$/;"	f
luaC_barrierback	lgc.h	122;"	d
luaC_barrierback_	lgc.cpp	/^void luaC_barrierback_ (lua_State *L, Table *t) {$/;"	f
luaC_checkGC	lgc.h	115;"	d
luaC_checkfinalizer	lgc.cpp	/^void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt) {$/;"	f
luaC_condGC	lgc.h	110;"	d
luaC_fix	lgc.cpp	/^void luaC_fix (lua_State *L, GCObject *o) {$/;"	f
luaC_freeallobjects	lgc.cpp	/^void luaC_freeallobjects (lua_State *L) {$/;"	f
luaC_fullgc	lgc.cpp	/^void luaC_fullgc (lua_State *L, int isemergency) {$/;"	f
luaC_newobj	lgc.cpp	/^GCObject *luaC_newobj (lua_State *L, int tt, size_t sz) {$/;"	f
luaC_objbarrier	lgc.h	126;"	d
luaC_runtilstate	lgc.cpp	/^void luaC_runtilstate (lua_State *L, int statesmask) {$/;"	f
luaC_step	lgc.cpp	/^void luaC_step (lua_State *L) {$/;"	f
luaC_upvalbarrier	lgc.h	130;"	d
luaC_upvalbarrier_	lgc.cpp	/^void luaC_upvalbarrier_ (lua_State *L, UpVal *uv) {$/;"	f
luaC_upvdeccount	lgc.cpp	/^void luaC_upvdeccount (lua_State *L, UpVal *uv) {$/;"	f
luaC_white	lgc.h	101;"	d
luaD_call	ldo.cpp	/^void luaD_call (lua_State *L, StkId func, int nResults) {$/;"	f
luaD_callnoyield	ldo.cpp	/^void luaD_callnoyield (lua_State *L, StkId func, int nResults) {$/;"	f
luaD_checkstack	ldo.h	28;"	d
luaD_checkstackaux	ldo.h	23;"	d
luaD_growstack	ldo.cpp	/^void luaD_growstack (lua_State *L, int n) {$/;"	f
luaD_hook	ldo.cpp	/^void luaD_hook (lua_State *L, int event, int line) {$/;"	f
luaD_inctop	ldo.cpp	/^void luaD_inctop (lua_State *L) {$/;"	f
luaD_pcall	ldo.cpp	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f
luaD_poscall	ldo.cpp	/^int luaD_poscall (lua_State *L, CallInfo *ci, StkId firstResult, int nres) {$/;"	f
luaD_precall	ldo.cpp	/^int luaD_precall (lua_State *L, StkId func, int nresults) {$/;"	f
luaD_protectedparser	ldo.cpp	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,$/;"	f
luaD_rawrunprotected	ldo.cpp	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f
luaD_reallocstack	ldo.cpp	/^void luaD_reallocstack (lua_State *L, int newsize) {$/;"	f
luaD_shrinkstack	ldo.cpp	/^void luaD_shrinkstack (lua_State *L) {$/;"	f
luaD_throw	ldo.cpp	/^l_noret luaD_throw (lua_State *L, int errcode) {$/;"	f
luaE_extendCI	lstate.cpp	/^CallInfo *luaE_extendCI (lua_State *L) {$/;"	f
luaE_freeCI	lstate.cpp	/^void luaE_freeCI (lua_State *L) {$/;"	f
luaE_freethread	lstate.cpp	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f
luaE_setdebt	lstate.cpp	/^void luaE_setdebt (global_State *g, l_mem debt) {$/;"	f
luaE_shrinkCI	lstate.cpp	/^void luaE_shrinkCI (lua_State *L) {$/;"	f
luaF_close	lfunc.cpp	/^void luaF_close (lua_State *L, StkId level) {$/;"	f
luaF_findupval	lfunc.cpp	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f
luaF_freeproto	lfunc.cpp	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f
luaF_getlocalname	lfunc.cpp	/^const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {$/;"	f
luaF_initupvals	lfunc.cpp	/^void luaF_initupvals (lua_State *L, LClosure *cl) {$/;"	f
luaF_newCclosure	lfunc.cpp	/^CClosure *luaF_newCclosure (lua_State *L, int n) {$/;"	f
luaF_newLclosure	lfunc.cpp	/^LClosure *luaF_newLclosure (lua_State *L, int n) {$/;"	f
luaF_newproto	lfunc.cpp	/^Proto *luaF_newproto (lua_State *L) {$/;"	f
luaG_addinfo	ldebug.cpp	/^const char *luaG_addinfo (lua_State *L, const char *msg, TString *src,$/;"	f
luaG_concaterror	ldebug.cpp	/^l_noret luaG_concaterror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_errormsg	ldebug.cpp	/^l_noret luaG_errormsg (lua_State *L) {$/;"	f
luaG_opinterror	ldebug.cpp	/^l_noret luaG_opinterror (lua_State *L, const TValue *p1,$/;"	f
luaG_ordererror	ldebug.cpp	/^l_noret luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_runerror	ldebug.cpp	/^l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f
luaG_tointerror	ldebug.cpp	/^l_noret luaG_tointerror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_traceexec	ldebug.cpp	/^void luaG_traceexec (lua_State *L) {$/;"	f
luaG_typeerror	ldebug.cpp	/^l_noret luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f
luaH_free	ltable.cpp	/^void luaH_free (lua_State *L, Table *t) {$/;"	f
luaH_get	ltable.cpp	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f
luaH_getint	ltable.cpp	/^const TValue *luaH_getint (Table *t, lua_Integer key) {$/;"	f
luaH_getn	ltable.cpp	/^lua_Unsigned luaH_getn (Table *t) {$/;"	f
luaH_getshortstr	ltable.cpp	/^const TValue *luaH_getshortstr (Table *t, TString *key) {$/;"	f
luaH_getstr	ltable.cpp	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f
luaH_isdummy	ltable.cpp	/^int luaH_isdummy (const Table *t) { return isdummy(t); }$/;"	f
luaH_mainposition	ltable.cpp	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f
luaH_new	ltable.cpp	/^Table *luaH_new (lua_State *L) {$/;"	f
luaH_newkey	ltable.cpp	/^TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_next	ltable.cpp	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f
luaH_resize	ltable.cpp	/^void luaH_resize (lua_State *L, Table *t, unsigned int nasize,$/;"	f
luaH_resizearray	ltable.cpp	/^void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize) {$/;"	f
luaH_set	ltable.cpp	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_setint	ltable.cpp	/^void luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {$/;"	f
luaK_checkstack	lcode.cpp	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f
luaK_code	lcode.cpp	/^static int luaK_code (FuncState *fs, Instruction i) {$/;"	f	file:
luaK_codeABC	lcode.cpp	/^int luaK_codeABC (FuncState *fs, OpCode o, int a, int b, int c) {$/;"	f
luaK_codeABx	lcode.cpp	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f
luaK_codeAsBx	lcode.h	46;"	d
luaK_codek	lcode.cpp	/^int luaK_codek (FuncState *fs, int reg, int k) {$/;"	f
luaK_concat	lcode.cpp	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f
luaK_dischargevars	lcode.cpp	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2RK	lcode.cpp	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyreg	lcode.cpp	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyregup	lcode.cpp	/^void luaK_exp2anyregup (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2nextreg	lcode.cpp	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2val	lcode.cpp	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f
luaK_fixline	lcode.cpp	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f
luaK_getlabel	lcode.cpp	/^int luaK_getlabel (FuncState *fs) {$/;"	f
luaK_goiffalse	lcode.cpp	/^void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f
luaK_goiftrue	lcode.cpp	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f
luaK_indexed	lcode.cpp	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f
luaK_infix	lcode.cpp	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f
luaK_intK	lcode.cpp	/^int luaK_intK (FuncState *fs, lua_Integer n) {$/;"	f
luaK_jump	lcode.cpp	/^int luaK_jump (FuncState *fs) {$/;"	f
luaK_jumpto	lcode.h	50;"	d
luaK_nil	lcode.cpp	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f
luaK_numberK	lcode.cpp	/^static int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f	file:
luaK_patchclose	lcode.cpp	/^void luaK_patchclose (FuncState *fs, int list, int level) {$/;"	f
luaK_patchlist	lcode.cpp	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f
luaK_patchtohere	lcode.cpp	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f
luaK_posfix	lcode.cpp	/^void luaK_posfix (FuncState *fs, BinOpr op,$/;"	f
luaK_prefix	lcode.cpp	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e, int line) {$/;"	f
luaK_reserveregs	lcode.cpp	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f
luaK_ret	lcode.cpp	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f
luaK_self	lcode.cpp	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f
luaK_setlist	lcode.cpp	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f
luaK_setmultret	lcode.h	48;"	d
luaK_setoneret	lcode.cpp	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f
luaK_setreturns	lcode.cpp	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f
luaK_storevar	lcode.cpp	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f
luaK_stringK	lcode.cpp	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f
luaL_Buffer	lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Reg	lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_Stream	lauxlib.h	/^typedef struct luaL_Stream {$/;"	s
luaL_Stream	lauxlib.h	/^} luaL_Stream;$/;"	t	typeref:struct:luaL_Stream
luaL_addchar	lauxlib.h	157;"	d
luaL_addlstring	lauxlib.cpp	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f
luaL_addsize	lauxlib.h	161;"	d
luaL_addstring	lauxlib.cpp	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f
luaL_addvalue	lauxlib.cpp	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f
luaL_argcheck	lauxlib.h	122;"	d
luaL_argerror	lauxlib.cpp	/^LUALIB_API int luaL_argerror (lua_State *L, int arg, const char *extramsg) {$/;"	f
luaL_buffinit	lauxlib.cpp	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f
luaL_buffinitsize	lauxlib.cpp	/^LUALIB_API char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz) {$/;"	f
luaL_callmeta	lauxlib.cpp	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f
luaL_checkany	lauxlib.cpp	/^LUALIB_API void luaL_checkany (lua_State *L, int arg) {$/;"	f
luaL_checkint	lauxlib.h	251;"	d
luaL_checkinteger	lauxlib.cpp	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int arg) {$/;"	f
luaL_checklong	lauxlib.h	254;"	d
luaL_checklstring	lauxlib.cpp	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int arg, size_t *len) {$/;"	f
luaL_checknumber	lauxlib.cpp	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int arg) {$/;"	f
luaL_checkoption	lauxlib.cpp	/^LUALIB_API int luaL_checkoption (lua_State *L, int arg, const char *def,$/;"	f
luaL_checkstack	lauxlib.cpp	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *msg) {$/;"	f
luaL_checkstring	lauxlib.h	124;"	d
luaL_checktype	lauxlib.cpp	/^LUALIB_API void luaL_checktype (lua_State *L, int arg, int t) {$/;"	f
luaL_checkudata	lauxlib.cpp	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_checkunsigned	lauxlib.h	247;"	d
luaL_checkversion	lauxlib.h	40;"	d
luaL_checkversion_	lauxlib.cpp	/^LUALIB_API void luaL_checkversion_ (lua_State *L, lua_Number ver, size_t sz) {$/;"	f
luaL_dofile	lauxlib.h	129;"	d
luaL_dostring	lauxlib.h	132;"	d
luaL_error	lauxlib.cpp	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f
luaL_execresult	lauxlib.cpp	/^LUALIB_API int luaL_execresult (lua_State *L, int stat) {$/;"	f
luaL_fileresult	lauxlib.cpp	/^LUALIB_API int luaL_fileresult (lua_State *L, int stat, const char *fname) {$/;"	f
luaL_findtable	lauxlib.cpp	/^static const char *luaL_findtable (lua_State *L, int idx,$/;"	f	file:
luaL_getmetafield	lauxlib.cpp	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f
luaL_getmetatable	lauxlib.h	135;"	d
luaL_getsubtable	lauxlib.cpp	/^LUALIB_API int luaL_getsubtable (lua_State *L, int idx, const char *fname) {$/;"	f
luaL_gsub	lauxlib.cpp	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,$/;"	f
luaL_len	lauxlib.cpp	/^LUALIB_API lua_Integer luaL_len (lua_State *L, int idx) {$/;"	f
luaL_loadbuffer	lauxlib.h	139;"	d
luaL_loadbufferx	lauxlib.cpp	/^LUALIB_API int luaL_loadbufferx (lua_State *L, const char *buff, size_t size,$/;"	f
luaL_loadfile	lauxlib.h	86;"	d
luaL_loadfilex	lauxlib.cpp	/^LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,$/;"	f
luaL_loadstring	lauxlib.cpp	/^LUALIB_API int luaL_loadstring (lua_State *L, const char *s) {$/;"	f
luaL_newlib	lauxlib.h	119;"	d
luaL_newlibtable	lauxlib.h	116;"	d
luaL_newmetatable	lauxlib.cpp	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_newstate	lauxlib.cpp	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f
luaL_newstatexd	lauxlib.cpp	/^LUALIB_API lua_State *luaL_newstatexd (int i) {$/;"	f
luaL_openlib	lauxlib.cpp	/^LUALIB_API void luaL_openlib (lua_State *L, const char *libname,$/;"	f
luaL_openlibs	linit.cpp	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f
luaL_opt	lauxlib.h	137;"	d
luaL_optint	lauxlib.h	252;"	d
luaL_optinteger	lauxlib.cpp	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int arg,$/;"	f
luaL_optlong	lauxlib.h	255;"	d
luaL_optlstring	lauxlib.cpp	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int arg,$/;"	f
luaL_optnumber	lauxlib.cpp	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int arg, lua_Number def) {$/;"	f
luaL_optstring	lauxlib.h	125;"	d
luaL_optunsigned	lauxlib.h	248;"	d
luaL_prepbuffer	lauxlib.h	172;"	d
luaL_prepbuffsize	lauxlib.cpp	/^LUALIB_API char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz) {$/;"	f
luaL_pushmodule	lauxlib.cpp	/^LUALIB_API void luaL_pushmodule (lua_State *L, const char *modname,$/;"	f
luaL_pushresult	lauxlib.cpp	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f
luaL_pushresultsize	lauxlib.cpp	/^LUALIB_API void luaL_pushresultsize (luaL_Buffer *B, size_t sz) {$/;"	f
luaL_ref	lauxlib.cpp	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f
luaL_register	lauxlib.h	210;"	d
luaL_requiref	lauxlib.cpp	/^LUALIB_API void luaL_requiref (lua_State *L, const char *modname,$/;"	f
luaL_setfuncs	lauxlib.cpp	/^LUALIB_API void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {$/;"	f
luaL_setmetatable	lauxlib.cpp	/^LUALIB_API void luaL_setmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_testudata	lauxlib.cpp	/^LUALIB_API void *luaL_testudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_tolstring	lauxlib.cpp	/^LUALIB_API const char *luaL_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
luaL_traceback	lauxlib.cpp	/^LUALIB_API void luaL_traceback (lua_State *L, lua_State *L1,$/;"	f
luaL_typename	lauxlib.h	127;"	d
luaL_unref	lauxlib.cpp	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f
luaL_where	lauxlib.cpp	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f
luaM_free	lmem.h	42;"	d
luaM_freearray	lmem.h	43;"	d
luaM_freemem	lmem.h	41;"	d
luaM_growaux_	lmem.cpp	/^void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,$/;"	f
luaM_growvector	lmem.h	52;"	d
luaM_malloc	lmem.h	45;"	d
luaM_new	lmem.h	46;"	d
luaM_newobject	lmem.h	50;"	d
luaM_newvector	lmem.h	47;"	d
luaM_realloc_	lmem.cpp	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f
luaM_reallocv	lmem.h	30;"	d
luaM_reallocvchar	lmem.h	38;"	d
luaM_reallocvector	lmem.h	56;"	d
luaM_toobig	lmem.cpp	/^l_noret luaM_toobig (lua_State *L) {$/;"	f
luaO_arith	lobject.cpp	/^void luaO_arith (lua_State *L, int op, const TValue *p1, const TValue *p2,$/;"	f
luaO_ceillog2	lobject.cpp	/^int luaO_ceillog2 (unsigned int x) {$/;"	f
luaO_chunkid	lobject.cpp	/^void luaO_chunkid (char *out, const char *source, size_t bufflen) {$/;"	f
luaO_fb2int	lobject.cpp	/^int luaO_fb2int (int x) {$/;"	f
luaO_hexavalue	lobject.cpp	/^int luaO_hexavalue (int c) {$/;"	f
luaO_int2fb	lobject.cpp	/^int luaO_int2fb (unsigned int x) {$/;"	f
luaO_nilobject	lobject.h	525;"	d
luaO_nilobject_	lobject.cpp	/^LUAI_DDEF const TValue luaO_nilobject_ = {NILCONSTANT};$/;"	v
luaO_nilobject_	lobject.h	/^LUAI_DDEC const TValue luaO_nilobject_;$/;"	v
luaO_pushfstring	lobject.cpp	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
luaO_pushvfstring	lobject.cpp	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f
luaO_str2num	lobject.cpp	/^size_t luaO_str2num (const char *s, TValue *o) {$/;"	f
luaO_tostring	lobject.cpp	/^void luaO_tostring (lua_State *L, StkId obj) {$/;"	f
luaO_utf8esc	lobject.cpp	/^int luaO_utf8esc (char *buff, unsigned long x) {$/;"	f
luaP_opmodes	lopcodes.cpp	/^LUAI_DDEF const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v
luaP_opmodes	lopcodes.h	/^LUAI_DDEC const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v
luaP_opnames	lopcodes.cpp	/^LUAI_DDEF const char *const luaP_opnames[NUM_OPCODES+1] = {$/;"	v
luaP_opnames	lopcodes.h	/^LUAI_DDEC const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v
luaS_clearcache	lstring.cpp	/^void luaS_clearcache (global_State *g) {$/;"	f
luaS_createlngstrobj	lstring.cpp	/^TString *luaS_createlngstrobj (lua_State *L, size_t l) {$/;"	f
luaS_eqlngstr	lstring.cpp	/^int luaS_eqlngstr (TString *a, TString *b) {$/;"	f
luaS_hash	lstring.cpp	/^unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {$/;"	f
luaS_hashlongstr	lstring.cpp	/^unsigned int luaS_hashlongstr (TString *ts) {$/;"	f
luaS_init	lstring.cpp	/^void luaS_init (lua_State *L) {$/;"	f
luaS_new	lstring.cpp	/^TString *luaS_new (lua_State *L, const char *str) {$/;"	f
luaS_newliteral	lstring.h	20;"	d
luaS_newlstr	lstring.cpp	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f
luaS_newudata	lstring.cpp	/^Udata *luaS_newudata (lua_State *L, size_t s) {$/;"	f
luaS_remove	lstring.cpp	/^void luaS_remove (lua_State *L, TString *ts) {$/;"	f
luaS_resize	lstring.cpp	/^void luaS_resize (lua_State *L, int newsize) {$/;"	f
luaT_callTM	ltm.cpp	/^void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f
luaT_callbinTM	ltm.cpp	/^int luaT_callbinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_callorderTM	ltm.cpp	/^int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_gettm	ltm.cpp	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f
luaT_gettmbyobj	ltm.cpp	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f
luaT_init	ltm.cpp	/^void luaT_init (lua_State *L) {$/;"	f
luaT_objtypename	ltm.cpp	/^const char *luaT_objtypename (lua_State *L, const TValue *o) {$/;"	f
luaT_trybinTM	ltm.cpp	/^void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_typenames_	ltm.cpp	/^LUAI_DDEF const char *const luaT_typenames_[LUA_TOTALTAGS] = {$/;"	v
luaT_typenames_	ltm.h	/^LUAI_DDEC const char *const luaT_typenames_[LUA_TOTALTAGS];$/;"	v
luaU_dump	ldump.cpp	/^int luaU_dump(lua_State *L, const Proto *f, lua_Writer w, void *data,$/;"	f
luaU_undump	lundump.cpp	/^LClosure *luaU_undump(lua_State *L, ZIO *Z, const char *name) {$/;"	f
luaV_concat	lvm.cpp	/^void luaV_concat (lua_State *L, int total) {$/;"	f
luaV_div	lvm.cpp	/^lua_Integer luaV_div (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f
luaV_equalobj	lvm.cpp	/^int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f
luaV_execute	lvm.cpp	/^void luaV_execute (lua_State *L) {$/;"	f
luaV_fastget	lvm.h	58;"	d
luaV_fastset	lvm.h	80;"	d
luaV_finishOp	lvm.cpp	/^void luaV_finishOp (lua_State *L) {$/;"	f
luaV_finishget	lvm.cpp	/^void luaV_finishget (lua_State *L, const TValue *t, TValue *key, StkId val,$/;"	f
luaV_finishset	lvm.cpp	/^void luaV_finishset (lua_State *L, const TValue *t, TValue *key,$/;"	f
luaV_gettable	lvm.h	67;"	d
luaV_lessequal	lvm.cpp	/^int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_lessthan	lvm.cpp	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_mod	lvm.cpp	/^lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f
luaV_objlen	lvm.cpp	/^void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {$/;"	f
luaV_rawequalobj	lvm.h	48;"	d
luaV_settable	lvm.h	90;"	d
luaV_shiftl	lvm.cpp	/^lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y) {$/;"	f
luaV_tointeger	lvm.cpp	/^int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode) {$/;"	f
luaV_tonumber_	lvm.cpp	/^int luaV_tonumber_ (const TValue *obj, lua_Number *n) {$/;"	f
luaX_init	llex.cpp	/^void luaX_init (lua_State *L) {$/;"	f
luaX_lookahead	llex.cpp	/^int luaX_lookahead (LexState *ls) {$/;"	f
luaX_newstring	llex.cpp	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f
luaX_next	llex.cpp	/^void luaX_next (LexState *ls) {$/;"	f
luaX_setinput	llex.cpp	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source,$/;"	f
luaX_syntaxerror	llex.cpp	/^l_noret luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f
luaX_token2str	llex.cpp	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f
luaX_tokens	llex.cpp	/^static const char *const luaX_tokens [] = {$/;"	v	file:
luaY_parser	lparser.cpp	/^LClosure *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff,$/;"	f
luaZ_buffer	lzio.h	31;"	d
luaZ_bufflen	lzio.h	33;"	d
luaZ_buffremove	lzio.h	35;"	d
luaZ_fill	lzio.cpp	/^int luaZ_fill (ZIO *z) {$/;"	f
luaZ_freebuffer	lzio.h	44;"	d
luaZ_init	lzio.cpp	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f
luaZ_initbuffer	lzio.h	29;"	d
luaZ_read	lzio.cpp	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f
luaZ_resetbuffer	lzio.h	36;"	d
luaZ_resizebuffer	lzio.h	39;"	d
luaZ_sizebuffer	lzio.h	32;"	d
lua_Alloc	lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t
lua_CFunction	lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t
lua_Debug	lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t
lua_Integer	lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t
lua_KContext	lua.h	/^typedef LUA_KCONTEXT lua_KContext;$/;"	t
lua_KFunction	lua.h	/^typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);$/;"	t
lua_Number	lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t
lua_Reader	lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t
lua_State	lstate.h	/^struct lua_State {$/;"	s
lua_State	lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_TValue	lobject.h	/^typedef struct lua_TValue {$/;"	s
lua_Unsigned	lua.h	/^typedef LUA_UNSIGNED lua_Unsigned;$/;"	t
lua_Writer	lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);$/;"	t
lua_absindex	lapi.cpp	/^ int lua_absindex (lua_State *L, int idx) {$/;"	f
lua_arith	lapi.cpp	/^ void lua_arith (lua_State *L, int op) {$/;"	f
lua_assert	llimits.h	89;"	d
lua_assert	lualib.h	57;"	d
lua_atpanic	lapi.cpp	/^ lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f
lua_c	lua.cpp	7;"	d	file:
lua_call	lua.h	275;"	d
lua_callk	lapi.cpp	/^ void lua_callk (lua_State *L, int nargs, int nresults,$/;"	f
lua_checkstack	lapi.cpp	/^ int lua_checkstack (lua_State *L, int n) {$/;"	f
lua_close	lstate.cpp	/^LUA_API void lua_close (lua_State *L) {$/;"	f
lua_compare	lapi.cpp	/^ int lua_compare (lua_State *L, int index1, int index2, int op) {$/;"	f
lua_concat	lapi.cpp	/^ void lua_concat (lua_State *L, int n) {$/;"	f
lua_copy	lapi.cpp	/^ void lua_copy (lua_State *L, int fromidx, int toidx) {$/;"	f
lua_cpcall	luaconf.h	353;"	d
lua_createtable	lapi.cpp	/^void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f
lua_dump	lapi.cpp	/^ int lua_dump (lua_State *L, lua_Writer writer, void *data, int strip) {$/;"	f
lua_equal	luaconf.h	385;"	d
lua_error	lapi.cpp	/^ int lua_error (lua_State *L) {$/;"	f
lua_freeline	lua.cpp	78;"	d	file:
lua_freeline	lua.cpp	86;"	d	file:
lua_gc	lapi.cpp	/^ int lua_gc (lua_State *L, int what, int data) {$/;"	f
lua_getallocf	lapi.cpp	/^ lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f
lua_getextraspace	lua.h	340;"	d
lua_getfield	lapi.cpp	/^ int lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_getglobal	lapi.cpp	/^ int lua_getglobal (lua_State *L, const char *name) {$/;"	f
lua_gethook	ldebug.cpp	/^ lua_Hook lua_gethook (lua_State *L) {$/;"	f
lua_gethookcount	ldebug.cpp	/^ int lua_gethookcount (lua_State *L) {$/;"	f
lua_gethookmask	ldebug.cpp	/^ int lua_gethookmask (lua_State *L) {$/;"	f
lua_geti	lapi.cpp	/^ int lua_geti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_getinfo	ldebug.cpp	/^ int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f
lua_getlocal	ldebug.cpp	/^ const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_getlocaledecpoint	luaconf.h	680;"	d
lua_getmetatable	lapi.cpp	/^ int lua_getmetatable (lua_State *L, int objindex) {$/;"	f
lua_getstack	ldebug.cpp	/^ int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f
lua_gettable	lapi.cpp	/^ int lua_gettable (lua_State *L, int idx) {$/;"	f
lua_gettop	lapi.cpp	/^ int lua_gettop (lua_State *L) {$/;"	f
lua_getupvalue	lapi.cpp	/^ const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_getuservalue	lapi.cpp	/^ int lua_getuservalue (lua_State *L, int idx) {$/;"	f
lua_h	lua.h	10;"	d
lua_ident	lapi.cpp	/^const char lua_ident[] =$/;"	v
lua_insert	lua.h	370;"	d
lua_integer2str	luaconf.h	530;"	d
lua_isboolean	lua.h	357;"	d
lua_iscfunction	lapi.cpp	/^ int lua_iscfunction (lua_State *L, int idx) {$/;"	f
lua_isfunction	lua.h	353;"	d
lua_isinteger	lapi.cpp	/^ int lua_isinteger (lua_State *L, int idx) {$/;"	f
lua_islightuserdata	lua.h	355;"	d
lua_isnil	lua.h	356;"	d
lua_isnone	lua.h	359;"	d
lua_isnoneornil	lua.h	360;"	d
lua_isnumber	lapi.cpp	/^ int lua_isnumber (lua_State *L, int idx) {$/;"	f
lua_isstring	lapi.cpp	/^ int lua_isstring (lua_State *L, int idx) {$/;"	f
lua_istable	lua.h	354;"	d
lua_isthread	lua.h	358;"	d
lua_isuserdata	lapi.cpp	/^ int lua_isuserdata (lua_State *L, int idx) {$/;"	f
lua_isyieldable	ldo.cpp	/^ int lua_isyieldable (lua_State *L) {$/;"	f
lua_len	lapi.cpp	/^ void lua_len (lua_State *L, int idx) {$/;"	f
lua_lessthan	luaconf.h	386;"	d
lua_load	lapi.cpp	/^ int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f
lua_lock	llimits.h	214;"	d
lua_longassert	llimits.h	87;"	d
lua_longassert	llimits.h	91;"	d
lua_longjmp	ldo.cpp	/^struct lua_longjmp {$/;"	s	file:
lua_newstate	lstate.cpp	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f
lua_newtable	lua.h	347;"	d
lua_newthread	lstate.cpp	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f
lua_newuserdata	lapi.cpp	/^ void *lua_newuserdata (lua_State *L, size_t size) {$/;"	f
lua_next	lapi.cpp	/^ int lua_next (lua_State *L, int idx) {$/;"	f
lua_number2str	luaconf.h	436;"	d
lua_number2strx	lstrlib.cpp	/^static int lua_number2strx (lua_State *L, char *buff, int sz,$/;"	f	file:
lua_number2strx	luaconf.h	637;"	d
lua_numbertointeger	luaconf.h	447;"	d
lua_objlen	luaconf.h	383;"	d
lua_pcall	lua.h	279;"	d
lua_pcallk	lapi.cpp	/^ int lua_pcallk (lua_State *L, int nargs, int nresults, int errfunc,$/;"	f
lua_pointer2str	luaconf.h	627;"	d
lua_pop	lua.h	345;"	d
lua_pushboolean	lapi.cpp	/^ void lua_pushboolean (lua_State *L, int b) {$/;"	f
lua_pushcclosure	lapi.cpp	/^ void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f
lua_pushcfunction	lua.h	351;"	d
lua_pushfstring	lapi.cpp	/^ const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
lua_pushglobaltable	lua.h	364;"	d
lua_pushinteger	lapi.cpp	/^ void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f
lua_pushlightuserdata	lapi.cpp	/^ void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f
lua_pushliteral	lua.h	362;"	d
lua_pushlstring	lapi.cpp	/^ const char *lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f
lua_pushnil	lapi.cpp	/^ void lua_pushnil (lua_State *L) {$/;"	f
lua_pushnumber	lapi.cpp	/^ void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f
lua_pushstring	lapi.cpp	/^ const char *lua_pushstring (lua_State *L, const char *s) {$/;"	f
lua_pushthread	lapi.cpp	/^ int lua_pushthread (lua_State *L) {$/;"	f
lua_pushunsigned	lua.h	386;"	d
lua_pushvalue	lapi.cpp	/^ void lua_pushvalue (lua_State *L, int idx) {$/;"	f
lua_pushvfstring	lapi.cpp	/^ const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f
lua_rawequal	lapi.cpp	/^ int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f
lua_rawget	lapi.cpp	/^ int lua_rawget (lua_State *L, int idx) {$/;"	f
lua_rawgeti	lapi.cpp	/^ int lua_rawgeti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_rawgetp	lapi.cpp	/^ int lua_rawgetp (lua_State *L, int idx, const void *p) {$/;"	f
lua_rawlen	lapi.cpp	/^ size_t lua_rawlen (lua_State *L, int idx) {$/;"	f
lua_rawset	lapi.cpp	/^ void lua_rawset (lua_State *L, int idx) {$/;"	f
lua_rawseti	lapi.cpp	/^ void lua_rawseti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_rawsetp	lapi.cpp	/^ void lua_rawsetp (lua_State *L, int idx, const void *p) {$/;"	f
lua_readline	lua.cpp	76;"	d	file:
lua_readline	lua.cpp	82;"	d	file:
lua_register	lua.h	349;"	d
lua_remove	lua.h	372;"	d
lua_replace	lua.h	374;"	d
lua_resume	ldo.cpp	/^ int lua_resume (lua_State *L, lua_State *from, int nargs) {$/;"	f
lua_rotate	lapi.cpp	/^ void lua_rotate (lua_State *L, int idx, int n) {$/;"	f
lua_saveline	lua.cpp	77;"	d	file:
lua_saveline	lua.cpp	85;"	d	file:
lua_setallocf	lapi.cpp	/^ void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f
lua_setfield	lapi.cpp	/^ void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_setglobal	lapi.cpp	/^ void lua_setglobal (lua_State *L, const char *name) {$/;"	f
lua_sethook	ldebug.cpp	/^ void lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f
lua_seti	lapi.cpp	/^ void lua_seti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_setlocal	ldebug.cpp	/^ const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_setmetatable	lapi.cpp	/^ int lua_setmetatable (lua_State *L, int objindex) {$/;"	f
lua_settable	lapi.cpp	/^ void lua_settable (lua_State *L, int idx) {$/;"	f
lua_settop	lapi.cpp	/^ void lua_settop (lua_State *L, int idx) {$/;"	f
lua_setupvalue	lapi.cpp	/^ const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_setuservalue	lapi.cpp	/^ void lua_setuservalue (lua_State *L, int idx) {$/;"	f
lua_status	lapi.cpp	/^ int lua_status (lua_State *L) {$/;"	f
lua_stdin_is_tty	lua.cpp	52;"	d	file:
lua_stdin_is_tty	lua.cpp	57;"	d	file:
lua_str2number	luaconf.h	468;"	d
lua_str2number	luaconf.h	484;"	d
lua_str2number	luaconf.h	499;"	d
lua_str2number	luaconf.h	650;"	d
lua_str2number	luaconf.h	652;"	d
lua_stringtonumber	lapi.cpp	/^ size_t lua_stringtonumber (lua_State *L, const char *s) {$/;"	f
lua_strlen	luaconf.h	381;"	d
lua_strx2number	lobject.cpp	/^static lua_Number lua_strx2number (const char *s, char **endptr) {$/;"	f	file:
lua_strx2number	luaconf.h	619;"	d
lua_tmpnam	loslib.cpp	121;"	d	file:
lua_tmpnam	loslib.cpp	131;"	d	file:
lua_toboolean	lapi.cpp	/^ int lua_toboolean (lua_State *L, int idx) {$/;"	f
lua_tocfunction	lapi.cpp	/^ lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f
lua_tointeger	lua.h	343;"	d
lua_tointegerx	lapi.cpp	/^ lua_Integer lua_tointegerx (lua_State *L, int idx, int *pisnum) {$/;"	f
lua_tolstring	lapi.cpp	/^ const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
lua_tonumber	lua.h	342;"	d
lua_tonumberx	lapi.cpp	/^ lua_Number lua_tonumberx (lua_State *L, int idx, int *pisnum) {$/;"	f
lua_topointer	lapi.cpp	/^ const void *lua_topointer (lua_State *L, int idx) {$/;"	f
lua_tostring	lua.h	367;"	d
lua_tothread	lapi.cpp	/^ lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f
lua_tounsigned	lua.h	388;"	d
lua_tounsignedx	lua.h	387;"	d
lua_touserdata	lapi.cpp	/^ void *lua_touserdata (lua_State *L, int idx) {$/;"	f
lua_type	lapi.cpp	/^ int lua_type (lua_State *L, int idx) {$/;"	f
lua_typename	lapi.cpp	/^ const char *lua_typename (lua_State *L, int t) {$/;"	f
lua_unlock	llimits.h	215;"	d
lua_upvalueid	lapi.cpp	/^ void *lua_upvalueid (lua_State *L, int fidx, int n) {$/;"	f
lua_upvalueindex	lua.h	45;"	d
lua_upvaluejoin	lapi.cpp	/^ void lua_upvaluejoin (lua_State *L, int fidx1, int n1,$/;"	f
lua_version	lapi.cpp	/^ const lua_Number *lua_version (lua_State *L) {$/;"	f
lua_writeline	lauxlib.h	228;"	d
lua_writestring	lauxlib.h	223;"	d
lua_writestringerror	lauxlib.h	233;"	d
lua_xmove	lapi.cpp	/^ void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f
lua_yield	lua.h	296;"	d
lua_yieldk	ldo.cpp	/^ int lua_yieldk (lua_State *L, int nresults, lua_KContext ctx,$/;"	f
luaconf_h	luaconf.h	9;"	d
luai_apicheck	llimits.h	98;"	d
luai_apicheck	luaconf.h	708;"	d
luai_ctype_	lctype.cpp	/^LUAI_DDEF const lu_byte luai_ctype_[UCHAR_MAX + 2] = {$/;"	v
luai_ctype_	lctype.h	/^LUAI_DDEC const lu_byte luai_ctype_[UCHAR_MAX + 2];$/;"	v
luai_jmpbuf	ldo.cpp	61;"	d	file:
luai_jmpbuf	ldo.cpp	68;"	d	file:
luai_jmpbuf	ldo.cpp	75;"	d	file:
luai_makeseed	lstate.cpp	46;"	d	file:
luai_numadd	llimits.h	291;"	d
luai_numdiv	llimits.h	269;"	d
luai_numeq	llimits.h	295;"	d
luai_numidiv	llimits.h	264;"	d
luai_numisnan	llimits.h	298;"	d
luai_numle	llimits.h	297;"	d
luai_numlt	llimits.h	296;"	d
luai_nummod	llimits.h	280;"	d
luai_nummul	llimits.h	293;"	d
luai_numpow	llimits.h	286;"	d
luai_numsub	llimits.h	292;"	d
luai_numunm	llimits.h	294;"	d
luai_threadyield	llimits.h	223;"	d
luai_userstateclose	llimits.h	237;"	d
luai_userstatefree	llimits.h	245;"	d
luai_userstateopen	llimits.h	233;"	d
luai_userstateresume	llimits.h	249;"	d
luai_userstatethread	llimits.h	241;"	d
luai_userstateyield	llimits.h	253;"	d
luai_verifycode	lundump.cpp	28;"	d	file:
lualib_h	lualib.h	9;"	d
luaopen_base	lbaselib.cpp	/^LUAMOD_API int luaopen_base (lua_State *L) {$/;"	f
luaopen_bit32	lbitlib.cpp	/^LUAMOD_API int luaopen_bit32 (lua_State *L) {$/;"	f
luaopen_coroutine	lcorolib.cpp	/^LUAMOD_API int luaopen_coroutine (lua_State *L) {$/;"	f
luaopen_debug	ldblib.cpp	/^LUAMOD_API int luaopen_debug (lua_State *L) {$/;"	f
luaopen_io	liolib.cpp	/^LUAMOD_API int luaopen_io (lua_State *L) {$/;"	f
luaopen_math	lmathlib.cpp	/^LUAMOD_API int luaopen_math (lua_State *L) {$/;"	f
luaopen_os	loslib.cpp	/^LUAMOD_API int luaopen_os (lua_State *L) {$/;"	f
luaopen_package	loadlib.cpp	/^LUAMOD_API int luaopen_package (lua_State *L) {$/;"	f
luaopen_string	lstrlib.cpp	/^LUAMOD_API int luaopen_string (lua_State *L) {$/;"	f
luaopen_table	ltablib.cpp	/^LUAMOD_API int luaopen_table (lua_State *L) {$/;"	f
luaopen_utf8	lutf8lib.cpp	/^LUAMOD_API int luaopen_utf8 (lua_State *L) {$/;"	f
lundump_c	lundump.cpp	7;"	d	file:
lundump_h	lundump.h	8;"	d
lutf8lib_c	lutf8lib.cpp	7;"	d	file:
lvm	Enclave.cpp	/^std::string lvm = ".\/lua_vm";$/;"	v
lvm_c	lvm.cpp	7;"	d	file:
lvm_h	lvm.h	8;"	d
lzio_c	lzio.cpp	7;"	d	file:
lzio_h	lzio.h	9;"	d
main	lua.cpp	/^main (int argc, char **argv)$/;"	f
main	test/t.c	/^int main(int argc, const char *argv[])$/;"	f
mainfunc	lparser.cpp	/^static void mainfunc (LexState *ls, FuncState *fs) {$/;"	f	file:
mainposition	ltable.cpp	/^static Node *mainposition (const Table *t, const TValue *key) {$/;"	f	file:
mainthread	lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
makemask	ldblib.cpp	/^static int makemask (const char *smask, int count) {$/;"	f	file:
makeseed	lstate.cpp	/^static unsigned int makeseed (lua_State *L) {$/;"	f	file:
makewhite	lgc.cpp	67;"	d	file:
markbeingfnz	lgc.cpp	/^static void markbeingfnz (global_State *g) {$/;"	f	file:
marklen	lua.cpp	271;"	d	file:
markmt	lgc.cpp	/^static void markmt (global_State *g) {$/;"	f	file:
markobject	lgc.cpp	86;"	d	file:
markobjectN	lgc.cpp	92;"	d	file:
markupval	lparser.cpp	/^static void markupval (FuncState *fs, int level) {$/;"	f	file:
markvalue	lgc.cpp	83;"	d	file:
mask	lbitlib.cpp	45;"	d	file:
maskcolors	lgc.cpp	66;"	d	file:
match	lstrlib.cpp	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f	file:
match_capture	lstrlib.cpp	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f	file:
match_class	lstrlib.cpp	/^static int match_class (int c, int cl) {$/;"	f	file:
matchbalance	lstrlib.cpp	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f	file:
matchbracketclass	lstrlib.cpp	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f	file:
matchdepth	lstrlib.cpp	/^  int matchdepth;  \/* control for recursive depth (to avoid C stack overflow) *\/$/;"	m	struct:MatchState	file:
math_abs	lmathlib.cpp	/^static int math_abs (lua_State *L) {$/;"	f	file:
math_acos	lmathlib.cpp	/^static int math_acos (lua_State *L) {$/;"	f	file:
math_asin	lmathlib.cpp	/^static int math_asin (lua_State *L) {$/;"	f	file:
math_atan	lmathlib.cpp	/^static int math_atan (lua_State *L) {$/;"	f	file:
math_ceil	lmathlib.cpp	/^static int math_ceil (lua_State *L) {$/;"	f	file:
math_cos	lmathlib.cpp	/^static int math_cos (lua_State *L) {$/;"	f	file:
math_cosh	lmathlib.cpp	/^static int math_cosh (lua_State *L) {$/;"	f	file:
math_deg	lmathlib.cpp	/^static int math_deg (lua_State *L) {$/;"	f	file:
math_exp	lmathlib.cpp	/^static int math_exp (lua_State *L) {$/;"	f	file:
math_floor	lmathlib.cpp	/^static int math_floor (lua_State *L) {$/;"	f	file:
math_fmod	lmathlib.cpp	/^static int math_fmod (lua_State *L) {$/;"	f	file:
math_frexp	lmathlib.cpp	/^static int math_frexp (lua_State *L) {$/;"	f	file:
math_ldexp	lmathlib.cpp	/^static int math_ldexp (lua_State *L) {$/;"	f	file:
math_log	lmathlib.cpp	/^static int math_log (lua_State *L) {$/;"	f	file:
math_log10	lmathlib.cpp	/^static int math_log10 (lua_State *L) {$/;"	f	file:
math_max	lmathlib.cpp	/^static int math_max (lua_State *L) {$/;"	f	file:
math_min	lmathlib.cpp	/^static int math_min (lua_State *L) {$/;"	f	file:
math_modf	lmathlib.cpp	/^static int math_modf (lua_State *L) {$/;"	f	file:
math_pow	lmathlib.cpp	/^static int math_pow (lua_State *L) {$/;"	f	file:
math_rad	lmathlib.cpp	/^static int math_rad (lua_State *L) {$/;"	f	file:
math_random	lmathlib.cpp	/^static int math_random (lua_State *L) {$/;"	f	file:
math_randomseed	lmathlib.cpp	/^static int math_randomseed (lua_State *L) {$/;"	f	file:
math_sin	lmathlib.cpp	/^static int math_sin (lua_State *L) {$/;"	f	file:
math_sinh	lmathlib.cpp	/^static int math_sinh (lua_State *L) {$/;"	f	file:
math_sqrt	lmathlib.cpp	/^static int math_sqrt (lua_State *L) {$/;"	f	file:
math_tan	lmathlib.cpp	/^static int math_tan (lua_State *L) {$/;"	f	file:
math_tanh	lmathlib.cpp	/^static int math_tanh (lua_State *L) {$/;"	f	file:
math_toint	lmathlib.cpp	/^static int math_toint (lua_State *L) {$/;"	f	file:
math_type	lmathlib.cpp	/^static int math_type (lua_State *L) {$/;"	f	file:
math_ult	lmathlib.cpp	/^static int math_ult (lua_State *L) {$/;"	f	file:
mathlib	lmathlib.cpp	/^static const luaL_Reg mathlib[] = {$/;"	v	file:
max_expand	lstrlib.cpp	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f	file:
max_free_index	test/apr_pools.cpp	/^    apr_size_t        max_free_index;$/;"	m	struct:apr_allocator_t	file:
max_index	test/apr_pools.cpp	/^    apr_size_t        max_index;$/;"	m	struct:apr_allocator_t	file:
maxalign	lstrlib.cpp	/^  int maxalign;$/;"	m	struct:Header	file:
maxn	ltablib.cpp	/^static int maxn (lua_State *L) {$/;"	f	file:
maxstacksize	lobject.h	/^  lu_byte maxstacksize;  \/* number of registers needed by this function *\/$/;"	m	struct:Proto
mem	test/apr_pools.cpp	/^    char      *mem;$/;"	m	struct:psprintf_data	file:
memerrmsg	lstate.h	/^  TString *memerrmsg;  \/* memory-error message *\/$/;"	m	struct:global_State
memmove	test/apr_general.h	153;"	d
metatable	lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table::Table
metatable	lobject.h	/^  struct Table *metatable;$/;"	m	struct:Udata	typeref:struct:Udata::Table
min_expand	lstrlib.cpp	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f	file:
minusp	dh/tweetnacl.cpp	/^static const u32 minusp[17] = {$/;"	v	file:
mktime	Enclave.cpp	/^mktime(struct tm *timeptr)$/;"	f
modL	dh/tweetnacl.cpp	/^sv modL(u8 *r,i64 x[64])$/;"	f
mode	ldo.cpp	/^  const char *mode;$/;"	m	struct:SParser	file:
modinit	loadlib.cpp	/^static void modinit (lua_State *L, const char *modname) {$/;"	f	file:
mon_decimal_point	sgx_includes.h	/^   char *mon_decimal_point;$/;"	m	struct:lconv
mon_grouping	sgx_includes.h	/^   char *mon_grouping;$/;"	m	struct:lconv
mon_thousands_sep	sgx_includes.h	/^   char *mon_thousands_sep;$/;"	m	struct:lconv
movegotosout	lparser.cpp	/^static void movegotosout (FuncState *fs, BlockCnt *bl) {$/;"	f	file:
moveresults	ldo.cpp	/^static int moveresults (lua_State *L, const TValue *firstResult, StkId res,$/;"	f	file:
ms	lstrlib.cpp	/^  MatchState ms;  \/* match state *\/$/;"	m	struct:GMatchState	file:
ms_arg	Enclave_t.c	/^	char* ms_arg;$/;"	m	struct:ms_ecall_push_arg_t	file:
ms_arg	Enclave_t.c	/^	int ms_arg;$/;"	m	struct:ms_ecall_init_t	file:
ms_buffer	Enclave_t.c	/^	char* ms_buffer;$/;"	m	struct:ms_ocall_setvbuf_t	file:
ms_buffer	Enclave_t.c	/^	const void* ms_buffer;$/;"	m	struct:ms_ocall_fwrite_t	file:
ms_category	Enclave_t.c	/^	int ms_category;$/;"	m	struct:ms_ocall_setlocale_t	file:
ms_ch	Enclave_t.c	/^	int ms_ch;$/;"	m	struct:ms_ocall_ungetc_t	file:
ms_code	Enclave_t.c	/^	char* ms_code;$/;"	m	struct:ms_ecall_add_code_t	file:
ms_code	Enclave_t.c	/^	size_t ms_code;$/;"	m	struct:ms_ecall_extra_args_t	file:
ms_code	Enclave_t.c	/^	void* ms_code;$/;"	m	struct:ms_ecall_add_code_encrypted_t	file:
ms_code_len	Enclave_t.c	/^	size_t ms_code_len;$/;"	m	struct:ms_ecall_add_code_t	file:
ms_code_size	Enclave_t.c	/^	int ms_code_size;$/;"	m	struct:ms_ecall_add_code_encrypted_t	file:
ms_code_size	Enclave_t.c	/^	int ms_code_size;$/;"	m	struct:ms_ecall_add_code_t	file:
ms_count	Enclave_t.c	/^	size_t ms_count;$/;"	m	struct:ms_ocall_fwrite_t	file:
ms_ecall_add_client_pkey_t	Enclave_t.c	/^typedef struct ms_ecall_add_client_pkey_t {$/;"	s	file:
ms_ecall_add_client_pkey_t	Enclave_t.c	/^} ms_ecall_add_client_pkey_t;$/;"	t	typeref:struct:ms_ecall_add_client_pkey_t	file:
ms_ecall_add_code_encrypted_t	Enclave_t.c	/^typedef struct ms_ecall_add_code_encrypted_t {$/;"	s	file:
ms_ecall_add_code_encrypted_t	Enclave_t.c	/^} ms_ecall_add_code_encrypted_t;$/;"	t	typeref:struct:ms_ecall_add_code_encrypted_t	file:
ms_ecall_add_code_t	Enclave_t.c	/^typedef struct ms_ecall_add_code_t {$/;"	s	file:
ms_ecall_add_code_t	Enclave_t.c	/^} ms_ecall_add_code_t;$/;"	t	typeref:struct:ms_ecall_add_code_t	file:
ms_ecall_execute_t	Enclave_t.c	/^typedef struct ms_ecall_execute_t {$/;"	s	file:
ms_ecall_execute_t	Enclave_t.c	/^} ms_ecall_execute_t;$/;"	t	typeref:struct:ms_ecall_execute_t	file:
ms_ecall_extra_args_t	Enclave_t.c	/^typedef struct ms_ecall_extra_args_t {$/;"	s	file:
ms_ecall_extra_args_t	Enclave_t.c	/^} ms_ecall_extra_args_t;$/;"	t	typeref:struct:ms_ecall_extra_args_t	file:
ms_ecall_get_server_pkey_t	Enclave_t.c	/^typedef struct ms_ecall_get_server_pkey_t {$/;"	s	file:
ms_ecall_get_server_pkey_t	Enclave_t.c	/^} ms_ecall_get_server_pkey_t;$/;"	t	typeref:struct:ms_ecall_get_server_pkey_t	file:
ms_ecall_init_t	Enclave_t.c	/^typedef struct ms_ecall_init_t {$/;"	s	file:
ms_ecall_init_t	Enclave_t.c	/^} ms_ecall_init_t;$/;"	t	typeref:struct:ms_ecall_init_t	file:
ms_ecall_push_arg_t	Enclave_t.c	/^typedef struct ms_ecall_push_arg_t {$/;"	s	file:
ms_ecall_push_arg_t	Enclave_t.c	/^} ms_ecall_push_arg_t;$/;"	t	typeref:struct:ms_ecall_push_arg_t	file:
ms_ecall_send_aes_key_t	Enclave_t.c	/^typedef struct ms_ecall_send_aes_key_t {$/;"	s	file:
ms_ecall_send_aes_key_t	Enclave_t.c	/^} ms_ecall_send_aes_key_t;$/;"	t	typeref:struct:ms_ecall_send_aes_key_t	file:
ms_f	Enclave_t.c	/^	FILE* ms_f;$/;"	m	struct:ms_ocall_get_file_size_t	file:
ms_f	Enclave_t.c	/^	FILE* ms_f;$/;"	m	struct:ms_recover_filename_t	file:
ms_fd	Enclave_t.c	/^	FILE* ms_fd;$/;"	m	struct:ms_ocall_fwrite_t	file:
ms_filename	Enclave_t.c	/^	const char* ms_filename;$/;"	m	struct:ms_ocall_fopen_t	file:
ms_filename	Enclave_t.c	/^	const char* ms_filename;$/;"	m	struct:ms_ocall_freopen_t	file:
ms_filename	Enclave_t.c	/^	const char* ms_filename;$/;"	m	struct:ms_ocall_remove_t	file:
ms_filename	Enclave_t.c	/^	const char* ms_filename;$/;"	m	struct:ms_ocall_rename_t	file:
ms_flm	Enclave_t.c	/^	int ms_flm;$/;"	m	struct:ms_ecall_init_t	file:
ms_id	Enclave_t.c	/^	int ms_id;$/;"	m	struct:ms_ecall_execute_t	file:
ms_id	Enclave_t.c	/^	int ms_id;$/;"	m	struct:ms_ecall_send_aes_key_t	file:
ms_id	Enclave_t.c	/^	int ms_id;$/;"	m	struct:ms_ocall_send_packet_t	file:
ms_k	Enclave_t.c	/^	int ms_k;$/;"	m	struct:ms_ecall_add_client_pkey_t	file:
ms_k	Enclave_t.c	/^	int ms_k;$/;"	m	struct:ms_ecall_get_server_pkey_t	file:
ms_kca	Enclave_t.c	/^	int ms_kca;$/;"	m	struct:ms_ecall_extra_args_t	file:
ms_key	Enclave_t.c	/^	unsigned char* ms_key;$/;"	m	struct:ms_ecall_add_client_pkey_t	file:
ms_key	Enclave_t.c	/^	unsigned char* ms_key;$/;"	m	struct:ms_ecall_get_server_pkey_t	file:
ms_len	Enclave_t.c	/^	int ms_len;$/;"	m	struct:ms_ocall_send_packet_t	file:
ms_locale	Enclave_t.c	/^	const char* ms_locale;$/;"	m	struct:ms_ocall_setlocale_t	file:
ms_mode	Enclave_t.c	/^	const char* ms_mode;$/;"	m	struct:ms_ocall_fopen_t	file:
ms_mode	Enclave_t.c	/^	const char* ms_mode;$/;"	m	struct:ms_ocall_freopen_t	file:
ms_mode	Enclave_t.c	/^	int ms_mode;$/;"	m	struct:ms_ocall_setvbuf_t	file:
ms_n	Enclave_t.c	/^	int ms_n;$/;"	m	struct:ms_ocall_fgets_t	file:
ms_name	Enclave_t.c	/^	const char* ms_name;$/;"	m	struct:ms_ocall_getenv_t	file:
ms_new_filename	Enclave_t.c	/^	const char* ms_new_filename;$/;"	m	struct:ms_ocall_rename_t	file:
ms_nmemb	Enclave_t.c	/^	size_t ms_nmemb;$/;"	m	struct:ms_ocall_fread_t	file:
ms_ocall_clearerr_t	Enclave_t.c	/^typedef struct ms_ocall_clearerr_t {$/;"	s	file:
ms_ocall_clearerr_t	Enclave_t.c	/^} ms_ocall_clearerr_t;$/;"	t	typeref:struct:ms_ocall_clearerr_t	file:
ms_ocall_clock_t	Enclave_t.c	/^typedef struct ms_ocall_clock_t {$/;"	s	file:
ms_ocall_clock_t	Enclave_t.c	/^} ms_ocall_clock_t;$/;"	t	typeref:struct:ms_ocall_clock_t	file:
ms_ocall_exit_t	Enclave_t.c	/^typedef struct ms_ocall_exit_t {$/;"	s	file:
ms_ocall_exit_t	Enclave_t.c	/^} ms_ocall_exit_t;$/;"	t	typeref:struct:ms_ocall_exit_t	file:
ms_ocall_fclose_t	Enclave_t.c	/^typedef struct ms_ocall_fclose_t {$/;"	s	file:
ms_ocall_fclose_t	Enclave_t.c	/^} ms_ocall_fclose_t;$/;"	t	typeref:struct:ms_ocall_fclose_t	file:
ms_ocall_feof_t	Enclave_t.c	/^typedef struct ms_ocall_feof_t {$/;"	s	file:
ms_ocall_feof_t	Enclave_t.c	/^} ms_ocall_feof_t;$/;"	t	typeref:struct:ms_ocall_feof_t	file:
ms_ocall_ferror_t	Enclave_t.c	/^typedef struct ms_ocall_ferror_t {$/;"	s	file:
ms_ocall_ferror_t	Enclave_t.c	/^} ms_ocall_ferror_t;$/;"	t	typeref:struct:ms_ocall_ferror_t	file:
ms_ocall_fflush_t	Enclave_t.c	/^typedef struct ms_ocall_fflush_t {$/;"	s	file:
ms_ocall_fflush_t	Enclave_t.c	/^} ms_ocall_fflush_t;$/;"	t	typeref:struct:ms_ocall_fflush_t	file:
ms_ocall_fgets_t	Enclave_t.c	/^typedef struct ms_ocall_fgets_t {$/;"	s	file:
ms_ocall_fgets_t	Enclave_t.c	/^} ms_ocall_fgets_t;$/;"	t	typeref:struct:ms_ocall_fgets_t	file:
ms_ocall_fopen_t	Enclave_t.c	/^typedef struct ms_ocall_fopen_t {$/;"	s	file:
ms_ocall_fopen_t	Enclave_t.c	/^} ms_ocall_fopen_t;$/;"	t	typeref:struct:ms_ocall_fopen_t	file:
ms_ocall_fputs_t	Enclave_t.c	/^typedef struct ms_ocall_fputs_t {$/;"	s	file:
ms_ocall_fputs_t	Enclave_t.c	/^} ms_ocall_fputs_t;$/;"	t	typeref:struct:ms_ocall_fputs_t	file:
ms_ocall_fread_t	Enclave_t.c	/^typedef struct ms_ocall_fread_t {$/;"	s	file:
ms_ocall_fread_t	Enclave_t.c	/^} ms_ocall_fread_t;$/;"	t	typeref:struct:ms_ocall_fread_t	file:
ms_ocall_freopen_t	Enclave_t.c	/^typedef struct ms_ocall_freopen_t {$/;"	s	file:
ms_ocall_freopen_t	Enclave_t.c	/^} ms_ocall_freopen_t;$/;"	t	typeref:struct:ms_ocall_freopen_t	file:
ms_ocall_fseek_t	Enclave_t.c	/^typedef struct ms_ocall_fseek_t {$/;"	s	file:
ms_ocall_fseek_t	Enclave_t.c	/^} ms_ocall_fseek_t;$/;"	t	typeref:struct:ms_ocall_fseek_t	file:
ms_ocall_ftell_t	Enclave_t.c	/^typedef struct ms_ocall_ftell_t {$/;"	s	file:
ms_ocall_ftell_t	Enclave_t.c	/^} ms_ocall_ftell_t;$/;"	t	typeref:struct:ms_ocall_ftell_t	file:
ms_ocall_fwrite_t	Enclave_t.c	/^typedef struct ms_ocall_fwrite_t {$/;"	s	file:
ms_ocall_fwrite_t	Enclave_t.c	/^} ms_ocall_fwrite_t;$/;"	t	typeref:struct:ms_ocall_fwrite_t	file:
ms_ocall_get_file_size_t	Enclave_t.c	/^typedef struct ms_ocall_get_file_size_t {$/;"	s	file:
ms_ocall_get_file_size_t	Enclave_t.c	/^} ms_ocall_get_file_size_t;$/;"	t	typeref:struct:ms_ocall_get_file_size_t	file:
ms_ocall_getc_t	Enclave_t.c	/^typedef struct ms_ocall_getc_t {$/;"	s	file:
ms_ocall_getc_t	Enclave_t.c	/^} ms_ocall_getc_t;$/;"	t	typeref:struct:ms_ocall_getc_t	file:
ms_ocall_getenv_t	Enclave_t.c	/^typedef struct ms_ocall_getenv_t {$/;"	s	file:
ms_ocall_getenv_t	Enclave_t.c	/^} ms_ocall_getenv_t;$/;"	t	typeref:struct:ms_ocall_getenv_t	file:
ms_ocall_gmtime_t	Enclave_t.c	/^typedef struct ms_ocall_gmtime_t {$/;"	s	file:
ms_ocall_gmtime_t	Enclave_t.c	/^} ms_ocall_gmtime_t;$/;"	t	typeref:struct:ms_ocall_gmtime_t	file:
ms_ocall_localeconv_t	Enclave_t.c	/^typedef struct ms_ocall_localeconv_t {$/;"	s	file:
ms_ocall_localeconv_t	Enclave_t.c	/^} ms_ocall_localeconv_t;$/;"	t	typeref:struct:ms_ocall_localeconv_t	file:
ms_ocall_localtime_t	Enclave_t.c	/^typedef struct ms_ocall_localtime_t {$/;"	s	file:
ms_ocall_localtime_t	Enclave_t.c	/^} ms_ocall_localtime_t;$/;"	t	typeref:struct:ms_ocall_localtime_t	file:
ms_ocall_mktime_t	Enclave_t.c	/^typedef struct ms_ocall_mktime_t {$/;"	s	file:
ms_ocall_mktime_t	Enclave_t.c	/^} ms_ocall_mktime_t;$/;"	t	typeref:struct:ms_ocall_mktime_t	file:
ms_ocall_rand_t	Enclave_t.c	/^typedef struct ms_ocall_rand_t {$/;"	s	file:
ms_ocall_rand_t	Enclave_t.c	/^} ms_ocall_rand_t;$/;"	t	typeref:struct:ms_ocall_rand_t	file:
ms_ocall_remove_t	Enclave_t.c	/^typedef struct ms_ocall_remove_t {$/;"	s	file:
ms_ocall_remove_t	Enclave_t.c	/^} ms_ocall_remove_t;$/;"	t	typeref:struct:ms_ocall_remove_t	file:
ms_ocall_rename_t	Enclave_t.c	/^typedef struct ms_ocall_rename_t {$/;"	s	file:
ms_ocall_rename_t	Enclave_t.c	/^} ms_ocall_rename_t;$/;"	t	typeref:struct:ms_ocall_rename_t	file:
ms_ocall_send_packet_t	Enclave_t.c	/^typedef struct ms_ocall_send_packet_t {$/;"	s	file:
ms_ocall_send_packet_t	Enclave_t.c	/^} ms_ocall_send_packet_t;$/;"	t	typeref:struct:ms_ocall_send_packet_t	file:
ms_ocall_setlocale_t	Enclave_t.c	/^typedef struct ms_ocall_setlocale_t {$/;"	s	file:
ms_ocall_setlocale_t	Enclave_t.c	/^} ms_ocall_setlocale_t;$/;"	t	typeref:struct:ms_ocall_setlocale_t	file:
ms_ocall_setvbuf_t	Enclave_t.c	/^typedef struct ms_ocall_setvbuf_t {$/;"	s	file:
ms_ocall_setvbuf_t	Enclave_t.c	/^} ms_ocall_setvbuf_t;$/;"	t	typeref:struct:ms_ocall_setvbuf_t	file:
ms_ocall_srand_t	Enclave_t.c	/^typedef struct ms_ocall_srand_t {$/;"	s	file:
ms_ocall_srand_t	Enclave_t.c	/^} ms_ocall_srand_t;$/;"	t	typeref:struct:ms_ocall_srand_t	file:
ms_ocall_system_t	Enclave_t.c	/^typedef struct ms_ocall_system_t {$/;"	s	file:
ms_ocall_system_t	Enclave_t.c	/^} ms_ocall_system_t;$/;"	t	typeref:struct:ms_ocall_system_t	file:
ms_ocall_time_t	Enclave_t.c	/^typedef struct ms_ocall_time_t {$/;"	s	file:
ms_ocall_time_t	Enclave_t.c	/^} ms_ocall_time_t;$/;"	t	typeref:struct:ms_ocall_time_t	file:
ms_ocall_tmpfile_t	Enclave_t.c	/^typedef struct ms_ocall_tmpfile_t {$/;"	s	file:
ms_ocall_tmpfile_t	Enclave_t.c	/^} ms_ocall_tmpfile_t;$/;"	t	typeref:struct:ms_ocall_tmpfile_t	file:
ms_ocall_tmpnam_t	Enclave_t.c	/^typedef struct ms_ocall_tmpnam_t {$/;"	s	file:
ms_ocall_tmpnam_t	Enclave_t.c	/^} ms_ocall_tmpnam_t;$/;"	t	typeref:struct:ms_ocall_tmpnam_t	file:
ms_ocall_ungetc_t	Enclave_t.c	/^typedef struct ms_ocall_ungetc_t {$/;"	s	file:
ms_ocall_ungetc_t	Enclave_t.c	/^} ms_ocall_ungetc_t;$/;"	t	typeref:struct:ms_ocall_ungetc_t	file:
ms_offset	Enclave_t.c	/^	long int ms_offset;$/;"	m	struct:ms_ocall_fseek_t	file:
ms_pkt	Enclave_t.c	/^	unsigned char* ms_pkt;$/;"	m	struct:ms_ocall_send_packet_t	file:
ms_ptr	Enclave_t.c	/^	FILE* ms_ptr;$/;"	m	struct:ms_ocall_fclose_t	file:
ms_ptr	Enclave_t.c	/^	FILE* ms_ptr;$/;"	m	struct:ms_ocall_ferror_t	file:
ms_ptr	Enclave_t.c	/^	FILE* ms_ptr;$/;"	m	struct:ms_ocall_fflush_t	file:
ms_ptr	Enclave_t.c	/^	void* ms_ptr;$/;"	m	struct:ms_ocall_fread_t	file:
ms_recover_filename_t	Enclave_t.c	/^typedef struct ms_recover_filename_t {$/;"	s	file:
ms_recover_filename_t	Enclave_t.c	/^} ms_recover_filename_t;$/;"	t	typeref:struct:ms_recover_filename_t	file:
ms_retval	Enclave_t.c	/^	FILE* ms_retval;$/;"	m	struct:ms_ocall_fopen_t	file:
ms_retval	Enclave_t.c	/^	FILE* ms_retval;$/;"	m	struct:ms_ocall_freopen_t	file:
ms_retval	Enclave_t.c	/^	FILE* ms_retval;$/;"	m	struct:ms_ocall_tmpfile_t	file:
ms_retval	Enclave_t.c	/^	char* ms_retval;$/;"	m	struct:ms_ocall_fgets_t	file:
ms_retval	Enclave_t.c	/^	char* ms_retval;$/;"	m	struct:ms_ocall_getenv_t	file:
ms_retval	Enclave_t.c	/^	char* ms_retval;$/;"	m	struct:ms_ocall_setlocale_t	file:
ms_retval	Enclave_t.c	/^	char* ms_retval;$/;"	m	struct:ms_ocall_tmpnam_t	file:
ms_retval	Enclave_t.c	/^	char* ms_retval;$/;"	m	struct:ms_recover_filename_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_fclose_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_feof_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_ferror_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_fflush_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_fputs_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_fseek_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_get_file_size_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_getc_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_rand_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_remove_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_rename_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_setvbuf_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_system_t	file:
ms_retval	Enclave_t.c	/^	int ms_retval;$/;"	m	struct:ms_ocall_ungetc_t	file:
ms_retval	Enclave_t.c	/^	long int ms_retval;$/;"	m	struct:ms_ocall_clock_t	file:
ms_retval	Enclave_t.c	/^	long int ms_retval;$/;"	m	struct:ms_ocall_ftell_t	file:
ms_retval	Enclave_t.c	/^	long int ms_retval;$/;"	m	struct:ms_ocall_mktime_t	file:
ms_retval	Enclave_t.c	/^	long int ms_retval;$/;"	m	struct:ms_ocall_time_t	file:
ms_retval	Enclave_t.c	/^	size_t ms_retval;$/;"	m	struct:ms_ocall_fread_t	file:
ms_retval	Enclave_t.c	/^	size_t ms_retval;$/;"	m	struct:ms_ocall_fwrite_t	file:
ms_retval	Enclave_t.c	/^	struct lconv* ms_retval;$/;"	m	struct:ms_ocall_localeconv_t	typeref:struct:ms_ocall_localeconv_t::lconv	file:
ms_retval	Enclave_t.c	/^	struct tm* ms_retval;$/;"	m	struct:ms_ocall_gmtime_t	typeref:struct:ms_ocall_gmtime_t::tm	file:
ms_retval	Enclave_t.c	/^	struct tm* ms_retval;$/;"	m	struct:ms_ocall_localtime_t	typeref:struct:ms_ocall_localtime_t::tm	file:
ms_seed	Enclave_t.c	/^	unsigned int ms_seed;$/;"	m	struct:ms_ocall_srand_t	file:
ms_size	Enclave_t.c	/^	size_t ms_size;$/;"	m	struct:ms_ocall_fread_t	file:
ms_size	Enclave_t.c	/^	size_t ms_size;$/;"	m	struct:ms_ocall_fwrite_t	file:
ms_size	Enclave_t.c	/^	size_t ms_size;$/;"	m	struct:ms_ocall_setvbuf_t	file:
ms_src	Enclave_t.c	/^	long int* ms_src;$/;"	m	struct:ms_ocall_time_t	file:
ms_status_	Enclave_t.c	/^	int ms_status_;$/;"	m	struct:ms_ocall_exit_t	file:
ms_stde	Enclave_t.c	/^	FILE* ms_stde;$/;"	m	struct:ms_ecall_init_t	file:
ms_stdi	Enclave_t.c	/^	FILE* ms_stdi;$/;"	m	struct:ms_ecall_init_t	file:
ms_stdo	Enclave_t.c	/^	FILE* ms_stdo;$/;"	m	struct:ms_ecall_init_t	file:
ms_str	Enclave_t.c	/^	char* ms_str;$/;"	m	struct:ms_ocall_fgets_t	file:
ms_str	Enclave_t.c	/^	char* ms_str;$/;"	m	struct:ms_ocall_tmpnam_t	file:
ms_str	Enclave_t.c	/^	const char* ms_str;$/;"	m	struct:ms_ocall_fputs_t	file:
ms_str	Enclave_t.c	/^	const char* ms_str;$/;"	m	struct:ms_ocall_system_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_clearerr_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_feof_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_fgets_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_fputs_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_fread_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_freopen_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_fseek_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_ftell_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_getc_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_setvbuf_t	file:
ms_stream	Enclave_t.c	/^	FILE* ms_stream;$/;"	m	struct:ms_ocall_ungetc_t	file:
ms_svi	Enclave_t.c	/^	int ms_svi;$/;"	m	struct:ms_ecall_init_t	file:
ms_sz	Enclave_t.c	/^	unsigned long int ms_sz;$/;"	m	struct:ms_ecall_push_arg_t	file:
ms_timer	Enclave_t.c	/^	const long int* ms_timer;$/;"	m	struct:ms_ocall_gmtime_t	file:
ms_timer	Enclave_t.c	/^	const long int* ms_timer;$/;"	m	struct:ms_ocall_localtime_t	file:
ms_tptr	Enclave_t.c	/^	struct tm* ms_tptr;$/;"	m	struct:ms_ocall_mktime_t	typeref:struct:ms_ocall_mktime_t::tm	file:
ms_use_mempool	Enclave_t.c	/^	int ms_use_mempool;$/;"	m	struct:ms_ecall_init_t	file:
ms_vm_input_len	Enclave_t.c	/^	size_t ms_vm_input_len;$/;"	m	struct:ms_ecall_extra_args_t	file:
ms_whence	Enclave_t.c	/^	int ms_whence;$/;"	m	struct:ms_ocall_fseek_t	file:
msghandler	lua.cpp	/^static int msghandler (lua_State *L) {$/;"	f	file:
mt	lstate.h	/^  struct Table *mt[LUA_NUMTAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:global_State::Table
multiline	lua.cpp	/^static int multiline (lua_State *L) {$/;"	f	file:
mutex	test/apr_pools.cpp	/^    apr_thread_mutex_t   *mutex;$/;"	m	struct:apr_pool_t	file:
mutex	test/apr_pools.cpp	/^    apr_thread_mutex_t *mutex;$/;"	m	struct:apr_allocator_t	file:
n	lauxlib.cpp	/^  int n;  \/* number of pre-read characters *\/$/;"	m	struct:LoadF	file:
n	lauxlib.h	/^  size_t n;  \/* number of characters in buffer *\/$/;"	m	struct:luaL_Buffer
n	liolib.cpp	/^  int n;  \/* number of elements in buffer 'buff' *\/$/;"	m	struct:__anon7	file:
n	llimits.h	/^  lua_Number n;$/;"	m	union:__anon9
n	lobject.h	/^  lua_Number n;    \/* float numbers *\/$/;"	m	union:Value
n	lparser.h	/^    int n;$/;"	m	struct:Dyndata::__anon17
n	lparser.h	/^  int n;  \/* number of entries in use *\/$/;"	m	struct:Labellist
n	lstrlib.cpp	/^  lua_Number n;$/;"	m	union:Ftypes	file:
n	lstrlib.cpp	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon23	file:
n	lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio
n	lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer
nCcalls	lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State
n_cs_precedes	sgx_includes.h	/^   char n_cs_precedes;$/;"	m	struct:lconv
n_sep_by_space	sgx_includes.h	/^   char n_sep_by_space;$/;"	m	struct:lconv
n_sign_posn	sgx_includes.h	/^   char n_sign_posn;$/;"	m	struct:lconv
na	lparser.cpp	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	file:
nactvar	lparser.cpp	/^  lu_byte nactvar;  \/* # active locals outside the block *\/$/;"	m	struct:BlockCnt	file:
nactvar	lparser.h	/^  lu_byte nactvar;  \/* local level where it appears in current block *\/$/;"	m	struct:Labeldesc
nactvar	lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState
name	lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg
name	ldo.cpp	/^  const char *name;$/;"	m	struct:SParser	file:
name	lobject.h	/^  TString *name;  \/* upvalue name (for debug information) *\/$/;"	m	struct:Upvaldesc
name	lparser.h	/^  TString *name;  \/* label identifier *\/$/;"	m	struct:Labeldesc
name	lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug
name	lundump.cpp	/^  const char *name;$/;"	m	struct:__anon26	file:
namewhat	lua.h	/^  const char *namewhat;	\/* (n) 'global', 'local', 'field', 'method' *\/$/;"	m	struct:lua_Debug
nativeendian	lstrlib.cpp	/^} nativeendian = {1};$/;"	v	typeref:union:__anon22	file:
nci	lstate.h	/^  unsigned short nci;  \/* number of items in 'ci' list *\/$/;"	m	struct:lua_State
need_value	lcode.cpp	/^static int need_value (FuncState *fs, int list) {$/;"	f	file:
negatecondition	lcode.cpp	/^static void negatecondition (FuncState *fs, expdesc *e) {$/;"	f	file:
negative_sign	sgx_includes.h	/^   char *negative_sign;$/;"	m	struct:lconv
neq25519	dh/tweetnacl.cpp	/^static int neq25519(const gf a, const gf b)$/;"	f	file:
netware_pool_proc_cleanup	test/apr_pools.cpp	/^void netware_pool_proc_cleanup ()$/;"	f
new_localvar	lparser.cpp	/^static void new_localvar (LexState *ls, TString *name) {$/;"	f	file:
new_localvarliteral	lparser.cpp	191;"	d	file:
new_localvarliteral_	lparser.cpp	/^static void new_localvarliteral_ (LexState *ls, const char *name, size_t sz) {$/;"	f	file:
newbox	lauxlib.cpp	/^static void *newbox (lua_State *L, size_t newsize) {$/;"	f	file:
newfile	liolib.cpp	/^static LStream *newfile (lua_State *L) {$/;"	f	file:
newlabelentry	lparser.cpp	/^static int newlabelentry (LexState *ls, Labellist *l, TString *name,$/;"	f	file:
newpool	test/apr_pools.h	/^APR_DECLARE(apr_status_t) apr_pool_create_core(apr_pool_t **newpool);$/;"	v
newpool	test/apr_pools.h	/^APR_DECLARE(apr_status_t) apr_pool_create_unmanaged(apr_pool_t **newpool);$/;"	v
newprefile	liolib.cpp	/^static LStream *newprefile (lua_State *L) {$/;"	f	file:
newupvalue	lparser.cpp	/^static int newupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f	file:
next	lfunc.h	/^      UpVal *next;  \/* linked list *\/$/;"	m	struct:UpVal::__anon5::__anon6
next	llex.cpp	32;"	d	file:
next	lobject.h	/^    int next;  \/* for chaining (offset for next node) *\/$/;"	m	struct:TKey::__anon11
next	lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::
next	test/apr_allocator.h	/^    apr_memnode_t *next;            \/**< next memnode *\/$/;"	m	struct:apr_memnode_t
next	test/apr_pools.cpp	/^    debug_node_t *next;$/;"	m	struct:debug_node_t	file:
next	test/apr_pools.cpp	/^    struct cleanup_t *next;$/;"	m	struct:cleanup_t	typeref:struct:cleanup_t::cleanup_t	file:
next	umm_malloc.cpp	/^   unsigned short int next;$/;"	m	struct:umm_ptr_t	file:
next_ci	ldo.cpp	395;"	d	file:
nextc	liolib.cpp	/^static int nextc (RN *rn) {$/;"	f	file:
nh	lparser.cpp	/^  int nh;  \/* total number of 'record' elements *\/$/;"	m	struct:ConsControl	file:
nhsize	ltable.cpp	/^  unsigned int nhsize;$/;"	m	struct:__anon24	file:
nilK	lcode.cpp	/^static int nilK (FuncState *fs) {$/;"	f	file:
nk	lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon11
nk	lparser.h	/^  int nk;  \/* number of elements in 'k' *\/$/;"	m	struct:FuncState
nlocvars	lparser.h	/^  short nlocvars;  \/* number of elements in 'f->locvars' *\/$/;"	m	struct:FuncState
nny	lstate.h	/^  unsigned short nny;  \/* number of non-yieldable calls in stack *\/$/;"	m	struct:lua_State
noLuaClosure	ldebug.cpp	34;"	d	file:
node	lobject.h	/^  Node *node;$/;"	m	struct:Table
node_free_space	test/apr_pools.cpp	696;"	d	file:
nodes	test/apr_pools.cpp	/^    debug_node_t         *nodes;$/;"	m	struct:apr_pool_t	file:
noenv	loadlib.cpp	/^static int noenv (lua_State *L) {$/;"	f	file:
nospecials	lstrlib.cpp	/^static int nospecials (const char *p, size_t l) {$/;"	f	file:
novariant	lobject.h	130;"	d
np	lparser.h	/^  int np;  \/* number of elements in 'p' *\/$/;"	m	struct:FuncState
nparams	lua.h	/^  unsigned char nparams;\/* (u) number of parameters *\/$/;"	m	struct:lua_Debug
nr_ecall	Enclave_t.c	/^	size_t nr_ecall;$/;"	m	struct:__anon1	file:
nr_ocall	Enclave_t.c	/^	size_t nr_ocall;$/;"	m	struct:__anon3	file:
nresults	lapi.cpp	/^  int nresults;$/;"	m	struct:CallS	file:
nresults	lstate.h	/^  short nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo
num2straux	lstrlib.cpp	/^static int num2straux (char *buff, int sz, lua_Number x) {$/;"	f	file:
numarith	lobject.cpp	/^static lua_Number numarith (lua_State *L, int op, lua_Number v1,$/;"	f	file:
numparams	lobject.h	/^  lu_byte numparams;  \/* number of fixed parameters *\/$/;"	m	struct:Proto
numusearray	ltable.cpp	/^static unsigned int numusearray (const Table *t, unsigned int *nums) {$/;"	f	file:
numusehash	ltable.cpp	/^static int numusehash (const Table *t, unsigned int *nums, unsigned int *pna) {$/;"	f	file:
nups	lparser.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:FuncState
nups	lua.h	/^  unsigned char nups;	\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug
nuse	lstate.h	/^  int nuse;  \/* number of elements *\/$/;"	m	struct:stringtable
nval	lparser.h	/^    lua_Number nval;  \/* for VKFLT *\/$/;"	m	union:expdesc::__anon15
nvalue	lobject.h	165;"	d
obj2gco	lstate.h	237;"	d
ocall_clean_fd	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_clean_fd(void)$/;"	f
ocall_clearerr	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_clearerr(FILE* stream)$/;"	f
ocall_clock	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_clock(long int* retval)$/;"	f
ocall_exit	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_exit(int status_)$/;"	f
ocall_fclose	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_fclose(int* retval, FILE* ptr)$/;"	f
ocall_feof	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_feof(int* retval, FILE* stream)$/;"	f
ocall_ferror	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_ferror(int* retval, FILE* ptr)$/;"	f
ocall_fflush	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_fflush(int* retval, FILE* ptr)$/;"	f
ocall_fgets	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_fgets(char** retval, char* str, int n, FILE* stream)$/;"	f
ocall_fopen	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_fopen(FILE** retval, const char* filename, const char* mode)$/;"	f
ocall_fputs	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_fputs(int* retval, const char* str, FILE* stream)$/;"	f
ocall_fread	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_fread(size_t* retval, void* ptr, size_t size, size_t nmemb, FILE* stream)$/;"	f
ocall_freopen	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_freopen(FILE** retval, const char* filename, const char* mode, FILE* stream)$/;"	f
ocall_fseek	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_fseek(int* retval, FILE* stream, long int offset, int whence)$/;"	f
ocall_ftell	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_ftell(long int* retval, FILE* stream)$/;"	f
ocall_fwrite	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_fwrite(size_t* retval, const void* buffer, size_t size, size_t count, FILE* fd)$/;"	f
ocall_get_file_size	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_get_file_size(int* retval, FILE* f)$/;"	f
ocall_getc	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_getc(int* retval, FILE* stream)$/;"	f
ocall_getenv	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_getenv(char** retval, const char* name)$/;"	f
ocall_gmtime	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_gmtime(struct tm** retval, const long int* timer)$/;"	f
ocall_localeconv	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_localeconv(struct lconv** retval)$/;"	f
ocall_localtime	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_localtime(struct tm** retval, const long int* timer)$/;"	f
ocall_mktime	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_mktime(long int* retval, struct tm* tptr)$/;"	f
ocall_rand	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_rand(int* retval)$/;"	f
ocall_remove	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_remove(int* retval, const char* filename)$/;"	f
ocall_rename	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_rename(int* retval, const char* filename, const char* new_filename)$/;"	f
ocall_send_packet	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_send_packet(unsigned char* pkt, int len, int id)$/;"	f
ocall_setlocale	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_setlocale(char** retval, int category, const char* locale)$/;"	f
ocall_setvbuf	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_setvbuf(int* retval, FILE* stream, char* buffer, int mode, size_t size)$/;"	f
ocall_srand	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_srand(unsigned int seed)$/;"	f
ocall_system	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_system(int* retval, const char* str)$/;"	f
ocall_time	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_time(long int* retval, long int* src)$/;"	f
ocall_tmpfile	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_tmpfile(FILE** retval)$/;"	f
ocall_tmpnam	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_tmpnam(char** retval, char* str)$/;"	f
ocall_ungetc	Enclave_t.c	/^sgx_status_t SGX_CDECL ocall_ungetc(int* retval, int ch, FILE* stream)$/;"	f
old_errfunc	lstate.h	/^      ptrdiff_t old_errfunc;$/;"	m	struct:CallInfo::__anon18::__anon20
oldpc	lstate.h	/^  const Instruction *oldpc;  \/* last pc traced *\/$/;"	m	struct:lua_State
open	lfunc.h	/^    } open;$/;"	m	union:UpVal::__anon5	typeref:struct:UpVal::__anon5::__anon6
open_func	lparser.cpp	/^static void open_func (LexState *ls, FuncState *fs, BlockCnt *bl) {$/;"	f	file:
opencheck	liolib.cpp	/^static void opencheck (lua_State *L, const char *fname, const char *mode) {$/;"	f	file:
opened_files	Enclave.cpp	/^std::vector<FILE *> opened_files;$/;"	v
openupval	lstate.h	/^  UpVal *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State
opmode	lopcodes.cpp	72;"	d	file:
os_clock	loslib.cpp	/^static int os_clock (lua_State *L) {$/;"	f	file:
os_date	loslib.cpp	/^static int os_date (lua_State *L) {$/;"	f	file:
os_difftime	loslib.cpp	/^static int os_difftime (lua_State *L) {$/;"	f	file:
os_execute	loslib.cpp	/^static int os_execute (lua_State *L) {$/;"	f	file:
os_exit	loslib.cpp	/^static int os_exit (lua_State *L) {$/;"	f	file:
os_getenv	loslib.cpp	/^static int os_getenv (lua_State *L) {$/;"	f	file:
os_remove	loslib.cpp	/^static int os_remove (lua_State *L) {$/;"	f	file:
os_rename	loslib.cpp	/^static int os_rename (lua_State *L) {$/;"	f	file:
os_setlocale	loslib.cpp	/^static int os_setlocale (lua_State *L) {$/;"	f	file:
os_time	loslib.cpp	/^static int os_time (lua_State *L) {$/;"	f	file:
os_tmpname	loslib.cpp	/^static int os_tmpname (lua_State *L) {$/;"	f	file:
otherwhite	lgc.h	94;"	d
output_key	dh/sample.cpp	/^void output_key(char *str, unsigned char key[], int key_size) {$/;"	f
owner	test/apr_pools.cpp	/^    apr_os_thread_t       owner;$/;"	m	struct:apr_pool_t	file:
owner	test/apr_pools.cpp	/^    apr_pool_t         *owner;$/;"	m	struct:apr_allocator_t	file:
owner_proc	test/apr_pools.cpp	/^    apr_os_proc_t         owner_proc;$/;"	m	struct:apr_pool_t	file:
p	lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto::Proto
p	lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto
p	lobject.h	/^  void *p;         \/* light userdata *\/$/;"	m	union:Value
p	lstate.h	/^  struct Proto p;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Proto
p	lstrlib.cpp	/^  const char *p;  \/* pattern *\/$/;"	m	struct:GMatchState	file:
p	lstrlib.cpp	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon23	file:
p	lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio
p_cs_precedes	sgx_includes.h	/^   char p_cs_precedes;$/;"	m	struct:lconv
p_end	lstrlib.cpp	/^  const char *p_end;  \/* end ('\\0') of pattern *\/$/;"	m	struct:MatchState	file:
p_key	Enclave.cpp	/^sgx_aes_ctr_128bit_key_t p_key[16];     \/* the varible to store the aes key         *\/$/;"	v
p_sep_by_space	sgx_includes.h	/^   char p_sep_by_space;$/;"	m	struct:lconv
p_sign_posn	sgx_includes.h	/^   char p_sign_posn;$/;"	m	struct:lconv
pack	dh/tweetnacl.cpp	/^sv pack(u8 *r,gf p[4])$/;"	f
pack	ltablib.cpp	/^static int pack (lua_State *L) {$/;"	f	file:
pack25519	dh/tweetnacl.cpp	/^sv pack25519(u8 *o,const gf n)$/;"	f
packint	lstrlib.cpp	/^static void packint (luaL_Buffer *b, lua_Unsigned n,$/;"	f	file:
pairsmeta	lbaselib.cpp	/^static int pairsmeta (lua_State *L, const char *method, int iszero,$/;"	f	file:
panic	lauxlib.cpp	/^static int panic (lua_State *L) {$/;"	f	file:
panic	lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State
par25519	dh/tweetnacl.cpp	/^static u8 par25519(const gf a)$/;"	f	file:
parent	test/apr_pools.cpp	/^    apr_pool_t           *parent;$/;"	m	struct:apr_pool_t	file:
parlist	lparser.cpp	/^static void parlist (LexState *ls) {$/;"	f	file:
partition	ltablib.cpp	/^static IdxT partition (lua_State *L, IdxT lo, IdxT up) {$/;"	f	file:
patchlistaux	lcode.cpp	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f	file:
patchtestreg	lcode.cpp	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f	file:
pc	lparser.h	/^  int pc;  \/* next position to code (equivalent to 'ncode') *\/$/;"	m	struct:FuncState
pc	lparser.h	/^  int pc;  \/* position in code *\/$/;"	m	struct:Labeldesc
pcRel	ldebug.h	14;"	d
perror	Enclave.cpp	/^perror(const char *s)$/;"	f
pid_t	test/apr.h	/^typedef  int         pid_t;$/;"	t
pk_funcs	loadlib.cpp	/^static const luaL_Reg pk_funcs[] = {$/;"	v	file:
plain_cleanup_fn	test/apr_pools.cpp	/^    apr_status_t (*plain_cleanup_fn)(void *data);$/;"	m	struct:cleanup_t	file:
pmain	lua.cpp	/^int pmain (lua_State *L) {$/;"	f
point2uint	llimits.h	59;"	d
pool	test/apr_hash.h	/^APR_DECLARE(apr_hash_t *) apr_hash_make(apr_pool_t *pool);$/;"	v
pool	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_clear(apr_pool_t *pool);$/;"	v
pool	test/apr_pools.cpp	/^APR_DECLARE(void) apr_pool_destroy(apr_pool_t *pool);$/;"	v
pool_alloc	test/apr_pools.cpp	/^static void *pool_alloc(apr_pool_t *pool, apr_size_t size)$/;"	f	file:
pool_clear_debug	test/apr_pools.cpp	/^static void pool_clear_debug(apr_pool_t *pool, const char *file_line)$/;"	f	file:
pool_concurrency_abort	test/apr_pools.cpp	/^static void pool_concurrency_abort(apr_pool_t *pool, apr_uint32_t new, apr_uint32_t old)$/;"	f	file:
pool_concurrency_init	test/apr_pools.cpp	/^static APR_INLINE void pool_concurrency_init(apr_pool_t *pool)          { }$/;"	f	file:
pool_concurrency_init	test/apr_pools.cpp	/^static APR_INLINE void pool_concurrency_init(apr_pool_t *pool)$/;"	f	file:
pool_concurrency_set_destroyed	test/apr_pools.cpp	/^static APR_INLINE void pool_concurrency_set_destroyed(apr_pool_t *pool) { }$/;"	f	file:
pool_concurrency_set_destroyed	test/apr_pools.cpp	/^static APR_INLINE void pool_concurrency_set_destroyed(apr_pool_t *pool)$/;"	f	file:
pool_concurrency_set_idle	test/apr_pools.cpp	/^static APR_INLINE void pool_concurrency_set_idle(apr_pool_t *pool)      { }$/;"	f	file:
pool_concurrency_set_idle	test/apr_pools.cpp	/^static APR_INLINE void pool_concurrency_set_idle(apr_pool_t *pool)$/;"	f	file:
pool_concurrency_set_used	test/apr_pools.cpp	/^static APR_INLINE void pool_concurrency_set_used(apr_pool_t *pool)      { }$/;"	f	file:
pool_concurrency_set_used	test/apr_pools.cpp	/^static APR_INLINE void pool_concurrency_set_used(apr_pool_t *pool)$/;"	f	file:
pool_destroy_debug	test/apr_pools.cpp	/^static void pool_destroy_debug(apr_pool_t *pool, const char *file_line)$/;"	f	file:
pool_find	test/apr_pools.cpp	/^static int pool_find(apr_pool_t *pool, void *data)$/;"	f	file:
pool_is_child_of	test/apr_pools.cpp	/^static int pool_is_child_of(apr_pool_t *parent, void *data)$/;"	f	file:
pool_num_bytes	test/apr_pools.cpp	/^static int pool_num_bytes(apr_pool_t *pool, void *data)$/;"	f	file:
positive_sign	sgx_includes.h	/^   char *positive_sign;$/;"	m	struct:lconv
posrelat	lstrlib.cpp	/^static lua_Integer posrelat (lua_Integer pos, size_t len) {$/;"	f	file:
pow2523	dh/tweetnacl.cpp	/^sv pow2523(gf o,const gf i)$/;"	f
pre_cleanups	test/apr_pools.cpp	/^    cleanup_t            *pre_cleanups;$/;"	m	struct:apr_pool_t	file:
preinit_thread	lstate.cpp	/^static void preinit_thread (lua_State *L, global_State *g) {$/;"	f	file:
prepstate	lstrlib.cpp	/^static void prepstate (MatchState *ms, lua_State *L,$/;"	f	file:
prev	lparser.cpp	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign::LHS_assign	file:
prev	lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState
prev	umm_malloc.cpp	/^   unsigned short int prev;$/;"	m	struct:umm_ptr_t	file:
previous	ldo.cpp	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp::lua_longjmp	file:
previous	lparser.cpp	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt::BlockCnt	file:
previous	lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::CallInfo
primaryexp	lparser.cpp	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f	file:
print_usage	lua.cpp	/^static void print_usage (const char *badoption) {$/;"	f	file:
print_version	lua.cpp	/^static void print_version (void) {$/;"	f	file:
priority	lparser.cpp	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:struct:__anon13	file:
progname	lua.cpp	/^static const char *progname = LUA_PROGNAME;$/;"	v	file:
propagateall	lgc.cpp	/^static void propagateall (global_State *g) {$/;"	f	file:
propagatemark	lgc.cpp	/^static void propagatemark (global_State *g) {$/;"	f	file:
psprintf_data	test/apr_pools.cpp	/^struct psprintf_data {$/;"	s	file:
psprintf_flush	test/apr_pools.cpp	/^static int psprintf_flush(apr_vformatter_buff_t *vbuff)$/;"	f	file:
push_captures	lstrlib.cpp	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f	file:
push_onecapture	lstrlib.cpp	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f	file:
pushargs	lua.cpp	/^static int pushargs (lua_State *L) {$/;"	f	file:
pushclosure	lvm.cpp	/^static void pushclosure (lua_State *L, Proto *p, UpVal **encup, StkId base,$/;"	f	file:
pusherror	loadlib.cpp	/^static void pusherror (lua_State *L) {$/;"	f	file:
pushfuncname	lauxlib.cpp	/^static void pushfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	file:
pushglobalfuncname	lauxlib.cpp	/^static int pushglobalfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	file:
pushline	lua.cpp	/^static int pushline (lua_State *L, int firstline) {$/;"	f	file:
pushnexttemplate	loadlib.cpp	/^static const char *pushnexttemplate (lua_State *L, const char *path) {$/;"	f	file:
pushnumint	lmathlib.cpp	/^static void pushnumint (lua_State *L, lua_Number d) {$/;"	f	file:
pushstr	lobject.cpp	/^static void pushstr (lua_State *L, const char *str, size_t l) {$/;"	f	file:
pushunsigned	lbitlib.cpp	22;"	d	file:
pushutfchar	lutf8lib.cpp	/^static void pushutfchar (lua_State *L, int arg) {$/;"	f	file:
pvalue	lobject.h	168;"	d
r	llex.h	/^  lua_Number r;$/;"	m	union:__anon8
rand	Enclave.cpp	/^rand(void)$/;"	f
randombytes	Enclave.cpp	/^randombytes(unsigned char *a,unsigned char b)$/;"	f
read_all	liolib.cpp	/^static void read_all (lua_State *L, FILE *f) {$/;"	f	file:
read_chars	liolib.cpp	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f	file:
read_code_data	Enclave.cpp	/^read_code_data(char *fname, int *size)$/;"	f
read_file	dh/tools.cpp	/^Content read_file(char filename[]) {$/;"	f
read_line	liolib.cpp	/^static int read_line (lua_State *L, FILE *f, int chop) {$/;"	f	file:
read_long_string	llex.cpp	/^static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {$/;"	f	file:
read_number	liolib.cpp	/^static int read_number (lua_State *L, FILE *f) {$/;"	f	file:
read_numeral	llex.cpp	/^static int read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
read_string	llex.cpp	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f	file:
readable	loadlib.cpp	/^static int readable (const char *filename) {$/;"	f	file:
readdecesc	llex.cpp	/^static int readdecesc (LexState *ls) {$/;"	f	file:
readdigits	liolib.cpp	/^static int readdigits (RN *rn, int hex) {$/;"	f	file:
reader	lzio.h	/^  lua_Reader reader;		\/* reader function *\/$/;"	m	struct:Zio
readhexaesc	llex.cpp	/^static int readhexaesc (LexState *ls) {$/;"	f	file:
readutf8esc	llex.cpp	/^static unsigned long readutf8esc (LexState *ls) {$/;"	f	file:
reallymarkobject	lgc.cpp	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f	file:
rec_filename	Enclave.cpp	/^rec_filename(FILE *f)$/;"	f
recfield	lparser.cpp	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
recover	ldo.cpp	/^static int recover (lua_State *L, int status) {$/;"	f	file:
recover_filename	Enclave_t.c	/^sgx_status_t SGX_CDECL recover_filename(char** retval, FILE* f)$/;"	f
reduce	dh/tweetnacl.cpp	/^sv reduce(u8 *r)$/;"	f
ref	test/apr_allocator.h	/^    apr_memnode_t **ref;            \/**< reference to self *\/$/;"	m	struct:apr_memnode_t
ref	test/apr_pools.cpp	/^    apr_pool_t          **ref;$/;"	m	struct:apr_pool_t	file:
refcount	lfunc.h	/^  lu_mem refcount;  \/* reference counter *\/$/;"	m	struct:UpVal
registerlocalvar	lparser.cpp	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f	file:
rehash	ltable.cpp	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f	file:
remarkupvals	lgc.cpp	/^static void remarkupvals (global_State *g) {$/;"	f	file:
remove	Enclave.cpp	/^remove(const char *filename)$/;"	f
removeentry	lgc.cpp	/^static void removeentry (Node *n) {$/;"	f	file:
removevalues	lcode.cpp	/^static void removevalues (FuncState *fs, int list) {$/;"	f	file:
removevars	lparser.cpp	/^static void removevars (FuncState *fs, int tolevel) {$/;"	f	file:
rename	Enclave.cpp	/^rename(const char *old_filename, const char *new_filename)$/;"	f
repeatstat	lparser.cpp	/^static void repeatstat (LexState *ls, int line) {$/;"	f	file:
report	lua.cpp	/^int report (lua_State *L, int status) {$/;"	f
reprepstate	lstrlib.cpp	/^static void reprepstate (MatchState *ms) {$/;"	f	file:
resetbit	lgc.h	73;"	d
resetbits	lgc.h	67;"	d
resethookcount	ldebug.h	18;"	d
resizebox	lauxlib.cpp	/^static void *resizebox (lua_State *L, int idx, size_t newsize) {$/;"	f	file:
restartcollection	lgc.cpp	/^static void restartcollection (global_State *g) {$/;"	f	file:
restorestack	ldo.h	33;"	d
resume	ldo.cpp	/^static void resume (lua_State *L, void *ud) {$/;"	f	file:
resume_error	ldo.cpp	/^static int resume_error (lua_State *L, const char *msg, int narg) {$/;"	f	file:
retstat	lparser.cpp	/^static void retstat (LexState *ls) {$/;"	f	file:
reverse	lapi.cpp	/^static void reverse (lua_State *L, StkId from, StkId to) {$/;"	f	file:
right	lparser.cpp	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon13	file:
righttt	lobject.h	188;"	d
rttype	lobject.h	127;"	d
run_child_cleanups	test/apr_pools.cpp	/^static void run_child_cleanups(cleanup_t **cref)$/;"	f	file:
run_cleanups	test/apr_pools.cpp	/^static void run_cleanups(cleanup_t **cref)$/;"	f	file:
run_locally	Enclave.cpp	/^int run_locally = 0;                    \/* do we run locally                        *\/$/;"	v
runafewfinalizers	lgc.cpp	/^static int runafewfinalizers (lua_State *L) {$/;"	f	file:
runargs	lua.cpp	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f	file:
s	lauxlib.cpp	/^  const char *s;$/;"	m	struct:LoadS	file:
s	llimits.h	/^  void *s;$/;"	m	union:__anon9
save	llex.cpp	/^static void save (LexState *ls, int c) {$/;"	f	file:
save_and_next	llex.cpp	51;"	d	file:
savedpc	lstate.h	/^      const Instruction *savedpc;$/;"	m	struct:CallInfo::__anon18::__anon19
savestack	ldo.h	32;"	d
scalarbase	dh/tweetnacl.cpp	/^sv scalarbase(gf p[4],const u8 *s)$/;"	f
scalarmult	dh/tweetnacl.cpp	/^sv scalarmult(gf p[4],gf q[4],const u8 *s)$/;"	f
scanformat	lstrlib.cpp	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f	file:
searcher_C	loadlib.cpp	/^static int searcher_C (lua_State *L) {$/;"	f	file:
searcher_Croot	loadlib.cpp	/^static int searcher_Croot (lua_State *L) {$/;"	f	file:
searcher_Lua	loadlib.cpp	/^static int searcher_Lua (lua_State *L) {$/;"	f	file:
searcher_preload	loadlib.cpp	/^static int searcher_preload (lua_State *L) {$/;"	f	file:
searchpath	loadlib.cpp	/^static const char *searchpath (lua_State *L, const char *name,$/;"	f	file:
searchupvalue	lparser.cpp	/^static int searchupvalue (FuncState *fs, TString *name) {$/;"	f	file:
searchvar	lparser.cpp	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f	file:
seed	lstate.h	/^  unsigned int seed;  \/* randomized seed for hashes *\/$/;"	m	struct:global_State
sel25519	dh/tweetnacl.cpp	/^sv sel25519(gf p,gf q,int b)$/;"	f
self	test/apr_pools.cpp	/^    apr_memnode_t        *self; \/* The node containing the pool itself *\/$/;"	m	struct:apr_pool_t	file:
self_first_avail	test/apr_pools.cpp	/^    char                 *self_first_avail;$/;"	m	struct:apr_pool_t	file:
semerror	lparser.cpp	/^static l_noret semerror (LexState *ls, const char *msg) {$/;"	f	file:
seminfo	llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token
separatetobefnz	lgc.cpp	/^static void separatetobefnz (global_State *g, int all) {$/;"	f	file:
server_public_key	Enclave.cpp	/^unsigned char server_public_key[crypto_box_PUBLICKEYBYTES];$/;"	v
server_response	Enclave.cpp	/^std::string server_response;$/;"	v
server_secret_key	Enclave.cpp	/^unsigned char server_secret_key[crypto_box_SECRETKEYBYTES];$/;"	v
set2	ltablib.cpp	/^static void set2 (lua_State *L, IdxT i, IdxT j) {$/;"	f	file:
set25519	dh/tweetnacl.cpp	/^sv set25519(gf r, const gf a)$/;"	f
set_env	loadlib.cpp	/^static void set_env (lua_State *L) {$/;"	f	file:
setallfields	loslib.cpp	/^static void setallfields (lua_State *L, struct tm *stm) {$/;"	f	file:
setarg	lopcodes.h	94;"	d
setarrayvector	ltable.cpp	/^static void setarrayvector (lua_State *L, Table *t, unsigned int size) {$/;"	f	file:
setbits	lgc.h	68;"	d
setboolfield	loslib.cpp	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f	file:
setbvalue	lobject.h	218;"	d
setclCvalue	lobject.h	245;"	d
setclLvalue	lobject.h	240;"	d
setdeadvalue	lobject.h	255;"	d
seterrorobj	ldo.cpp	/^static void seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f	file:
setfield	loslib.cpp	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f	file:
setfltvalue	lobject.h	198;"	d
setfvalue	lobject.h	212;"	d
setgcovalue	lobject.h	221;"	d
sethvalue	lobject.h	250;"	d
sethvalue2s	lobject.h	273;"	d
setivalue	lobject.h	204;"	d
setlocale	Enclave.cpp	/^setlocale(int category, const char *locale)$/;"	f
setnilvalue	lobject.h	210;"	d
setnodekey	lobject.h	485;"	d
setnodevector	ltable.cpp	/^static void setnodevector (lua_State *L, Table *t, unsigned int size) {$/;"	f	file:
setoah	lstate.h	129;"	d
setobj	lobject.h	259;"	d
setobj2n	lobject.h	278;"	d
setobj2s	lobject.h	271;"	d
setobj2t	lobject.h	282;"	d
setobjs2s	lobject.h	269;"	d
setobjt2t	lobject.h	276;"	d
setpath	loadlib.cpp	/^static void setpath (lua_State *L, const char *fieldname,$/;"	f	file:
setpause	lgc.cpp	/^static void setpause (global_State *g) {$/;"	f	file:
setprogdir	loadlib.cpp	/^static void setprogdir (lua_State *L) {$/;"	f	file:
setprogdir	loadlib.cpp	161;"	d	file:
setprogdir	loadlib.cpp	67;"	d	file:
setptvalue2s	lobject.h	274;"	d
setpvalue	lobject.h	215;"	d
setsvalue	lobject.h	225;"	d
setsvalue2n	lobject.h	279;"	d
setsvalue2s	lobject.h	272;"	d
settableProtected	lvm.cpp	780;"	d	file:
settabsb	ldblib.cpp	/^static void settabsb (lua_State *L, const char *k, int v) {$/;"	f	file:
settabsi	ldblib.cpp	/^static void settabsi (lua_State *L, const char *k, int v) {$/;"	f	file:
settabss	ldblib.cpp	/^static void settabss (lua_State *L, const char *k, const char *v) {$/;"	f	file:
setthvalue	lobject.h	235;"	d
settt_	lobject.h	196;"	d
setuservalue	lobject.h	371;"	d
setuvalue	lobject.h	230;"	d
setvbuf	Enclave.cpp	/^setvbuf(FILE *stream, char *buffer, int mode, size_t size)$/;"	f
sgx_alloc	Enclave.cpp	/^sgx_alloc(size_t len)$/;"	f
sgx_ecall_add_client_pkey	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_add_client_pkey(void* pms)$/;"	f	file:
sgx_ecall_add_code	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_add_code(void* pms)$/;"	f	file:
sgx_ecall_add_code_encrypted	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_add_code_encrypted(void* pms)$/;"	f	file:
sgx_ecall_end_execution	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_end_execution(void* pms)$/;"	f	file:
sgx_ecall_execute	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_execute(void* pms)$/;"	f	file:
sgx_ecall_extra_args	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_extra_args(void* pms)$/;"	f	file:
sgx_ecall_gen_pkeys	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_gen_pkeys(void* pms)$/;"	f	file:
sgx_ecall_get_server_pkey	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_get_server_pkey(void* pms)$/;"	f	file:
sgx_ecall_init	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_init(void* pms)$/;"	f	file:
sgx_ecall_push_arg	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_push_arg(void* pms)$/;"	f	file:
sgx_ecall_send_aes_key	Enclave_t.c	/^static sgx_status_t SGX_CDECL sgx_ecall_send_aes_key(void* pms)$/;"	f	file:
sgx_free	Enclave.cpp	/^sgx_free(void *p)$/;"	f
short_src	lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug
shrlen	lobject.h	/^  lu_byte shrlen;  \/* length for short strings *\/$/;"	m	struct:TString
sibling	test/apr_pools.cpp	/^    apr_pool_t           *sibling;$/;"	m	struct:apr_pool_t	file:
sigma	dh/tweetnacl.cpp	/^static const u8 sigma[16] = "expand 32-byte k";$/;"	v	file:
sigma0	dh/tweetnacl.cpp	/^static u64 sigma0(u64 x) { return R(x, 1) ^ R(x, 8) ^ (x >> 7); }$/;"	f	file:
sigma1	dh/tweetnacl.cpp	/^static u64 sigma1(u64 x) { return R(x,19) ^ R(x,61) ^ (x >> 6); }$/;"	f	file:
simpleexp	lparser.cpp	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f	file:
single_enclave_instance	Enclave.cpp	/^int single_enclave_instance = 0;                  \/* use a single Lua instance, faster code   *\/$/;"	v
singlematch	lstrlib.cpp	/^static int singlematch (MatchState *ms, const char *s, const char *p,$/;"	f	file:
singlestep	lgc.cpp	/^static lu_mem singlestep (lua_State *L) {$/;"	f	file:
singlevar	lparser.cpp	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f	file:
singlevaraux	lparser.cpp	/^static void singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f	file:
size	dh/tools.cpp	/^    size_t size;$/;"	m	struct:content	file:
size	dh/tools.h	/^        size_t size;$/;"	m	struct:content
size	lauxlib.cpp	/^  size_t size;$/;"	m	struct:LoadS	file:
size	lauxlib.h	/^  size_t size;  \/* buffer size *\/$/;"	m	struct:luaL_Buffer
size	lparser.h	/^    int size;$/;"	m	struct:Dyndata::__anon17
size	lparser.h	/^  int size;  \/* array size *\/$/;"	m	struct:Labellist
size	lstate.h	/^  int size;$/;"	m	struct:stringtable
size	test/apr_pools.cpp	/^    apr_size_t size;$/;"	m	struct:psprintf_data	file:
sizeCclosure	lfunc.h	14;"	d
sizeLclosure	lfunc.h	17;"	d
sizearray	lobject.h	/^  unsigned int sizearray;  \/* size of 'array' array *\/$/;"	m	struct:Table
sizecode	lobject.h	/^  int sizecode;$/;"	m	struct:Proto
sizek	lobject.h	/^  int sizek;  \/* size of 'k' *\/$/;"	m	struct:Proto
sizelineinfo	lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto
sizelocvars	lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto
sizelstring	lstring.h	15;"	d
sizeludata	lstring.h	17;"	d
sizenode	lobject.h	519;"	d
sizep	lobject.h	/^  int sizep;  \/* size of 'p' *\/$/;"	m	struct:Proto
sizeudata	lstring.h	18;"	d
sizeupvalues	lobject.h	/^  int sizeupvalues;  \/* size of 'upvalues' *\/$/;"	m	struct:Proto
skipBOM	lauxlib.cpp	/^static int skipBOM (LoadF *lf) {$/;"	f	file:
skip_sep	llex.cpp	/^static int skip_sep (LexState *ls) {$/;"	f	file:
skipcomment	lauxlib.cpp	/^static int skipcomment (LoadF *lf, int *cp) {$/;"	f	file:
skipnoopstat	lparser.cpp	/^static void skipnoopstat (LexState *ls) {$/;"	f	file:
sof	ltablib.cpp	250;"	d	file:
sort	ltablib.cpp	/^static int sort (lua_State *L) {$/;"	f	file:
sort_comp	ltablib.cpp	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f	file:
source	llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState
source	lobject.h	/^  TString  *source;  \/* used for debug information *\/$/;"	m	struct:Proto
source	lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug
split_string	Enclave.cpp	/^split_string(const std::string& str)$/;"	f
srand	Enclave.cpp	/^srand(unsigned int seed)$/;"	f
src	lstrlib.cpp	/^  const char *src;  \/* current position *\/$/;"	m	struct:GMatchState	file:
src_end	lstrlib.cpp	/^  const char *src_end;  \/* end ('\\0') of source string *\/$/;"	m	struct:MatchState	file:
src_init	lstrlib.cpp	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	file:
st32	dh/tweetnacl.cpp	/^sv st32(u8 *x,u32 u)$/;"	f
stack	lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State
stack_init	lstate.cpp	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f	file:
stack_last	lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State
stackerror	ldo.cpp	/^static void stackerror (lua_State *L) {$/;"	f	file:
stackinuse	ldo.cpp	/^static int stackinuse (lua_State *L) {$/;"	f	file:
stacksize	lstate.h	/^  int stacksize;$/;"	m	struct:lua_State
start_capture	lstrlib.cpp	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f	file:
startpc	lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar
stat_alloc	test/apr_pools.cpp	/^    unsigned int          stat_alloc;$/;"	m	struct:apr_pool_t	file:
stat_clear	test/apr_pools.cpp	/^    unsigned int          stat_clear;$/;"	m	struct:apr_pool_t	file:
stat_total_alloc	test/apr_pools.cpp	/^    unsigned int          stat_total_alloc;$/;"	m	struct:apr_pool_t	file:
statement	lparser.cpp	/^static void statement (LexState *ls) {$/;"	f	file:
statlist	lparser.cpp	/^static void statlist (LexState *ls) {$/;"	f	file:
status	ldo.cpp	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	file:
status	ldump.cpp	/^  int status;$/;"	m	struct:__anon4	file:
status	lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State
stderr	sgx_includes.h	/^FILE *stdin, *stdout, *stderr;$/;"	v
stdin	sgx_includes.h	/^FILE *stdin, *stdout, *stderr;$/;"	v
stdout	sgx_includes.h	/^FILE *stdin, *stdout, *stderr;$/;"	v
str_byte	lstrlib.cpp	/^static int str_byte (lua_State *L) {$/;"	f	file:
str_char	lstrlib.cpp	/^static int str_char (lua_State *L) {$/;"	f	file:
str_checkname	lparser.cpp	/^static TString *str_checkname (LexState *ls) {$/;"	f	file:
str_dump	lstrlib.cpp	/^static int str_dump (lua_State *L) {$/;"	f	file:
str_find	lstrlib.cpp	/^static int str_find (lua_State *L) {$/;"	f	file:
str_find_aux	lstrlib.cpp	/^static int str_find_aux (lua_State *L, int find) {$/;"	f	file:
str_format	lstrlib.cpp	/^static int str_format (lua_State *L) {$/;"	f	file:
str_gsub	lstrlib.cpp	/^static int str_gsub (lua_State *L) {$/;"	f	file:
str_len	lstrlib.cpp	/^static int str_len (lua_State *L) {$/;"	f	file:
str_lower	lstrlib.cpp	/^static int str_lower (lua_State *L) {$/;"	f	file:
str_match	lstrlib.cpp	/^static int str_match (lua_State *L) {$/;"	f	file:
str_pack	lstrlib.cpp	/^static int str_pack (lua_State *L) {$/;"	f	file:
str_packsize	lstrlib.cpp	/^static int str_packsize (lua_State *L) {$/;"	f	file:
str_rep	lstrlib.cpp	/^static int str_rep (lua_State *L) {$/;"	f	file:
str_reverse	lstrlib.cpp	/^static int str_reverse (lua_State *L) {$/;"	f	file:
str_sub	lstrlib.cpp	/^static int str_sub (lua_State *L) {$/;"	f	file:
str_unpack	lstrlib.cpp	/^static int str_unpack (lua_State *L) {$/;"	f	file:
str_upper	lstrlib.cpp	/^static int str_upper (lua_State *L) {$/;"	f	file:
strcache	lstate.h	/^  TString *strcache[STRCACHE_N][STRCACHE_M];  \/* cache for strings in API *\/$/;"	m	struct:global_State
strcasecmp	test/apr_general.h	115;"	d
strcpy	Enclave.cpp	/^strcpy(char* destination, const char* source)$/;"	f
strdup	Enclave.cpp	/^strdup(char *src)$/;"	f
stringtable	lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
strip	ldump.cpp	/^  int strip;$/;"	m	struct:__anon4	file:
strlib	lstrlib.cpp	/^static const luaL_Reg strlib[] = {$/;"	v	file:
strncasecmp	test/apr_general.h	121;"	d
strt	lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State
subexpr	lparser.cpp	/^static BinOpr subexpr (LexState *ls, expdesc *v, int limit) {$/;"	f	file:
subprocesses	test/apr_pools.cpp	/^    struct process_chain *subprocesses;$/;"	m	struct:apr_pool_t	typeref:struct:apr_pool_t::process_chain	file:
suffixedexp	lparser.cpp	/^static void suffixedexp (LexState *ls, expdesc *v) {$/;"	f	file:
sv	dh/tweetnacl.cpp	3;"	d	file:
svalue	lobject.h	333;"	d
swapextra	ldebug.cpp	/^static void swapextra (lua_State *L) {$/;"	f	file:
sweepgc	lstate.h	/^  GCObject **sweepgc;  \/* current position of sweep in list *\/$/;"	m	struct:global_State
sweeplist	lgc.cpp	/^static GCObject **sweeplist (lua_State *L, GCObject **p, lu_mem count) {$/;"	f	file:
sweepstep	lgc.cpp	/^static lu_mem sweepstep (lua_State *L, global_State *g,$/;"	f	file:
sweeptolive	lgc.cpp	/^static GCObject **sweeptolive (lua_State *L, GCObject **p) {$/;"	f	file:
sweepwholelist	lgc.cpp	724;"	d	file:
syslib	loslib.cpp	/^static const luaL_Reg syslib[] = {$/;"	v	file:
system	Enclave.cpp	/^system(const char *str)$/;"	f
t	llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState
t	lparser.cpp	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	file:
t	lparser.h	/^      lu_byte t;  \/* table (register or upvalue) *\/$/;"	m	struct:expdesc::__anon15::__anon16
t	lparser.h	/^  int t;  \/* patch list of 'exit when true' *\/$/;"	m	struct:expdesc
t	ltable.cpp	/^  Table *t;$/;"	m	struct:__anon24	file:
tab_funcs	ltablib.cpp	/^static const luaL_Reg tab_funcs[] = {$/;"	v	file:
tag	test/apr_pools.cpp	/^    const char           *tag;$/;"	m	struct:apr_pool_t	file:
tag_error	lauxlib.cpp	/^static void tag_error (lua_State *L, int arg, int tag) {$/;"	f	file:
tconcat	ltablib.cpp	/^static int tconcat (lua_State *L) {$/;"	f	file:
test2	liolib.cpp	/^static int test2 (RN *rn, const char *set) {$/;"	f	file:
testAMode	lopcodes.h	286;"	d
testTMode	lopcodes.h	287;"	d
test_eof	liolib.cpp	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f	file:
test_then_block	lparser.cpp	/^static void test_then_block (LexState *ls, int *escapelist) {$/;"	f	file:
testbit	lgc.h	74;"	d
testbits	lgc.h	69;"	d
testnext	lparser.cpp	/^static int testnext (LexState *ls, int c) {$/;"	f	file:
testprop	lctype.h	52;"	d
th	lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCUnion	typeref:struct:GCUnion::lua_State
thousands_sep	sgx_includes.h	/^   char *thousands_sep;$/;"	m	struct:lconv
thvalue	lobject.h	177;"	d
time	Enclave.cpp	/^time(long int *src)$/;"	f
tinsert	ltablib.cpp	/^static int tinsert (lua_State *L) {$/;"	f	file:
tm1	sgx_includes.h	/^struct tm1 {$/;"	s
tm_hour	sgx_includes.h	/^    int    tm_hour; $/;"	m	struct:tm1
tm_isdst	sgx_includes.h	/^    int    tm_isdst; $/;"	m	struct:tm1
tm_mday	sgx_includes.h	/^    int    tm_mday; $/;"	m	struct:tm1
tm_min	sgx_includes.h	/^    int    tm_min; $/;"	m	struct:tm1
tm_mon	sgx_includes.h	/^    int    tm_mon; $/;"	m	struct:tm1
tm_sec	sgx_includes.h	/^    int    tm_sec; $/;"	m	struct:tm1
tm_wday	sgx_includes.h	/^    int    tm_wday; $/;"	m	struct:tm1
tm_yday	sgx_includes.h	/^    int    tm_yday; $/;"	m	struct:tm1
tm_year	sgx_includes.h	/^    int    tm_year; $/;"	m	struct:tm1
tmname	lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State
tmove	ltablib.cpp	/^static int tmove (lua_State *L) {$/;"	f	file:
tmpfile	Enclave.cpp	/^tmpfile(void)$/;"	f
tmpnam	Enclave.cpp	/^tmpnam(char *str)$/;"	f
tobefnz	lstate.h	/^  GCObject *tobefnz;  \/* list of userdata to be GC *\/$/;"	m	struct:global_State
tofile	liolib.cpp	/^static FILE *tofile (lua_State *L) {$/;"	f	file:
tofinalize	lgc.h	92;"	d
tointeger	lvm.h	43;"	d
token	llex.h	/^  int token;$/;"	m	struct:Token
tolstream	liolib.cpp	145;"	d	file:
tonumber	lvm.h	40;"	d
tonumeral	lcode.cpp	/^static int tonumeral(const expdesc *e, TValue *v) {$/;"	f	file:
top	lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo
top	lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State
tostore	lparser.cpp	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	file:
tostring	lvm.cpp	454;"	d	file:
totalBlocks	umm_malloc.h	/^   unsigned short int totalBlocks; $/;"	m	struct:UMM_HEAP_INFO_t
totalEntries	umm_malloc.h	/^   unsigned short int totalEntries;$/;"	m	struct:UMM_HEAP_INFO_t
total_alloced_bytes	Enclave.cpp	/^size_t total_alloced_bytes = 0;$/;"	v
total_freed_bytes	Enclave.cpp	/^size_t total_freed_bytes = 0;$/;"	v
totalbytes	lstate.h	/^  l_mem totalbytes;  \/* number of bytes currently allocated - GCdebt *\/$/;"	m	struct:global_State
touched	lfunc.h	/^      int touched;  \/* mark to avoid cycles with dead threads *\/$/;"	m	struct:UpVal::__anon5::__anon6
traverseCclosure	lgc.cpp	/^static lu_mem traverseCclosure (global_State *g, CClosure *cl) {$/;"	f	file:
traverseLclosure	lgc.cpp	/^static lu_mem traverseLclosure (global_State *g, LClosure *cl) {$/;"	f	file:
traverseephemeron	lgc.cpp	/^static int traverseephemeron (global_State *g, Table *h) {$/;"	f	file:
traverseproto	lgc.cpp	/^static int traverseproto (global_State *g, Proto *f) {$/;"	f	file:
traversestrongtable	lgc.cpp	/^static void traversestrongtable (global_State *g, Table *h) {$/;"	f	file:
traversetable	lgc.cpp	/^static lu_mem traversetable (global_State *g, Table *h) {$/;"	f	file:
traversethread	lgc.cpp	/^static lu_mem traversethread (global_State *g, lua_State *th) {$/;"	f	file:
traverseweakvalue	lgc.cpp	/^static void traverseweakvalue (global_State *g, Table *h) {$/;"	f	file:
treatstackoption	ldblib.cpp	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f	file:
tremove	ltablib.cpp	/^static int tremove (lua_State *L) {$/;"	f	file:
trim	lbitlib.cpp	41;"	d	file:
tryfuncTM	ldo.cpp	/^static void tryfuncTM (lua_State *L, StkId func) {$/;"	f	file:
ts	llex.h	/^  TString *ts;$/;"	m	union:__anon8
ts	lstate.h	/^  struct TString ts;$/;"	m	union:GCUnion	typeref:struct:GCUnion::TString
ts64	dh/tweetnacl.cpp	/^sv ts64(u8 *x,u64 u)$/;"	f
tsslen	lobject.h	336;"	d
tsv	lobject.h	/^  TString tsv;$/;"	m	union:UTString
tsvalue	lobject.h	169;"	d
ttisCclosure	lobject.h	154;"	d
ttisLclosure	lobject.h	155;"	d
ttisboolean	lobject.h	146;"	d
ttisclosure	lobject.h	153;"	d
ttisdeadkey	lobject.h	159;"	d
ttisfloat	lobject.h	143;"	d
ttisfulluserdata	lobject.h	157;"	d
ttisfunction	lobject.h	152;"	d
ttisinteger	lobject.h	144;"	d
ttislcf	lobject.h	156;"	d
ttislightuserdata	lobject.h	147;"	d
ttislngstring	lobject.h	150;"	d
ttisnil	lobject.h	145;"	d
ttisnumber	lobject.h	142;"	d
ttisshrstring	lobject.h	149;"	d
ttisstring	lobject.h	148;"	d
ttistable	lobject.h	151;"	d
ttisthread	lobject.h	158;"	d
ttnov	lobject.h	136;"	d
ttuv_	lobject.h	/^  lu_byte ttuv_;  \/* user value's tag *\/$/;"	m	struct:Udata
ttype	lobject.h	133;"	d
ttypename	ltm.h	53;"	d
tvk	lobject.h	/^  TValue tvk;$/;"	m	union:TKey
twoto	lobject.h	518;"	d
twups	lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
twups	lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_State
txtToken	llex.cpp	/^static const char *txtToken (LexState *ls, int token) {$/;"	f	file:
typeerror	lauxlib.cpp	/^static int typeerror (lua_State *L, int arg, const char *tname) {$/;"	f	file:
u	lfunc.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon5
u	llimits.h	/^  double u;$/;"	m	union:__anon9
u	lobject.h	/^  } u;$/;"	m	struct:TString	typeref:union:TString::__anon10
u	lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon15
u	lstate.h	/^  struct Udata u;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Udata
u	lstate.h	/^  } u;$/;"	m	struct:CallInfo	typeref:union:CallInfo::__anon18
u	lstrlib.cpp	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	struct:cD	typeref:union:cD::__anon23	file:
u32	dh/tweetnacl.cpp	/^typedef unsigned long u32;$/;"	t	file:
u64	dh/tweetnacl.cpp	/^typedef unsigned long long u64;$/;"	t	file:
u8	dh/tweetnacl.cpp	/^typedef unsigned char u8;$/;"	t	file:
u_posrelat	lutf8lib.cpp	/^static lua_Integer u_posrelat (lua_Integer pos, size_t len) {$/;"	f	file:
uchar	lstrlib.cpp	39;"	d	file:
ud	lstate.h	/^  void *ud;         \/* auxiliary data to 'frealloc' *\/$/;"	m	struct:global_State
udata2finalize	lgc.cpp	/^static GCObject *udata2finalize (global_State *g) {$/;"	f	file:
udatatypename	ltm.cpp	/^static const char udatatypename[] = "userdata";$/;"	v	file:
uid_t	test/apr.h	/^typedef  int         uid_t;$/;"	t
umm_assimilate_down	umm_malloc.cpp	/^static unsigned short int umm_assimilate_down( unsigned short int c, unsigned short int freemask ) {$/;"	f	file:
umm_assimilate_up	umm_malloc.cpp	/^static void umm_assimilate_up( unsigned short int c ) {$/;"	f	file:
umm_block	umm_malloc.cpp	/^} UMM_H_ATTPACKSUF umm_block;$/;"	t	typeref:struct:umm_block_t	file:
umm_block_t	umm_malloc.cpp	/^UMM_H_ATTPACKPRE typedef struct umm_block_t {$/;"	s	file:
umm_blocks	umm_malloc.cpp	/^static unsigned short int umm_blocks( size_t size ) {$/;"	f	file:
umm_disconnect_from_free_list	umm_malloc.cpp	/^static void umm_disconnect_from_free_list( unsigned short int c ) {$/;"	f	file:
umm_free	umm_malloc.cpp	/^void umm_free( void *ptr ) {$/;"	f
umm_heap	umm_malloc.cpp	/^umm_block umm_heap[(UMM_MALLOC_CFG__HEAP_SIZE \/ sizeof(umm_block))];$/;"	v
umm_info	umm_malloc.cpp	/^void *umm_info( void *ptr, int force ) {$/;"	f
umm_make_new_block	umm_malloc.cpp	/^static void umm_make_new_block( unsigned short int c,$/;"	f	file:
umm_malloc	umm_malloc.cpp	/^void *umm_malloc( size_t size ) {$/;"	f
umm_numblocks	umm_malloc.cpp	/^const unsigned int umm_numblocks = (sizeof(umm_heap) \/ sizeof(umm_block));$/;"	v
umm_ptr	umm_malloc.cpp	/^} UMM_H_ATTPACKSUF umm_ptr;$/;"	t	typeref:struct:umm_ptr_t	file:
umm_ptr_t	umm_malloc.cpp	/^UMM_H_ATTPACKPRE typedef struct umm_ptr_t {$/;"	s	file:
umm_realloc	umm_malloc.cpp	/^void *umm_realloc( void *ptr, size_t size ) {$/;"	f
unbound_search	ltable.cpp	/^static lua_Unsigned unbound_search (Table *t, lua_Unsigned j) {$/;"	f	file:
undefgoto	lparser.cpp	/^static l_noret undefgoto (LexState *ls, Labeldesc *gt) {$/;"	f	file:
ungetc	Enclave.cpp	/^ungetc(int ch, FILE *stream)$/;"	f
unmakemask	ldblib.cpp	/^static char *unmakemask (int mask, char *smask) {$/;"	f	file:
unpack	ltablib.cpp	/^static int unpack (lua_State *L) {$/;"	f	file:
unpack25519	dh/tweetnacl.cpp	/^sv unpack25519(gf o, const u8 *n)$/;"	f
unpackint	lstrlib.cpp	/^static lua_Integer unpackint (lua_State *L, const char *str,$/;"	f	file:
unpackneg	dh/tweetnacl.cpp	/^static int unpackneg(gf r[4],const u8 p[32])$/;"	f	file:
unroll	ldo.cpp	/^static void unroll (lua_State *L, void *ud) {$/;"	f	file:
upisopen	lfunc.h	47;"	d
upval	lparser.cpp	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	file:
upvalname	ldebug.cpp	/^static const char *upvalname (Proto *p, int uv) {$/;"	f	file:
upvals	lobject.h	/^  UpVal *upvals[1];  \/* list of upvalues *\/$/;"	m	struct:LClosure
upvalue	lobject.h	/^  TValue upvalue[1];  \/* list of upvalues *\/$/;"	m	struct:CClosure
upvalues	lobject.h	/^  Upvaldesc *upvalues;  \/* upvalue information *\/$/;"	m	struct:Proto
use_mempool	Enclave.cpp	/^int use_mempool = 0;                 	\/* use custom mempool                       *\/$/;"	v
used	umm_malloc.cpp	/^      umm_ptr used;$/;"	m	union:umm_block_t::__anon27	file:
usedBlocks	umm_malloc.h	/^   unsigned short int usedBlocks; $/;"	m	struct:UMM_HEAP_INFO_t
usedEntries	umm_malloc.h	/^   unsigned short int usedEntries;$/;"	m	struct:UMM_HEAP_INFO_t
user_	lobject.h	/^  union Value user_;  \/* user value *\/$/;"	m	struct:Udata	typeref:union:Udata::Value
user_data	test/apr_pools.cpp	/^    apr_hash_t           *user_data;$/;"	m	struct:apr_pool_t	file:
user_input	Enclave.cpp	/^size_t user_input = 0;                  \/* does the user has input                  *\/$/;"	v
utf8_decode	lutf8lib.cpp	/^static const char *utf8_decode (const char *o, int *val) {$/;"	f	file:
utf8esc	llex.cpp	/^static void utf8esc (LexState *ls) {$/;"	f	file:
utfchar	lutf8lib.cpp	/^static int utfchar (lua_State *L) {$/;"	f	file:
utflen	lutf8lib.cpp	/^static int utflen (lua_State *L) {$/;"	f	file:
uv	lobject.h	/^  Udata uv;$/;"	m	union:UUdata
uvalue	lobject.h	170;"	d
v	lfunc.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal
v	lparser.cpp	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	file:
v	lparser.cpp	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	file:
val_	lobject.h	123;"	d
validop	lcode.cpp	/^static int validop (int op, TValue *v1, TValue *v2) {$/;"	f	file:
valiswhite	lgc.cpp	74;"	d	file:
value	lfunc.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon5
varinfo	ldebug.cpp	/^static const char *varinfo (lua_State *L, const TValue *o) {$/;"	f	file:
varname	lobject.h	/^  TString *varname;$/;"	m	struct:LocVar
vbuff	test/apr_pools.cpp	/^    apr_vformatter_buff_t vbuff;$/;"	m	struct:psprintf_data	file:
version	lstate.h	/^  const lua_Number *version;  \/* pointer to version number *\/$/;"	m	struct:global_State
vkisinreg	lparser.h	52;"	d
vkisvar	lparser.h	51;"	d
vmbreak	lvm.cpp	767;"	d	file:
vmcase	lvm.cpp	766;"	d	file:
vmdispatch	lvm.cpp	765;"	d	file:
vmfetch	lvm.cpp	757;"	d	file:
vn	dh/tweetnacl.cpp	/^static int vn(const u8 *x,const u8 *y,int n)$/;"	f	file:
vslen	lobject.h	339;"	d
vt	lparser.h	/^      lu_byte vt;  \/* whether 't' is register (VLOCAL) or upvalue (VUPVAL) *\/$/;"	m	struct:expdesc::__anon15::__anon16
weak	lstate.h	/^  GCObject *weak;  \/* list of tables with weak values *\/$/;"	m	struct:global_State
wgkey	ltable.h	25;"	d
what	lua.h	/^  const char *what;	\/* (S) 'Lua', 'C', 'main', 'tail' *\/$/;"	m	struct:lua_Debug
whilestat	lparser.cpp	/^static void whilestat (LexState *ls, int line) {$/;"	f	file:
white2gray	lgc.cpp	70;"	d	file:
writer	ldump.cpp	/^  lua_Writer writer;$/;"	m	struct:__anon4	file:
writer	lstrlib.cpp	/^static int writer (lua_State *L, const void *b, size_t size, void *B) {$/;"	f	file:
yindex	lparser.cpp	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f	file:
z	ldo.cpp	/^  ZIO *z;$/;"	m	struct:SParser	file:
z	llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState
zgetc	lzio.h	20;"	d
