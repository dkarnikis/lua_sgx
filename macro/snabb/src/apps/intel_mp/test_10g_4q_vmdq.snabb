#!../../snabb snsh

-- Snabb test script for testing 4 queue RSS mode

local basic_apps = require("apps.basic.basic_apps")
local intel      = require("apps.intel_mp.intel_mp")
local pcap       = require("apps.pcap.pcap")
local lib        = require("core.lib")

local pciaddr0 = lib.getenv("SNABB_PCI_INTEL0")
local pciaddr1 = lib.getenv("SNABB_PCI_INTEL1")

local c = config.new()

config.app(c, "source", pcap.PcapReader, "source.pcap")
config.app(c, 'sink', basic_apps.Sink)

-- send packets on nic0
config.app(c, "nic0", intel.Intel,
           { pciaddr = pciaddr0,
             -- disable rxq
             rxq = false,
             txq = 0,
             wait_for_link = true })
config.app(c, "repeat", basic_apps.Repeater)
config.link(c, "source.output -> repeat.input")
config.link(c, "repeat.output -> nic0.input")

-- nic1 with 4-way RSS
for i=0, 3 do
   config.app(c, "nic1p" .. i, intel.Intel,
              { pciaddr = pciaddr1,
                vmdq = true,
                vmdq_queuing_mode = "rss-32-4",
                macaddr = "90:72:82:78:c9:7a",
                poolnum = 0,
                rxcounter = i+1,
                rxq = i,
                txq = i,
                wait_for_link = true })
   config.link(c, "nic1p" .. i .. ".output -> sink.input" .. i)
end

engine.configure(c)
engine.main({ duration = 1 })

-- check for output on all 4 queues
for i=0, 3 do
   assert(link.stats(engine.app_table.sink.input["input" .. i]).rxpackets > 0,
          "expected packet rx on rss queue " .. i)
end
