--
-- This file has been pre-processed with DynASM.
-- http://luajit.org/dynasm.html
-- DynASM version 1.4.0_luamode, DynASM x64 version 1.4.0_luamode
-- DO NOT EDIT! The original file is in "lib/lpm/random.dasl".
--

module(..., package.seeall)

local ffi = require('ffi')
local C = ffi.C
local dasm = require('dasm')

--|.arch x64
if dasm._VERSION ~= 10400 then
  error("Version mismatch between DynASM and included encoding engine")
end
--|.actionlist actions
local actions = ffi.new('const uint8_t[27]', {
  137,252,248,193,224,13,49,199,137,252,248,193,232,17,49,199,137,252,248,193,
  231,5,49,252,248,195,255
})


Rand = {}


-- integer arguments are passed in RDI, RSI, RDX, RCX, R8, and R9
-- the return value is in rax
Rand.u32 = (function()
  local Dst = dasm.new(actions)
--| mov eax, edi
--| shl eax, 13
--| xor edi, eax
--| mov eax, edi
--| shr eax, 17
--| xor edi, eax
--| mov eax, edi
--| shl edi, 5
--| xor eax, edi
--| ret
dasm.put(Dst, 0)
  Rand.code_u32 = Dst:build()
  return ffi.cast("uint32_t (*) (uint32_t)", Rand.code_u32)
end)()

function Rand:selftest()
   local pmu = require("lib.pmu")
   local v = 0
   local million = 1000000
   local function test()
      for i=0, 500*million do
         v = Rand.u32(v)
      end
   end
   local avail, err = pmu.is_available()
   local start = C.get_time_ns()
   if not avail then
      print("PMU not available:")
      print("  "..err)
      test()
   else
      pmu.profile(test, {}, { random_u32 = 500*million })
   end
   print(tonumber((C.get_time_ns() - start))/(500*million))
end

return Rand
